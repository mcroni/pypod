{"#83 from __future__ import braces": {"info": {"title": "#83 from __future__ import braces", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#83 from __future__ import braces"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/83/from-future-import-braces"}, {"length": "13340669", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/83/from-future-import-braces.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/83/from-future-import-braces", "id": "https://pythonbytes.fm/episodes/62194ad3-7132-44e6-8152-f2be6b605466", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p>Special guest: <a href=\"https://tryexceptpass.org/\">Cristian Medina</a>, <a href=\"https://twitter.com/tryexceptpass\">@tryexceptpass</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://codewith.mu/en/\"><strong>Code with Mu: a simple Python editor for beginner programmers.</strong></a></p>\n\n<ul>\n<li>Found out about this from Nicholas Tollervey (<a href=\"https://twitter.com/ntoll\">@ntoll</a>)</li>\n<li>Built by an impressive list of people: <a href=\"https://codewith.mu/en/\">https://codewith.mu/en/</a> thanks</li>\n<li>Beginning code editor that also works with Adafruit and micro:bit boards.</li>\n<li>From about:\n<ul>\n<li><strong>Less is More.</strong>\n<ul>\n<li>Mu has only the most essential features, so users are not intimidated by a baffling interface.</li>\n</ul></li>\n<li><strong>Tread the Path of Least Resistance.</strong>\n<ul>\n<li>Whatever the task, there is always only one obvious way to do it with Mu.</li>\n</ul></li>\n<li><strong>Keep it Simple.</strong>\n<ul>\n<li>It's quick and easy to learn Mu ~ complexity impedes a novice programmer's first steps.</li>\n</ul></li>\n<li><strong>Have fun!</strong>\n<ul>\n<li>Learning should inspire fun ~ Mu helps learners quickly create and test working code.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Cris #2:</strong> <a href=\"http://blog.lerner.co.il/python-parentheses-primer/\"><strong>Python parenthesis primer</strong></a></p>\n\n<ul>\n<li>Good for beginners. Covers the main uses of parenthesis, curly brackets and square brackets. Including code examples.</li>\n<li>Parenthesis\n<ul>\n<li>Callables.</li>\n<li>Operation prioritization.</li>\n<li>Tuples.</li>\n<li>Generator expressions.</li>\n<li>Skirting the indentation rules.</li>\n</ul></li>\n<li>Square brackets\n<ul>\n<li>Lists and their comprehensions.</li>\n<li>Indexing.</li>\n<li>Slices.</li>\n<li>Comments also mention type hints.</li>\n</ul></li>\n<li>Curly braces\n<ul>\n<li>Dictionaries and comprehensions.</li>\n<li>Sets and comprehensions.</li>\n<li>F-strings.</li>\n<li>str.format.</li>\n</ul></li>\n<li>Try to import braces from <code>__future__</code>:</li>\n</ul>\n\n<pre><code>    &gt;&gt;&gt; from __future__ import braces\n      File \"&lt;stdin&gt;\", line 1\n    SyntaxError: not a chance\n</code></pre>\n\n<p><strong>Michael #3:</strong> <a href=\"https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/\"><strong>Python for Qt Released</strong></a></p>\n\n<ul>\n<li>The Qt Company happy to announce the first official release of Qt for Python (Pyside2).</li>\n<li>v5.11</li>\n<li>We hope we can receive plenty of feedback on what works and what does not. We want to patch early and often.</li>\n<li>Eventually the aim is to release Qt for Python 5.12 without the Tech Preview flag.</li>\n<li>Started two years ago with this <a href=\"https://groups.google.com/forum/#!topic/pyside-dev/pqwzngAGLWE\">announcement</a> from <a href=\"https://blog.qt.io/blog/author/lars/\">Lars</a>.</li>\n<li>Get Qt for Python: The release supports Python 2.7, 3.5 &amp; 3.6 on the three main desktop platforms. The packages can be obtained from download.qt.io or using pip with</li>\n<li><code>pip install --index-url=https://download.qt.io/official_releases/QtForPython/ pyside2</code></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://realpython.com/python-itertools/\"><strong>Itertools in Python 3, By Example</strong></a>\n<a href=\"https://realpython.com/python-itertools/\"></a></p>\n\n<ul>\n<li>by David Amos (<a href=\"https://twitter.com/somacdivad\">@somacdivad</a>)</li>\n<li>Iterators and generators are awesome.</li>\n<li>Nice discussion of lazy evaluation and iterator algebra.</li>\n<li>Naive approach using list can blow up in memory and time if you use huge datasets.</li>\n<li>Examples:\n<ul>\n<li>combinations, combinations_with_replacement, permutations</li>\n<li>count, repeat, cycle, accumulate</li>\n<li>product, tee, islice, chain</li>\n<li>filterfalse, takewhile, dropwhile</li>\n</ul></li>\n</ul>\n\n<p><strong>Cris #5:</strong> <a href=\"https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607\"><strong>Python Sets and Set Theory</strong></a></p>\n\n<ul>\n<li>Nice primer on sets in python and a little set theory.</li>\n<li>How to build them: <code>set()</code> vs <code>{``'``value1``'``,</code> <code>'``value2``'``}</code> vs <code>{name for name in name_list}</code></li>\n<li>Membership tests (which are O(1))</li>\n<li>Set operations\n<ul>\n<li>Union</li>\n<li>Intersection</li>\n<li>Difference</li>\n<li>Symmetric Difference</li>\n</ul></li>\n<li>Frozen sets</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://docs.python.org/3.7/whatsnew/3.7.html\"><strong>Python 3.7 is coming soon</strong></a><strong>!</strong></p>\n\n<ul>\n<li>Schedule\n<ul>\n<li>3.7.0 candidate 1: 2018-06-12</li>\n<li>3.7.0 final: 2018-06-27</li>\n</ul></li>\n<li>What\u2019s new / changed?\n<ul>\n<li>New syntax features: PEP 563, postponed evaluation of type annotations.</li>\n<li>New modules: dataclasses: PEP 557 \u2013 Data Classes</li>\n<li>New built-in features: PEP 553, the new breakpoint() function.</li>\n<li>Standard lib changes: \n<ul>\n<li>The asyncio module has received new features, significant usability and performance improvements.</li>\n<li>The time module gained support for functions with nanosecond resolution.</li>\n</ul></li>\n<li>Speed: \n<ul>\n<li>Method calls are 20% faster</li>\n<li>3.7 is THE fastest Python available, period.</li>\n</ul></li>\n</ul></li>\n<li><a href=\"https://app.pluralsight.com/library/courses/python-whats-new/\"><strong>What\u2019s new in Python 3.7 course</strong></a> by Anthony Shaw</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>ahem\u2026 <strong><a href=\"https://www.mongodb.com/presentation/building-python-web-apps\">https://www.mongodb.com/presentation/building-python-web-apps</a></strong></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p>Special guest: <a href=\"https://tryexceptpass.org/\">Cristian Medina</a>, <a href=\"https://twitter.com/tryexceptpass\">@tryexceptpass</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://codewith.mu/en/\"><strong>Code with Mu: a simple Python editor for beginner programmers.</strong></a></p>\n\n<ul>\n<li>Found out about this from Nicholas Tollervey (<a href=\"https://twitter.com/ntoll\">@ntoll</a>)</li>\n<li>Built by an impressive list of people: <a href=\"https://codewith.mu/en/\">https://codewith.mu/en/</a> thanks</li>\n<li>Beginning code editor that also works with Adafruit and micro:bit boards.</li>\n<li>From about:\n<ul>\n<li><strong>Less is More.</strong>\n<ul>\n<li>Mu has only the most essential features, so users are not intimidated by a baffling interface.</li>\n</ul></li>\n<li><strong>Tread the Path of Least Resistance.</strong>\n<ul>\n<li>Whatever the task, there is always only one obvious way to do it with Mu.</li>\n</ul></li>\n<li><strong>Keep it Simple.</strong>\n<ul>\n<li>It's quick and easy to learn Mu ~ complexity impedes a novice programmer's first steps.</li>\n</ul></li>\n<li><strong>Have fun!</strong>\n<ul>\n<li>Learning should inspire fun ~ Mu helps learners quickly create and test working code.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Cris #2:</strong> <a href=\"http://blog.lerner.co.il/python-parentheses-primer/\"><strong>Python parenthesis primer</strong></a></p>\n\n<ul>\n<li>Good for beginners. Covers the main uses of parenthesis, curly brackets and square brackets. Including code examples.</li>\n<li>Parenthesis\n<ul>\n<li>Callables.</li>\n<li>Operation prioritization.</li>\n<li>Tuples.</li>\n<li>Generator expressions.</li>\n<li>Skirting the indentation rules.</li>\n</ul></li>\n<li>Square brackets\n<ul>\n<li>Lists and their comprehensions.</li>\n<li>Indexing.</li>\n<li>Slices.</li>\n<li>Comments also mention type hints.</li>\n</ul></li>\n<li>Curly braces\n<ul>\n<li>Dictionaries and comprehensions.</li>\n<li>Sets and comprehensions.</li>\n<li>F-strings.</li>\n<li>str.format.</li>\n</ul></li>\n<li>Try to import braces from <code>__future__</code>:</li>\n</ul>\n\n<pre><code>    &gt;&gt;&gt; from __future__ import braces\n      File \"&lt;stdin&gt;\", line 1\n    SyntaxError: not a chance\n</code></pre>\n\n<p><strong>Michael #3:</strong> <a href=\"https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/\"><strong>Python for Qt Released</strong></a></p>\n\n<ul>\n<li>The Qt Company happy to announce the first official release of Qt for Python (Pyside2).</li>\n<li>v5.11</li>\n<li>We hope we can receive plenty of feedback on what works and what does not. We want to patch early and often.</li>\n<li>Eventually the aim is to release Qt for Python 5.12 without the Tech Preview flag.</li>\n<li>Started two years ago with this <a href=\"https://groups.google.com/forum/#!topic/pyside-dev/pqwzngAGLWE\">announcement</a> from <a href=\"https://blog.qt.io/blog/author/lars/\">Lars</a>.</li>\n<li>Get Qt for Python: The release supports Python 2.7, 3.5 &amp; 3.6 on the three main desktop platforms. The packages can be obtained from download.qt.io or using pip with</li>\n<li><code>pip install --index-url=https://download.qt.io/official_releases/QtForPython/ pyside2</code></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://realpython.com/python-itertools/\"><strong>Itertools in Python 3, By Example</strong></a>\n<a href=\"https://realpython.com/python-itertools/\"></a></p>\n\n<ul>\n<li>by David Amos (<a href=\"https://twitter.com/somacdivad\">@somacdivad</a>)</li>\n<li>Iterators and generators are awesome.</li>\n<li>Nice discussion of lazy evaluation and iterator algebra.</li>\n<li>Naive approach using list can blow up in memory and time if you use huge datasets.</li>\n<li>Examples:\n<ul>\n<li>combinations, combinations_with_replacement, permutations</li>\n<li>count, repeat, cycle, accumulate</li>\n<li>product, tee, islice, chain</li>\n<li>filterfalse, takewhile, dropwhile</li>\n</ul></li>\n</ul>\n\n<p><strong>Cris #5:</strong> <a href=\"https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607\"><strong>Python Sets and Set Theory</strong></a></p>\n\n<ul>\n<li>Nice primer on sets in python and a little set theory.</li>\n<li>How to build them: <code>set()</code> vs <code>{``'``value1``'``,</code> <code>'``value2``'``}</code> vs <code>{name for name in name_list}</code></li>\n<li>Membership tests (which are O(1))</li>\n<li>Set operations\n<ul>\n<li>Union</li>\n<li>Intersection</li>\n<li>Difference</li>\n<li>Symmetric Difference</li>\n</ul></li>\n<li>Frozen sets</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://docs.python.org/3.7/whatsnew/3.7.html\"><strong>Python 3.7 is coming soon</strong></a><strong>!</strong></p>\n\n<ul>\n<li>Schedule\n<ul>\n<li>3.7.0 candidate 1: 2018-06-12</li>\n<li>3.7.0 final: 2018-06-27</li>\n</ul></li>\n<li>What\u2019s new / changed?\n<ul>\n<li>New syntax features: PEP 563, postponed evaluation of type annotations.</li>\n<li>New modules: dataclasses: PEP 557 \u2013 Data Classes</li>\n<li>New built-in features: PEP 553, the new breakpoint() function.</li>\n<li>Standard lib changes: \n<ul>\n<li>The asyncio module has received new features, significant usability and performance improvements.</li>\n<li>The time module gained support for functions with nanosecond resolution.</li>\n</ul></li>\n<li>Speed: \n<ul>\n<li>Method calls are 20% faster</li>\n<li>3.7 is THE fastest Python available, period.</li>\n</ul></li>\n</ul></li>\n<li><a href=\"https://app.pluralsight.com/library/courses/python-whats-new/\"><strong>What\u2019s new in Python 3.7 course</strong></a> by Anthony Shaw</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>ahem\u2026 <strong><a href=\"https://www.mongodb.com/presentation/building-python-web-apps\">https://www.mongodb.com/presentation/building-python-web-apps</a></strong></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 22 Jun 2018 00:00:00 -0800", "published_parsed": [2018, 6, 22, 8, 0, 0, 4, 173, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "from __future__ import braces", "itunes_episode": "83", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:29:22"}}, "#82 Let's make a clear Python 3 statement": {"info": {"title": "#82 Let's make a clear Python 3 statement", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#82 Let's make a clear Python 3 statement"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/82/let-s-make-a-clear-python-3-statement"}, {"length": "11171913", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/82/let-s-make-a-clear-python-3-statement.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/82/let-s-make-a-clear-python-3-statement", "id": "https://pythonbytes.fm/episodes/30712fb9-7a6d-4eaf-bdc1-b5339ec2eda6", "guidislink": false, "summary": "<p>DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><em>* GitHub coverage coming at the end! *</em></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://realpython.com/flask-connexion-rest-api/\"><strong>Building and Documenting Python REST APIs With Flask and Connexion</strong></a></p>\n\n<ul>\n<li><strong>Doug Farrell, <a href=\"https://twitter.com/writeson\">@writeson</a>, on the RealPython site.</strong></li>\n<li>Tutorial with example.\n<ul>\n<li>REST explanation of what REST is and is not</li>\n<li><a href=\"https://swagger.io/\">Swagger</a>, swagger.yml to define API</li>\n<li>Use <a href=\"https://github.com/zalando/connexion\">Connexion</a> to incorporate swagger.yml into Flask app.</li>\n<li>Nice succinct explanation of swagger and API configuration.</li>\n<li>Demo of Swagger UI for API documentation.</li>\n<li>JavaScript included for MVC implementation.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/gvanrossum/status/1001869119937961984\"><strong>MyPy + PyCharm</strong></a></p>\n\n<ul>\n<li>Written by Ivan Levkivskyi</li>\n<li>via Guido van Rossum</li>\n<li>Ricky Teachey asks: \u201cWhat advantages does using mypy bring to pycharm vs just using pycharm's native type checking- which is already pretty good?\u201d</li>\n<li>Response: \n<ul>\n<li>mypy is a bit more stricter/precise</li>\n<li>it is more configurable, lots of options regulating type system \"rules\"</li>\n<li>it typechecks the whole program, so that you immediately see errors your change causes in _other_ files</li>\n<li>people run mypy in CI and want to see the result before push</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3: Automatic code/doc conversion</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/asottile/pyupgrade/blob/master/README.md\">pyupgrade</a>\n<ul>\n<li>\u201cA tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.\u201d</li>\n<li>Can even convert to f-strings with <code>--py36-plus</code> option.</li>\n</ul></li>\n<li><a href=\"https://github.com/asottile/blacken-docs\">docs</a>\n<ul>\n<li>\u201cRun <code>black</code> on python code blocks in documentation files.\u201d</li>\n<li>blacken-docs provides a single executable (blacken-docs) which will modify .rst / .md files in place.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://twitter.com/Mbussonn/status/1004177424488132608\"><strong>python3statement</strong></a></p>\n\n<ul>\n<li>via Bruno Alla</li>\n<li>Matthias Bussonnier (Talk Python, <a href=\"https://talkpython.fm/episodes/show/44/project-jupyter-and-ipython\">episode 44</a>)\n<ul>\n<li><em>\u201cWe now have 44 projects that pledged to drop #python2 in less than 30 months. Some already did ! To see which one, and how to migrate with as few disruption as possible for both Python 2 and 3 users head to http://python3statement.org/ \u201d</em></li>\n</ul></li>\n<li>Supporting legacy Python: **it is a small but constant friction in the development of a lot of code.</li>\n<li>We are keen to use Python 3 to its full potential, and we currently accept the cost of writing cross-compatible code to allow a smooth transition, but we don\u2019t intend to maintain this compatibility indefinitely. </li>\n<li>Nice \u201cWhy switch to Python 3?\u201d section and resources</li>\n<li>Nice list of participating projects\n<ul>\n<li>Can we get some that are not data science? :)</li>\n</ul></li>\n</ul>\n\n<p><strong>Microsoft buys GitHub</strong>:</p>\n\n<ul>\n<li><a href=\"https://arstechnica.com/gadgets/2018/06/everyone-complaining-about-microsoft-buying-github-needs-to-offer-a-better-solution/?comments=1&amp;unread=1\">Everyone complaining about Microsoft buying GitHub needs to offer a better solution</a></li>\n<li><a href=\"https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/\">Microsoft to acquire GitHub for $7.5 billion</a></li>\n<li><a href=\"https://www.linuxfoundation.org/blog/microsoft-buys-github-the-linux-foundations-reaction/?SSAID=389818\">Linux Foundation: Microsoft's GitHub buy is a win for open source</a></li>\n<li>Coverage on Exponent podcast: <a href=\"https://overcast.fm/+BihnqmtgQ\">154 \u2014 Legacy Leverage</a></li>\n<li><a href=\"https://www.reddit.com/r/AMA/comments/8pc8mf/im_nat_friedman_future_ceo_of_github_ama/?utm_source=amp&amp;utm_medium=comment_list\">Nat Friedman, future CEO of GitHub, AMA</a></li>\n<li>Re gitlab:\n<ul>\n<li><a href=\"https://about.gitlab.com/2018/06/03/microsoft-acquires-github/\">GitLab congratulates GitHub and Microsoft</a></li>\n<li><a href=\"https://twitter.com/gitlab/status/1004143715844124673\">GitLab imports from GitHub going up</a></li>\n</ul></li>\n</ul>\n\n<p>Our news and extras:</p>\n\n<ul>\n<li>PyLadies Cleveland just launched:\n<ul>\n<li>First meeting June 26</li>\n<li>(FB Profile) <a href=\"https://www.facebook.com/cleveland.pyladies.3\">https://www.facebook.com/cleveland.pyladies.3</a></li>\n<li>(FB Community Page) <a href=\"https://www.facebook.com/clepyladies/\">https://www.facebook.com/clepyladies/</a></li>\n<li>(Twitter) <a href=\"https://twitter.com/CLEPyladies\">https://twitter.com/CLEPyladies</a></li>\n<li>(Meetup) <a href=\"https://www.meetup.com/CLE-PyLadies/\">https://www.meetup.com/CLE-PyLadies/</a></li>\n<li>(YouTube) <a href=\"https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw\">https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw</a></li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><em>* GitHub coverage coming at the end! *</em></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://realpython.com/flask-connexion-rest-api/\"><strong>Building and Documenting Python REST APIs With Flask and Connexion</strong></a></p>\n\n<ul>\n<li><strong>Doug Farrell, <a href=\"https://twitter.com/writeson\">@writeson</a>, on the RealPython site.</strong></li>\n<li>Tutorial with example.\n<ul>\n<li>REST explanation of what REST is and is not</li>\n<li><a href=\"https://swagger.io/\">Swagger</a>, swagger.yml to define API</li>\n<li>Use <a href=\"https://github.com/zalando/connexion\">Connexion</a> to incorporate swagger.yml into Flask app.</li>\n<li>Nice succinct explanation of swagger and API configuration.</li>\n<li>Demo of Swagger UI for API documentation.</li>\n<li>JavaScript included for MVC implementation.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/gvanrossum/status/1001869119937961984\"><strong>MyPy + PyCharm</strong></a></p>\n\n<ul>\n<li>Written by Ivan Levkivskyi</li>\n<li>via Guido van Rossum</li>\n<li>Ricky Teachey asks: \u201cWhat advantages does using mypy bring to pycharm vs just using pycharm's native type checking- which is already pretty good?\u201d</li>\n<li>Response: \n<ul>\n<li>mypy is a bit more stricter/precise</li>\n<li>it is more configurable, lots of options regulating type system \"rules\"</li>\n<li>it typechecks the whole program, so that you immediately see errors your change causes in _other_ files</li>\n<li>people run mypy in CI and want to see the result before push</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3: Automatic code/doc conversion</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/asottile/pyupgrade/blob/master/README.md\">pyupgrade</a>\n<ul>\n<li>\u201cA tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.\u201d</li>\n<li>Can even convert to f-strings with <code>--py36-plus</code> option.</li>\n</ul></li>\n<li><a href=\"https://github.com/asottile/blacken-docs\">docs</a>\n<ul>\n<li>\u201cRun <code>black</code> on python code blocks in documentation files.\u201d</li>\n<li>blacken-docs provides a single executable (blacken-docs) which will modify .rst / .md files in place.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://twitter.com/Mbussonn/status/1004177424488132608\"><strong>python3statement</strong></a></p>\n\n<ul>\n<li>via Bruno Alla</li>\n<li>Matthias Bussonnier (Talk Python, <a href=\"https://talkpython.fm/episodes/show/44/project-jupyter-and-ipython\">episode 44</a>)\n<ul>\n<li><em>\u201cWe now have 44 projects that pledged to drop #python2 in less than 30 months. Some already did ! To see which one, and how to migrate with as few disruption as possible for both Python 2 and 3 users head to http://python3statement.org/ \u201d</em></li>\n</ul></li>\n<li>Supporting legacy Python: **it is a small but constant friction in the development of a lot of code.</li>\n<li>We are keen to use Python 3 to its full potential, and we currently accept the cost of writing cross-compatible code to allow a smooth transition, but we don\u2019t intend to maintain this compatibility indefinitely. </li>\n<li>Nice \u201cWhy switch to Python 3?\u201d section and resources</li>\n<li>Nice list of participating projects\n<ul>\n<li>Can we get some that are not data science? :)</li>\n</ul></li>\n</ul>\n\n<p><strong>Microsoft buys GitHub</strong>:</p>\n\n<ul>\n<li><a href=\"https://arstechnica.com/gadgets/2018/06/everyone-complaining-about-microsoft-buying-github-needs-to-offer-a-better-solution/?comments=1&amp;unread=1\">Everyone complaining about Microsoft buying GitHub needs to offer a better solution</a></li>\n<li><a href=\"https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/\">Microsoft to acquire GitHub for $7.5 billion</a></li>\n<li><a href=\"https://www.linuxfoundation.org/blog/microsoft-buys-github-the-linux-foundations-reaction/?SSAID=389818\">Linux Foundation: Microsoft's GitHub buy is a win for open source</a></li>\n<li>Coverage on Exponent podcast: <a href=\"https://overcast.fm/+BihnqmtgQ\">154 \u2014 Legacy Leverage</a></li>\n<li><a href=\"https://www.reddit.com/r/AMA/comments/8pc8mf/im_nat_friedman_future_ceo_of_github_ama/?utm_source=amp&amp;utm_medium=comment_list\">Nat Friedman, future CEO of GitHub, AMA</a></li>\n<li>Re gitlab:\n<ul>\n<li><a href=\"https://about.gitlab.com/2018/06/03/microsoft-acquires-github/\">GitLab congratulates GitHub and Microsoft</a></li>\n<li><a href=\"https://twitter.com/gitlab/status/1004143715844124673\">GitLab imports from GitHub going up</a></li>\n</ul></li>\n</ul>\n\n<p>Our news and extras:</p>\n\n<ul>\n<li>PyLadies Cleveland just launched:\n<ul>\n<li>First meeting June 26</li>\n<li>(FB Profile) <a href=\"https://www.facebook.com/cleveland.pyladies.3\">https://www.facebook.com/cleveland.pyladies.3</a></li>\n<li>(FB Community Page) <a href=\"https://www.facebook.com/clepyladies/\">https://www.facebook.com/clepyladies/</a></li>\n<li>(Twitter) <a href=\"https://twitter.com/CLEPyladies\">https://twitter.com/CLEPyladies</a></li>\n<li>(Meetup) <a href=\"https://www.meetup.com/CLE-PyLadies/\">https://www.meetup.com/CLE-PyLadies/</a></li>\n<li>(YouTube) <a href=\"https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw\">https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw</a></li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 15 Jun 2018 00:00:00 -0800", "published_parsed": [2018, 6, 15, 8, 0, 0, 4, 166, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Let's make a clear Python 3 statement", "itunes_episode": "82", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:25:55"}}, "#81 Making your C library callable from Python by wrapping it with Cython": {"info": {"title": "#81 Making your C library callable from Python by wrapping it with Cython", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#81 Making your C library callable from Python by wrapping it with Cython"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/81/making-your-c-library-callable-from-python-by-wrapping-it-with-cython"}, {"length": "7777512", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/81/making-your-c-library-callable-from-python-by-wrapping-it-with-cython.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/81/making-your-c-library-callable-from-python-by-wrapping-it-with-cython", "id": "https://pythonbytes.fm/episodes/dc0775d8-1146-44eb-827c-44d8ae3f6df1", "guidislink": false, "summary": "<p>Sponsored by digitalocean: <a href=\"https://pythonbytes.fm/digitalocean\">pythonbytes.fm/digitalocean</a></p>\n\n<p><strong>Brian #1: Learning about Machine Learning</strong></p>\n\n<ul>\n<li><a href=\"https://hello-tensorflow.glitch.me/\"><strong>hello tensorflow</strong></a>\n<ul>\n<li>one pager site with a demo of machine learning in action.</li>\n<li>\u201c<strong>Machine Learning (ML)</strong> is the dope new thing that everyone's talking about, because it's really good at learning from data so that it can predict similar things in the future.\u201d</li>\n<li>Includes a graphical demo of ML trying to learn the correct coefficients to a polynomial.</li>\n</ul></li>\n<li><a href=\"https://www.technotification.com/2018/04/google-free-machine-learning.html\">Google Provides Free Machine Learning Course For All</a>\n<ul>\n<li><a href=\"https://developers.google.com/machine-learning/crash-course/\">Machine Learning Crash Course</a> (MLCC) is a free 15 hours course that is divided into 25 lessons. It provides exercises, interactive visualizations, and instructional videos. These can help in learning machine learning concepts.</li>\n<li>40 exercises, 25 lessons, 15 hours, case studies, interactive visualizations</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@shamir.stav_83310/making-your-c-library-callable-from-python-by-wrapping-it-with-cython-b09db35012a3\"><strong>Making your C library callable from Python by wrapping it with Cython</strong></a></p>\n\n<ul>\n<li>Article by Stav Shamir</li>\n<li>Cython is known for its ability to increase the performance of Python code. Another useful feature of Cython is making existing C functions callable from within (seemingly) pure Python modules.</li>\n<li>Need to directly interact from Python with a small C library</li>\n</ul>\n\n<p>Want to wrap this C function?</p>\n\n<pre><code>void hello(const char *name) {\n    printf(\"hello %s\\n\", name);\n}\n</code></pre>\n\n<p>Just install Cython and write this:</p>\n\n<pre><code>cdef extern from \"examples.h\":\n    void hello(const char *name)\n\ndef py_hello(name: bytes) -&gt; None:\n    hello(name)\n</code></pre>\n\n<p>Then create a setup file (details in article), call <code>python setup.py build_ext --inplace</code> and you\u2019re good to go.</p>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.vinta.com.br/blog/2018/taming-irreversibility-feature-flags-python/\"><strong>Taming Irreversibility with Feature Flags (in Python)</strong></a></p>\n\n<ul>\n<li>\u201cFeature Flags are a very simple technique to make features of your application quickly toggleable. The way it works is, everytime we change some behavior in our software, a logical branch is created and this new behavior is only accessible if some specific configuration variable is set or, in certain cases, if the application context respects some rules.\u201d</li>\n</ul>\n\n<pre><code>    def my_function():\n        if is_feature_active('feature_one'):\n            do_something()\n        else:\n            do_something_else()\n</code></pre>\n\n<ul>\n<li>Benefits\n<ul>\n<li>Improving team\u2019s response time to bugs. If a new feature causes a bunch of customer problems, just turn it off.</li>\n<li>Making possible to sync code more frequently. Merge to master with the feature turned off.</li>\n<li>Having a more fluid feature launching flow. Turn feature on in test/staging server.</li>\n<li>Validate your features easily with A/B testing, user groups, etc.</li>\n</ul></li>\n<li>Article discusses:\n<ul>\n<li>how to implement flags cleanly.</li>\n<li>measuring success with analytics</li>\n<li>implementing flags with third party packages and recommends a few.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pypi.org/project/pretend/\"><strong>pretend: a stubbing library</strong></a></p>\n\n<ul>\n<li>Heard about this at the end of the pypi episode of Talk Python and wanted to highlight it more.</li>\n<li>Pretend is a library to make stubbing with Python easier.</li>\n<li>Stubbing is a technique for writing tests. A stub is an object that returns pre-canned responses, rather than doing any computation.</li>\n<li>Stubbing is related to mocking, but traditionally with stubs, you don\u2019t care about behavior, you are just concerned with how your system under test responds to certain input data. \n<ul>\n<li>However, pretend does include a call recorder feature.</li>\n</ul></li>\n<li>Nice clean api:</li>\n</ul>\n\n<pre><code>    &gt;&gt;&gt; from pretend import stub\n    &gt;&gt;&gt; x = stub(country_code=lambda: \"US\")\n    &gt;&gt;&gt; x.country_code()\n    'US'\n</code></pre>\n\n<pre><code>    &gt;&gt;&gt; from pretend import stub, raiser\n    &gt;&gt;&gt; x = stub(func=raiser(ValueError))\n    &gt;&gt;&gt; x.func()\n    Traceback (most recent call last):\n      File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n      File \"pretend.py\", line 74, in inner\n        raise exc\n    ValueError\n</code></pre>\n\n<p><strong>Brian #5:</strong> <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/\"><strong>The official Flask tutorial</strong></a></p>\n\n<ul>\n<li>Has been updated recently.\n<ul>\n<li>simplified, updated, including the source code for the project.</li>\n<li>tutorial includes section on testing, including testing with pytest and coverage.</li>\n</ul></li>\n<li>Flask is part of <a href=\"https://www.palletsprojects.com/\">Pallets</a>, which develops and maintains several projects\n<ul>\n<li><a href=\"https://www.palletsprojects.com/p/click/\">Click</a> \u2014 A package for creating beautiful command line interfaces in a composable way</li>\n<li><a href=\"https://www.palletsprojects.com/p/flask/\">Flask</a> \u2014 a flexible and popular web development framework</li>\n<li><a href=\"https://www.palletsprojects.com/p/itsdangerous/\">ItsDangerous</a> \u2014 cryptographically sign your data and hand it over to someone else</li>\n<li><a href=\"https://www.palletsprojects.com/p/jinja/\">Jinja</a> \u2014 a full featured template engine for Python</li>\n<li><a href=\"https://www.palletsprojects.com/p/markupsafe/\">MarkupSafe</a> \u2014 a HTML-Markup safe string for Python</li>\n<li><a href=\"https://www.palletsprojects.com/p/werkzeug/\">Werkzeug</a> \u2014 a WSGI utility library for Python</li>\n</ul></li>\n<li>You can now donate to pallets to help with the maintenance costs of these important packages.\n<ul>\n<li>There\u2019s a donate button on the pallets site that takes you to a PSF page. Therefore, donations are deductible in the US.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://opensource.com/article/18/4/introduction-python-bytecode\"><strong>An introduction to Python bytecode</strong></a></p>\n\n<ul>\n<li>Python is compiled</li>\n<li>Learn what Python bytecode is, how Python uses it to execute your code, and how knowing what it does can help you.</li>\n<li>Python is often described as an interpreted language\u2014one in which your source code is translated into native CPU instructions as the program runs\u2014but this is only partially correct. Python, like many interpreted languages, actually compiles source code to a set of instructions for a virtual machine, and the Python interpreter is an implementation of that virtual machine. This intermediate format is called \"bytecode.\"</li>\n<li>These are your .PYC files</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>def hello()\n    print(\"Hello, World!\")\n\n\n2           0 LOAD_GLOBAL              0 (print)\n            2 LOAD_CONST               1 ('Hello, World!')\n            4 CALL_FUNCTION            1\n</code></pre>\n\n<ul>\n<li>CPython uses a stack-based virtual machine. That is, it's oriented entirely around stack data structures (where you can \"push\" an item onto the \"top\" of the structure, or \"pop\" an item off the \"top\").</li>\n</ul>\n\n<p>View and explore using</p>\n\n<pre><code>import dis\ndis.dis(hello)\n</code></pre>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by digitalocean: <a href=\"https://pythonbytes.fm/digitalocean\">pythonbytes.fm/digitalocean</a></p>\n\n<p><strong>Brian #1: Learning about Machine Learning</strong></p>\n\n<ul>\n<li><a href=\"https://hello-tensorflow.glitch.me/\"><strong>hello tensorflow</strong></a>\n<ul>\n<li>one pager site with a demo of machine learning in action.</li>\n<li>\u201c<strong>Machine Learning (ML)</strong> is the dope new thing that everyone's talking about, because it's really good at learning from data so that it can predict similar things in the future.\u201d</li>\n<li>Includes a graphical demo of ML trying to learn the correct coefficients to a polynomial.</li>\n</ul></li>\n<li><a href=\"https://www.technotification.com/2018/04/google-free-machine-learning.html\">Google Provides Free Machine Learning Course For All</a>\n<ul>\n<li><a href=\"https://developers.google.com/machine-learning/crash-course/\">Machine Learning Crash Course</a> (MLCC) is a free 15 hours course that is divided into 25 lessons. It provides exercises, interactive visualizations, and instructional videos. These can help in learning machine learning concepts.</li>\n<li>40 exercises, 25 lessons, 15 hours, case studies, interactive visualizations</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@shamir.stav_83310/making-your-c-library-callable-from-python-by-wrapping-it-with-cython-b09db35012a3\"><strong>Making your C library callable from Python by wrapping it with Cython</strong></a></p>\n\n<ul>\n<li>Article by Stav Shamir</li>\n<li>Cython is known for its ability to increase the performance of Python code. Another useful feature of Cython is making existing C functions callable from within (seemingly) pure Python modules.</li>\n<li>Need to directly interact from Python with a small C library</li>\n</ul>\n\n<p>Want to wrap this C function?</p>\n\n<pre><code>void hello(const char *name) {\n    printf(\"hello %s\\n\", name);\n}\n</code></pre>\n\n<p>Just install Cython and write this:</p>\n\n<pre><code>cdef extern from \"examples.h\":\n    void hello(const char *name)\n\ndef py_hello(name: bytes) -&gt; None:\n    hello(name)\n</code></pre>\n\n<p>Then create a setup file (details in article), call <code>python setup.py build_ext --inplace</code> and you\u2019re good to go.</p>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.vinta.com.br/blog/2018/taming-irreversibility-feature-flags-python/\"><strong>Taming Irreversibility with Feature Flags (in Python)</strong></a></p>\n\n<ul>\n<li>\u201cFeature Flags are a very simple technique to make features of your application quickly toggleable. The way it works is, everytime we change some behavior in our software, a logical branch is created and this new behavior is only accessible if some specific configuration variable is set or, in certain cases, if the application context respects some rules.\u201d</li>\n</ul>\n\n<pre><code>    def my_function():\n        if is_feature_active('feature_one'):\n            do_something()\n        else:\n            do_something_else()\n</code></pre>\n\n<ul>\n<li>Benefits\n<ul>\n<li>Improving team\u2019s response time to bugs. If a new feature causes a bunch of customer problems, just turn it off.</li>\n<li>Making possible to sync code more frequently. Merge to master with the feature turned off.</li>\n<li>Having a more fluid feature launching flow. Turn feature on in test/staging server.</li>\n<li>Validate your features easily with A/B testing, user groups, etc.</li>\n</ul></li>\n<li>Article discusses:\n<ul>\n<li>how to implement flags cleanly.</li>\n<li>measuring success with analytics</li>\n<li>implementing flags with third party packages and recommends a few.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pypi.org/project/pretend/\"><strong>pretend: a stubbing library</strong></a></p>\n\n<ul>\n<li>Heard about this at the end of the pypi episode of Talk Python and wanted to highlight it more.</li>\n<li>Pretend is a library to make stubbing with Python easier.</li>\n<li>Stubbing is a technique for writing tests. A stub is an object that returns pre-canned responses, rather than doing any computation.</li>\n<li>Stubbing is related to mocking, but traditionally with stubs, you don\u2019t care about behavior, you are just concerned with how your system under test responds to certain input data. \n<ul>\n<li>However, pretend does include a call recorder feature.</li>\n</ul></li>\n<li>Nice clean api:</li>\n</ul>\n\n<pre><code>    &gt;&gt;&gt; from pretend import stub\n    &gt;&gt;&gt; x = stub(country_code=lambda: \"US\")\n    &gt;&gt;&gt; x.country_code()\n    'US'\n</code></pre>\n\n<pre><code>    &gt;&gt;&gt; from pretend import stub, raiser\n    &gt;&gt;&gt; x = stub(func=raiser(ValueError))\n    &gt;&gt;&gt; x.func()\n    Traceback (most recent call last):\n      File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n      File \"pretend.py\", line 74, in inner\n        raise exc\n    ValueError\n</code></pre>\n\n<p><strong>Brian #5:</strong> <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/\"><strong>The official Flask tutorial</strong></a></p>\n\n<ul>\n<li>Has been updated recently.\n<ul>\n<li>simplified, updated, including the source code for the project.</li>\n<li>tutorial includes section on testing, including testing with pytest and coverage.</li>\n</ul></li>\n<li>Flask is part of <a href=\"https://www.palletsprojects.com/\">Pallets</a>, which develops and maintains several projects\n<ul>\n<li><a href=\"https://www.palletsprojects.com/p/click/\">Click</a> \u2014 A package for creating beautiful command line interfaces in a composable way</li>\n<li><a href=\"https://www.palletsprojects.com/p/flask/\">Flask</a> \u2014 a flexible and popular web development framework</li>\n<li><a href=\"https://www.palletsprojects.com/p/itsdangerous/\">ItsDangerous</a> \u2014 cryptographically sign your data and hand it over to someone else</li>\n<li><a href=\"https://www.palletsprojects.com/p/jinja/\">Jinja</a> \u2014 a full featured template engine for Python</li>\n<li><a href=\"https://www.palletsprojects.com/p/markupsafe/\">MarkupSafe</a> \u2014 a HTML-Markup safe string for Python</li>\n<li><a href=\"https://www.palletsprojects.com/p/werkzeug/\">Werkzeug</a> \u2014 a WSGI utility library for Python</li>\n</ul></li>\n<li>You can now donate to pallets to help with the maintenance costs of these important packages.\n<ul>\n<li>There\u2019s a donate button on the pallets site that takes you to a PSF page. Therefore, donations are deductible in the US.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://opensource.com/article/18/4/introduction-python-bytecode\"><strong>An introduction to Python bytecode</strong></a></p>\n\n<ul>\n<li>Python is compiled</li>\n<li>Learn what Python bytecode is, how Python uses it to execute your code, and how knowing what it does can help you.</li>\n<li>Python is often described as an interpreted language\u2014one in which your source code is translated into native CPU instructions as the program runs\u2014but this is only partially correct. Python, like many interpreted languages, actually compiles source code to a set of instructions for a virtual machine, and the Python interpreter is an implementation of that virtual machine. This intermediate format is called \"bytecode.\"</li>\n<li>These are your .PYC files</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>def hello()\n    print(\"Hello, World!\")\n\n\n2           0 LOAD_GLOBAL              0 (print)\n            2 LOAD_CONST               1 ('Hello, World!')\n            4 CALL_FUNCTION            1\n</code></pre>\n\n<ul>\n<li>CPython uses a stack-based virtual machine. That is, it's oriented entirely around stack data structures (where you can \"push\" an item onto the \"top\" of the structure, or \"pop\" an item off the \"top\").</li>\n</ul>\n\n<p>View and explore using</p>\n\n<pre><code>import dis\ndis.dis(hello)\n</code></pre>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 05 Jun 2018 00:00:00 -0800", "published_parsed": [2018, 6, 5, 8, 0, 0, 1, 156, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Making your C library callable from Python by wrapping it with Cython", "itunes_episode": "81", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:17:00"}}, "#80 Dan Bader drops by and we found 30 new Python projects": {"info": {"title": "#80 Dan Bader drops by and we found 30 new Python projects", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#80 Dan Bader drops by and we found 30 new Python projects"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/80/dan-bader-drops-by-and-we-found-30-new-python-projects"}, {"length": "13595044", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/80/dan-bader-drops-by-and-we-found-30-new-python-projects.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/80/dan-bader-drops-by-and-we-found-30-new-python-projects", "id": "https://pythonbytes.fm/episodes/8b593809-b716-48c1-bcc3-afe7f9895991", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://packaging.python.org/tutorials/packaging-projects/\"><strong>Packaging Python Projects</strong></a></p>\n\n<ul>\n<li>Tutorial on the PyPA has been updated.</li>\n<li>Includes <code>README.md</code> instead of <code>REAMDE.rst</code></li>\n<li>Initial example of <code>setup.py</code> no longer too minimal or too scary.</li>\n<li>Discussion of using <code>twine</code> to upload to test.pypi.org/legacy before uploading to non-test pypi</li>\n<li><a href=\"https://pypi.org/project/flit/\">Related project, flit</a>\n<a href=\"https://pypi.org/project/flit/\"></a></li>\n</ul>\n\n<p><strong>Dan #2:</strong> <a href=\"https://gidgethub.readthedocs.io/en/latest/\">gidgethub \u2014 An async library for calling GitHub\u2019s API</a></p>\n\n<ul>\n<li>Talk to GitHub API to add/modify issues, pull-requests, comments, \u2026</li>\n<li>Also helpers to parse GitHub\u2019s webhook events so you can write bots that react to new issues, comments, commits etc.</li>\n<li>Used it in @Mariatta\u2019s GitHub Bot tutorial:<a href=\"https://github.com/Mariatta/github-bot-tutorial\">https://github.com/Mariatta/github-bot-tutorial</a></li>\n<li>Cool architecture for a \u201cmodern\u201d Python web API library (async, sansio, decorator based event callbacks)\n<ul>\n<li>supports different async backends: aiohttp, treq, Tornado\n<ul>\n<li>sans-I/O: \u201cprotocol implementations written in Python that perform <strong>no</strong> I/O (this means libraries that operate directly on text or bytes)\u201d</li>\n<li>Why? \u2192 \u201c<em>reusability</em>. By implementing network protocols without any I/O and instead operating on bytes or text alone, libraries allow for reuse by other code regardless of their I/O decisions. In other words by leaving I/O out of the picture a network protocol library allows itself to be used by both synchronous and asynchronous I/O code\u201d</li>\n</ul></li>\n</ul></li>\n<li>(Biggest issue in that workshop was getting everyone upgraded to Python 3.6\u2026but more on that later)</li>\n</ul>\n\n<p><strong>Michael #3:</strong> <a href=\"https://github.com/aleivag/pystemd\"><strong>pystemd</strong></a></p>\n\n<ul>\n<li>Recall I recently build a Python-based systemd service for geo syncing my course materials</li>\n<li>A thin Cython-based wrapper on top of libsystemd, focused on exposing the dbus API via sd-bus in an automated and easy to consume way.</li>\n<li>By Alvaro Leiva, a production engineer at Facebook / Instagram</li>\n<li><a href=\"https://www.youtube.com/watch?v=ZUX9Fx8Rwzg\">Presented at PyCon 2018</a></li>\n<li>Systemd:\n<ul>\n<li>Manages your services and their lifetimes</li>\n<li>e.g. I want my web app to start on boot but only after mongodb has started</li>\n</ul></li>\n<li><a href=\"https://github.com/facebookincubator/pystemd\">pysystemd</a> lets you control and query these from a Python API</li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://blog.jetbrains.com/pycharm/2018/05/pycharm-2018-2-eap-1/\"><strong>PyCharm 2018.2 EAP 1 includes improved pytest support</strong></a></p>\n\n<ul>\n<li>From <a href=\"https://twitter.com/nicoddemus/status/999424505171849221\">Bruno Oliveira</a>\n<ul>\n<li>\u201cOh my, full support for <a href=\"https://twitter.com/hashtag/pytest?src=hash\">#</a><a href=\"https://twitter.com/hashtag/pytest?src=hash\">pytest</a> fixtures and parameterized tests coming in <a href=\"https://twitter.com/pycharm\">@</a><a href=\"https://twitter.com/pycharm\">pycharm</a> 2018.2.\u201c</li>\n</ul></li>\n<li>\u201cPyCharm 2018.2 supports <a href=\"https://docs.pytest.org/en/latest/fixture.html\">using fixtures in Pytest</a>. Using fixtures allows you to separate your setup code from the actual tests, making for more concise, and more readable tests. Additionally, there have been improvements to code navigation and refactoring Pytest tests, and to using parameterized tests.\u201d</li>\n<li>It\u2019s hard for me to fully express how FREAKING EXCITED I am about this.</li>\n<li>auto-complete now works with fixtures to test functions</li>\n<li>goto declaration now works with fixtures to test functions\n<ul>\n<li>(not fixtures of fixtures, but they know about that already)</li>\n</ul></li>\n<li>re-running a failed parametrization works (yay!)</li>\n<li>re-running a single parametrization works (yay!)</li>\n</ul>\n\n<p><strong>Dan #5:</strong></p>\n\n<ul>\n<li>Why is installing Python 3.6 so hard? (Recent GitHub Bot workshop experience)</li>\n<li>Sometimes hard to tell what\u2019s easy/difficult for beginners</li>\n<li>People hit crazy edge cases:\n<ul>\n<li>running Linux Subsystem for Windows (WSL) on Windows host, install Python into wrong environment</li>\n<li>broken PPAs + bad StackOverflow advice \u2192 broken SSL and no pip on Ubuntu (deadsnakes PPA is the way to go)</li>\n<li>People install multiple Python environments: Anaconda + python.org distribution</li>\n<li>Hard to find instructions for compiling from source on Linux</li>\n</ul></li>\n<li>Shameless plug: <a href=\"https://realpython.com/installing-python/\"><strong>realpython.com/installing-python</strong></a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.mybridge.co/30-amazing-python-projects-for-the-past-year-v-2018-9c310b04cdb3\"><strong>30 amazing Python projects (2018 edition)</strong></a>\n<a href=\"https://realpython.com/installing-python/\"></a></p>\n\n<ul>\n<li>Mybridge AI evaluates the quality by considering popularity, engagement and recency. To give you an idea about the quality, the average number of Github stars is 3,707.</li>\n<li><a href=\"https://github.com/WZBSocialScienceCenter/pdftabextract?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 30</strong></a><strong>:</strong> PDFTabExtract: A set of tools for extracting tables from PDF files helping to do data mining on scanned documents. </li>\n<li><a href=\"https://github.com/NicolasHug/Surprise?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 28</strong></a><strong>:</strong> Surprise v1.0: A Python scikit for building and analyzing recommender systems </li>\n<li><a href=\"https://github.com/ChrisKnott/Eel?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 27</strong></a><strong>:</strong> Eel: A little Python library for making simple Electron-like HTML/JS GUI apps </li>\n<li><a href=\"https://github.com/anfederico/Clairvoyant?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 25</strong></a><strong>:</strong> Clairvoyant: A Python program that identifies and monitors historical cues for short term stock movement \u2014 Have you seen <a href=\"https://www.youtube.com/watch?v=kFQJNeQDDHA\">The Wall Street Code - VPRO documentary</a>?</li>\n<li><a href=\"https://github.com/Manisso/fsociety?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 21</strong></a><strong>:</strong> Fsociety: Hacking Tools Pack. A Penetration Testing Framework.</li>\n<li><a href=\"https://github.com/kennethreitz/maya?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 18</strong></a><strong>:</strong> Maya: Datetime for Humans in Python</li>\n<li><a href=\"https://github.com/Qix-/better-exceptions?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 16</strong></a><strong>:</strong> Better-exceptions: Pretty and useful exceptions in Python, automatically </li>\n<li><a href=\"https://github.com/tomchristie/apistar?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 13</strong></a><strong>:</strong> Apistar: A fast and expressive API framework. For Python</li>\n<li><a href=\"https://github.com/micropython/micropython?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 8</strong></a><strong>:</strong> MicroPython: A lean and efficient Python implementation for microcontrollers and constrained systems</li>\n<li><a href=\"https://github.com/explosion/spaCy?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 6</strong></a><strong>:</strong> spaCy (v2.0): Industrial-strength Natural Language Processing (NLP) with Python and Cython</li>\n<li><a href=\"https://github.com/pytorch/pytorch?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 2</strong></a><strong>:</strong> Pytorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration</li>\n<li><a href=\"https://github.com/home-assistant/home-assistant?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 1</strong></a><strong>:</strong> Home-assistant (v0.6+): Open-source home automation platform running on Python 3</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Michael: Notable mention Cris\u2019s GDPR writeup: <a href=\"http://tryexceptpass.org/article/gdpr/\">http://tryexceptpass.org/article/gdpr/</a> </li>\n<li>Did you know about dropbox smart sync? <a href=\"https://www.dropbox.com/smartsync\">https://www.dropbox.com/smartsync</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://packaging.python.org/tutorials/packaging-projects/\"><strong>Packaging Python Projects</strong></a></p>\n\n<ul>\n<li>Tutorial on the PyPA has been updated.</li>\n<li>Includes <code>README.md</code> instead of <code>REAMDE.rst</code></li>\n<li>Initial example of <code>setup.py</code> no longer too minimal or too scary.</li>\n<li>Discussion of using <code>twine</code> to upload to test.pypi.org/legacy before uploading to non-test pypi</li>\n<li><a href=\"https://pypi.org/project/flit/\">Related project, flit</a>\n<a href=\"https://pypi.org/project/flit/\"></a></li>\n</ul>\n\n<p><strong>Dan #2:</strong> <a href=\"https://gidgethub.readthedocs.io/en/latest/\">gidgethub \u2014 An async library for calling GitHub\u2019s API</a></p>\n\n<ul>\n<li>Talk to GitHub API to add/modify issues, pull-requests, comments, \u2026</li>\n<li>Also helpers to parse GitHub\u2019s webhook events so you can write bots that react to new issues, comments, commits etc.</li>\n<li>Used it in @Mariatta\u2019s GitHub Bot tutorial:<a href=\"https://github.com/Mariatta/github-bot-tutorial\">https://github.com/Mariatta/github-bot-tutorial</a></li>\n<li>Cool architecture for a \u201cmodern\u201d Python web API library (async, sansio, decorator based event callbacks)\n<ul>\n<li>supports different async backends: aiohttp, treq, Tornado\n<ul>\n<li>sans-I/O: \u201cprotocol implementations written in Python that perform <strong>no</strong> I/O (this means libraries that operate directly on text or bytes)\u201d</li>\n<li>Why? \u2192 \u201c<em>reusability</em>. By implementing network protocols without any I/O and instead operating on bytes or text alone, libraries allow for reuse by other code regardless of their I/O decisions. In other words by leaving I/O out of the picture a network protocol library allows itself to be used by both synchronous and asynchronous I/O code\u201d</li>\n</ul></li>\n</ul></li>\n<li>(Biggest issue in that workshop was getting everyone upgraded to Python 3.6\u2026but more on that later)</li>\n</ul>\n\n<p><strong>Michael #3:</strong> <a href=\"https://github.com/aleivag/pystemd\"><strong>pystemd</strong></a></p>\n\n<ul>\n<li>Recall I recently build a Python-based systemd service for geo syncing my course materials</li>\n<li>A thin Cython-based wrapper on top of libsystemd, focused on exposing the dbus API via sd-bus in an automated and easy to consume way.</li>\n<li>By Alvaro Leiva, a production engineer at Facebook / Instagram</li>\n<li><a href=\"https://www.youtube.com/watch?v=ZUX9Fx8Rwzg\">Presented at PyCon 2018</a></li>\n<li>Systemd:\n<ul>\n<li>Manages your services and their lifetimes</li>\n<li>e.g. I want my web app to start on boot but only after mongodb has started</li>\n</ul></li>\n<li><a href=\"https://github.com/facebookincubator/pystemd\">pysystemd</a> lets you control and query these from a Python API</li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://blog.jetbrains.com/pycharm/2018/05/pycharm-2018-2-eap-1/\"><strong>PyCharm 2018.2 EAP 1 includes improved pytest support</strong></a></p>\n\n<ul>\n<li>From <a href=\"https://twitter.com/nicoddemus/status/999424505171849221\">Bruno Oliveira</a>\n<ul>\n<li>\u201cOh my, full support for <a href=\"https://twitter.com/hashtag/pytest?src=hash\">#</a><a href=\"https://twitter.com/hashtag/pytest?src=hash\">pytest</a> fixtures and parameterized tests coming in <a href=\"https://twitter.com/pycharm\">@</a><a href=\"https://twitter.com/pycharm\">pycharm</a> 2018.2.\u201c</li>\n</ul></li>\n<li>\u201cPyCharm 2018.2 supports <a href=\"https://docs.pytest.org/en/latest/fixture.html\">using fixtures in Pytest</a>. Using fixtures allows you to separate your setup code from the actual tests, making for more concise, and more readable tests. Additionally, there have been improvements to code navigation and refactoring Pytest tests, and to using parameterized tests.\u201d</li>\n<li>It\u2019s hard for me to fully express how FREAKING EXCITED I am about this.</li>\n<li>auto-complete now works with fixtures to test functions</li>\n<li>goto declaration now works with fixtures to test functions\n<ul>\n<li>(not fixtures of fixtures, but they know about that already)</li>\n</ul></li>\n<li>re-running a failed parametrization works (yay!)</li>\n<li>re-running a single parametrization works (yay!)</li>\n</ul>\n\n<p><strong>Dan #5:</strong></p>\n\n<ul>\n<li>Why is installing Python 3.6 so hard? (Recent GitHub Bot workshop experience)</li>\n<li>Sometimes hard to tell what\u2019s easy/difficult for beginners</li>\n<li>People hit crazy edge cases:\n<ul>\n<li>running Linux Subsystem for Windows (WSL) on Windows host, install Python into wrong environment</li>\n<li>broken PPAs + bad StackOverflow advice \u2192 broken SSL and no pip on Ubuntu (deadsnakes PPA is the way to go)</li>\n<li>People install multiple Python environments: Anaconda + python.org distribution</li>\n<li>Hard to find instructions for compiling from source on Linux</li>\n</ul></li>\n<li>Shameless plug: <a href=\"https://realpython.com/installing-python/\"><strong>realpython.com/installing-python</strong></a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.mybridge.co/30-amazing-python-projects-for-the-past-year-v-2018-9c310b04cdb3\"><strong>30 amazing Python projects (2018 edition)</strong></a>\n<a href=\"https://realpython.com/installing-python/\"></a></p>\n\n<ul>\n<li>Mybridge AI evaluates the quality by considering popularity, engagement and recency. To give you an idea about the quality, the average number of Github stars is 3,707.</li>\n<li><a href=\"https://github.com/WZBSocialScienceCenter/pdftabextract?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 30</strong></a><strong>:</strong> PDFTabExtract: A set of tools for extracting tables from PDF files helping to do data mining on scanned documents. </li>\n<li><a href=\"https://github.com/NicolasHug/Surprise?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 28</strong></a><strong>:</strong> Surprise v1.0: A Python scikit for building and analyzing recommender systems </li>\n<li><a href=\"https://github.com/ChrisKnott/Eel?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 27</strong></a><strong>:</strong> Eel: A little Python library for making simple Electron-like HTML/JS GUI apps </li>\n<li><a href=\"https://github.com/anfederico/Clairvoyant?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 25</strong></a><strong>:</strong> Clairvoyant: A Python program that identifies and monitors historical cues for short term stock movement \u2014 Have you seen <a href=\"https://www.youtube.com/watch?v=kFQJNeQDDHA\">The Wall Street Code - VPRO documentary</a>?</li>\n<li><a href=\"https://github.com/Manisso/fsociety?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 21</strong></a><strong>:</strong> Fsociety: Hacking Tools Pack. A Penetration Testing Framework.</li>\n<li><a href=\"https://github.com/kennethreitz/maya?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 18</strong></a><strong>:</strong> Maya: Datetime for Humans in Python</li>\n<li><a href=\"https://github.com/Qix-/better-exceptions?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 16</strong></a><strong>:</strong> Better-exceptions: Pretty and useful exceptions in Python, automatically </li>\n<li><a href=\"https://github.com/tomchristie/apistar?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 13</strong></a><strong>:</strong> Apistar: A fast and expressive API framework. For Python</li>\n<li><a href=\"https://github.com/micropython/micropython?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 8</strong></a><strong>:</strong> MicroPython: A lean and efficient Python implementation for microcontrollers and constrained systems</li>\n<li><a href=\"https://github.com/explosion/spaCy?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 6</strong></a><strong>:</strong> spaCy (v2.0): Industrial-strength Natural Language Processing (NLP) with Python and Cython</li>\n<li><a href=\"https://github.com/pytorch/pytorch?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 2</strong></a><strong>:</strong> Pytorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration</li>\n<li><a href=\"https://github.com/home-assistant/home-assistant?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more\"><strong>No 1</strong></a><strong>:</strong> Home-assistant (v0.6+): Open-source home automation platform running on Python 3</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Michael: Notable mention Cris\u2019s GDPR writeup: <a href=\"http://tryexceptpass.org/article/gdpr/\">http://tryexceptpass.org/article/gdpr/</a> </li>\n<li>Did you know about dropbox smart sync? <a href=\"https://www.dropbox.com/smartsync\">https://www.dropbox.com/smartsync</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 29 May 2018 00:00:00 -0800", "published_parsed": [2018, 5, 29, 8, 0, 0, 1, 149, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Dan Bader drops by and we found 30 new Python projects", "itunes_episode": "80", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:30:45"}}, "#79 15 Tips to Enhance your Github Flow": {"info": {"title": "#79 15 Tips to Enhance your Github Flow", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#79 15 Tips to Enhance your Github Flow"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/79/15-tips-to-enhance-your-github-flow"}, {"length": "12310879", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/79/15-tips-to-enhance-your-github-flow.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/79/15-tips-to-enhance-your-github-flow", "id": "https://pythonbytes.fm/episodes/405419b6-7f31-4aa4-aa23-b79a8e7a74bf", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23\"><strong>pytest 3.6.0</strong></a></p>\n\n<ul>\n<li>Revamp the internals of the <code>pytest.mark</code> implementation with correct per node handling which fixes a number of long standing bugs caused by the old design. This introduces new <code>Node.iter_markers(name)</code> and <code>Node.get_closest_mark(name)</code> APIs. \n    - Depricating <code>Node.get_marker(name)</code>. \n    - <a href=\"https://docs.pytest.org/en/latest/mark.html#marker-revamp-and-iteration\">reasons for the revamp</a>\n    - <a href=\"https://docs.pytest.org/en/latest/mark.html#updating-code\">updating existing code to use the new APIs</a>\n    - Now when <code>@pytest.fixture</code> is applied more than once to the same function a <code>ValueError</code> is raised. This buggy behavior would cause surprising problems and if was working for a test suite it was mostly by accident.</li>\n<li>Support for Python 3.7\u2019s builtin <code>breakpoint()</code> method, \n    - see <a href=\"https://docs.pytest.org/en/latest/usage.html#breakpoint-builtin\">Using the builtin breakpoint function</a> for details.\n    - Provided by friend of the show Anthony Shaw</li>\n<li><code>monkeypatch</code> now supports a <code>context()</code> function which acts as a context manager which undoes all patching done within the <code>with</code> block.</li>\n<li>whitespace only diffs in failed assertions include escaped characters to be easier to read.</li>\n<li>plus more\u2026 see <a href=\"https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23\">changelog</a></li>\n</ul>\n\n<p><strong>Michael #2: Hello</strong> <a href=\"https://blog.qt.io/blog/2018/05/04/hello-qt-for-python/\"><strong>Qt for Python</strong></a></p>\n\n<ul>\n<li>The first Qt for Python technology preview release is almost here, and for this reason we want to give a brief example on how it will open the doors to the Python world.</li>\n<li>The real question is: how to access the methods of a Qt class? To simplify the process, we kept Qt APIs. (basically change -> to . in the API)</li>\n<li>Can it be more pythonic? \u201cWe want to include more Python flavor features to Qt for Python in the near future, but at the moment we are focusing on the TP.\u201d</li>\n<li>The wheels situation: we are planning a set of wheels for Linux, macOS and Windows for 64bit and a 32bit version only for windows. </li>\n<li>AFAIK, this is Pyside2 reborn</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://groups.google.com/forum/m/#!msg/mongodb-user/UWIPZEAKYiw/C5twgBwrCwAJ\"><strong>MongoDB 4.0.0-rc0 available</strong></a></p>\n\n<ul>\n<li>MongoDB 4.0.0-rc0, the first release candidate of MongoDB 4.0, is out and is ready for testing. \n<ul>\n<li>Multi-document ACID transactions</li>\n<li>Non-Blocking Secondary Reads</li>\n<li>lots of other goodies, see <a href=\"http://MongoDB 4.0.0-rc0, the first release candidate of MongoDB 4.0, is out and is ready for testing.\">announcement</a></li>\n<li>Did we mention <a href=\"https://www.mongodb.com/transactions\">Transactions</a>!</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.com/@DJetelina/pipenv-review-after-using-in-production-a05e7176f3f0\"><strong>Pipenv review, after using it in production</strong></a></p>\n\n<ul>\n<li>Nice summary:\n\u201cThe current state of python\u2019s packaging is awful, I don\u2019t think there\u2019s anyone who could disagree with that. This problem is recognized and there are many attempts at trying to solve the mess. Pipenv was the first and it has gained a lot of traction, however it doesn\u2019t sit well with everyone. And it\u2019s also not suited for every project\u200a\u2014\u200alike libraries.\u201d</li>\n<li>The multiple environment problem:\nThe tl;dr is\u200a\u2014\u200asupporting multiple environments goes against Pipenv\u2019s (therefore also Pipfile\u2019s) philosophy of deterministic reproducible application environments. So if you want to use Pipenvfor a library, you\u2019re out of luck. That means many projects just can not use Pipenv for their dependency managment.</li>\n<li>The good\n<ul>\n<li>Pipfile and Pipfile.lock really are superior to requirements.txt. By a ton.</li>\n<li>While I disliked it at first, having flake8 and security check builtin in a single tool is great</li>\n<li>Installing (exclusively) from a private respository works very well. Instead of replacing a dotfile somewhere in the system, specifying the repository in Pipfile is great</li>\n<li>Creating a new Pipfile is very easy</li>\n<li>No problems introducing Pipenv to it\u2019s new users</li>\n<li>No problems installing from a mixture of indexes, git repositores\u2026</li>\n<li>With --sequential it is actually deterministic, as advertised</li>\n<li>Virtualenv is much easier to get into and understand</li>\n<li>Dependencies can be installed into system (e.g. in Docker)\u200a\u2014\u200aour case.</li>\n<li>At no point did anyone in the team even mentioned getting rid of Pipenv\u200a\u2014\u200awhich is a lot better than it sounds</li>\n</ul></li>\n<li>Related:\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=GBQAKldqgZs\">PyCon 2018 talk about the history and future of Python packaging, including pipenv</a>.</li>\n<li><a href=\"https://github.com/pypa/pipenv/commit/71bf8e51300abe5c57117cc47fba1807cd4465fa#diff-88b99bb28683bd5b7e3a204826ead112\">Recent changes to the official wording around pipenv</a> (removes the statement that it\u2019s the official way of managing <strong>application</strong> dependencies)</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://hackernoon.com/15-tips-to-enhance-your-github-flow-6af7ceb0d8a3\"><strong>15 Tips to Enhance your Github Flow</strong></a></p>\n\n<ul>\n<li>using github projects to prioritize issues and track progress</li>\n<li>using tags on issues</li>\n<li>templates</li>\n<li>using hub and git-extras on command line</li>\n<li>commit message standards</li>\n<li>scoped commits</li>\n<li>style standards with pre-commit hooks</li>\n<li>automated tests and checks on pull requests</li>\n<li>protect master branch</li>\n<li>requiring code reviews</li>\n<li>squash pull requests</li>\n<li>\u2026. more great topics</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://twitter.com/randal_olson/status/985215366891646976\"><strong>Pandas goes Python 3 only</strong></a></p>\n\n<ul>\n<li>Via Randy Olseon</li>\n<li>It's official: Starting January 1, 2019, pandas will drop support for #Python 2. This includes no backports of security or bug fixes. </li>\n<li>Basically following NumPy\u2019s lead</li>\n<li>The final release before <strong>December 31, 2018</strong> will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.</li>\n<li>Starting <strong>January 1, 2019</strong>, all releases will be Python 3 only.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>It\u2019s GDPR eve, are you ready? </li>\n<li>Need a GDPR laugh? See <a href=\"https://twitter.com/nadimpatel_/status/999111866633871361\">https://twitter.com/nadimpatel_/status/999111866633871361</a></li>\n<li>XKCD Python Environments: <a href=\"https://xkcd.com/1987/\">https://xkcd.com/1987/</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"https://pythonbytes.fm/digitalocean\"><strong>pythonbytes.fm/digitalocean</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23\"><strong>pytest 3.6.0</strong></a></p>\n\n<ul>\n<li>Revamp the internals of the <code>pytest.mark</code> implementation with correct per node handling which fixes a number of long standing bugs caused by the old design. This introduces new <code>Node.iter_markers(name)</code> and <code>Node.get_closest_mark(name)</code> APIs. \n    - Depricating <code>Node.get_marker(name)</code>. \n    - <a href=\"https://docs.pytest.org/en/latest/mark.html#marker-revamp-and-iteration\">reasons for the revamp</a>\n    - <a href=\"https://docs.pytest.org/en/latest/mark.html#updating-code\">updating existing code to use the new APIs</a>\n    - Now when <code>@pytest.fixture</code> is applied more than once to the same function a <code>ValueError</code> is raised. This buggy behavior would cause surprising problems and if was working for a test suite it was mostly by accident.</li>\n<li>Support for Python 3.7\u2019s builtin <code>breakpoint()</code> method, \n    - see <a href=\"https://docs.pytest.org/en/latest/usage.html#breakpoint-builtin\">Using the builtin breakpoint function</a> for details.\n    - Provided by friend of the show Anthony Shaw</li>\n<li><code>monkeypatch</code> now supports a <code>context()</code> function which acts as a context manager which undoes all patching done within the <code>with</code> block.</li>\n<li>whitespace only diffs in failed assertions include escaped characters to be easier to read.</li>\n<li>plus more\u2026 see <a href=\"https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23\">changelog</a></li>\n</ul>\n\n<p><strong>Michael #2: Hello</strong> <a href=\"https://blog.qt.io/blog/2018/05/04/hello-qt-for-python/\"><strong>Qt for Python</strong></a></p>\n\n<ul>\n<li>The first Qt for Python technology preview release is almost here, and for this reason we want to give a brief example on how it will open the doors to the Python world.</li>\n<li>The real question is: how to access the methods of a Qt class? To simplify the process, we kept Qt APIs. (basically change -> to . in the API)</li>\n<li>Can it be more pythonic? \u201cWe want to include more Python flavor features to Qt for Python in the near future, but at the moment we are focusing on the TP.\u201d</li>\n<li>The wheels situation: we are planning a set of wheels for Linux, macOS and Windows for 64bit and a 32bit version only for windows. </li>\n<li>AFAIK, this is Pyside2 reborn</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://groups.google.com/forum/m/#!msg/mongodb-user/UWIPZEAKYiw/C5twgBwrCwAJ\"><strong>MongoDB 4.0.0-rc0 available</strong></a></p>\n\n<ul>\n<li>MongoDB 4.0.0-rc0, the first release candidate of MongoDB 4.0, is out and is ready for testing. \n<ul>\n<li>Multi-document ACID transactions</li>\n<li>Non-Blocking Secondary Reads</li>\n<li>lots of other goodies, see <a href=\"http://MongoDB 4.0.0-rc0, the first release candidate of MongoDB 4.0, is out and is ready for testing.\">announcement</a></li>\n<li>Did we mention <a href=\"https://www.mongodb.com/transactions\">Transactions</a>!</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.com/@DJetelina/pipenv-review-after-using-in-production-a05e7176f3f0\"><strong>Pipenv review, after using it in production</strong></a></p>\n\n<ul>\n<li>Nice summary:\n\u201cThe current state of python\u2019s packaging is awful, I don\u2019t think there\u2019s anyone who could disagree with that. This problem is recognized and there are many attempts at trying to solve the mess. Pipenv was the first and it has gained a lot of traction, however it doesn\u2019t sit well with everyone. And it\u2019s also not suited for every project\u200a\u2014\u200alike libraries.\u201d</li>\n<li>The multiple environment problem:\nThe tl;dr is\u200a\u2014\u200asupporting multiple environments goes against Pipenv\u2019s (therefore also Pipfile\u2019s) philosophy of deterministic reproducible application environments. So if you want to use Pipenvfor a library, you\u2019re out of luck. That means many projects just can not use Pipenv for their dependency managment.</li>\n<li>The good\n<ul>\n<li>Pipfile and Pipfile.lock really are superior to requirements.txt. By a ton.</li>\n<li>While I disliked it at first, having flake8 and security check builtin in a single tool is great</li>\n<li>Installing (exclusively) from a private respository works very well. Instead of replacing a dotfile somewhere in the system, specifying the repository in Pipfile is great</li>\n<li>Creating a new Pipfile is very easy</li>\n<li>No problems introducing Pipenv to it\u2019s new users</li>\n<li>No problems installing from a mixture of indexes, git repositores\u2026</li>\n<li>With --sequential it is actually deterministic, as advertised</li>\n<li>Virtualenv is much easier to get into and understand</li>\n<li>Dependencies can be installed into system (e.g. in Docker)\u200a\u2014\u200aour case.</li>\n<li>At no point did anyone in the team even mentioned getting rid of Pipenv\u200a\u2014\u200awhich is a lot better than it sounds</li>\n</ul></li>\n<li>Related:\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=GBQAKldqgZs\">PyCon 2018 talk about the history and future of Python packaging, including pipenv</a>.</li>\n<li><a href=\"https://github.com/pypa/pipenv/commit/71bf8e51300abe5c57117cc47fba1807cd4465fa#diff-88b99bb28683bd5b7e3a204826ead112\">Recent changes to the official wording around pipenv</a> (removes the statement that it\u2019s the official way of managing <strong>application</strong> dependencies)</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://hackernoon.com/15-tips-to-enhance-your-github-flow-6af7ceb0d8a3\"><strong>15 Tips to Enhance your Github Flow</strong></a></p>\n\n<ul>\n<li>using github projects to prioritize issues and track progress</li>\n<li>using tags on issues</li>\n<li>templates</li>\n<li>using hub and git-extras on command line</li>\n<li>commit message standards</li>\n<li>scoped commits</li>\n<li>style standards with pre-commit hooks</li>\n<li>automated tests and checks on pull requests</li>\n<li>protect master branch</li>\n<li>requiring code reviews</li>\n<li>squash pull requests</li>\n<li>\u2026. more great topics</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://twitter.com/randal_olson/status/985215366891646976\"><strong>Pandas goes Python 3 only</strong></a></p>\n\n<ul>\n<li>Via Randy Olseon</li>\n<li>It's official: Starting January 1, 2019, pandas will drop support for #Python 2. This includes no backports of security or bug fixes. </li>\n<li>Basically following NumPy\u2019s lead</li>\n<li>The final release before <strong>December 31, 2018</strong> will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.</li>\n<li>Starting <strong>January 1, 2019</strong>, all releases will be Python 3 only.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>It\u2019s GDPR eve, are you ready? </li>\n<li>Need a GDPR laugh? See <a href=\"https://twitter.com/nadimpatel_/status/999111866633871361\">https://twitter.com/nadimpatel_/status/999111866633871361</a></li>\n<li>XKCD Python Environments: <a href=\"https://xkcd.com/1987/\">https://xkcd.com/1987/</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 25 May 2018 00:00:00 -0800", "published_parsed": [2018, 5, 25, 8, 0, 0, 4, 145, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "15 Tips to Enhance your Github Flow", "itunes_episode": "79", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:27:31"}}, "#78 Setting Expectations for Open Source Participation": {"info": {"title": "#78 Setting Expectations for Open Source Participation", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#78 Setting Expectations for Open Source Participation"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/78/setting-expectations-for-open-source-participation"}, {"length": "12844735", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/78/setting-expectations-for-open-source-participation.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/78/setting-expectations-for-open-source-participation", "id": "https://pythonbytes.fm/episodes/81bee509-0f75-4224-a039-4daf5f083992", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\">https://pythonbytes.fm/datadog</a> \nSpecial guest: Kojo Idrissa -- <a href=\"https://twitter.com/Transition\">https://twitter.com/Transition</a></p>\n\n<p>Brian #1: <a href=\"https://medium.com/@s16h/the-forgotten-optional-else-in-python-loops-90d9c465c830\"><strong>The Forgotten Optional &lt;code&gt;else&lt;/code&gt; in Python Loops</strong></a></p>\n\n<ul>\n<li>\u201cBoth for and while loops in Python also take an optional else suite (like the if statement and the try statement do), which executes if the loop iteration completes normally. In other words, the else suite will be executed if we don\u2019t exit the loop in any way other than its natural way. So, no break statements, no return statement, or no exceptions being raised inside the loop.\u201d</li>\n<li>Why? So you don\u2019t have to invent a flag to indicate something wasn\u2019t found if you are using the loop to search for something. </li>\n</ul>\n\n<p>Kojo #2: <a href=\"https://libraries.io/\">libraries.io</a></p>\n\n<ul>\n<li><a href=\"https://libraries.io/\">https://libraries.io/</a>\n<ul>\n<li>Find out what your dependencies are!</li>\n<li>Look into <a href=\"https://tidelift.com/\">https://tidelift.com/</a></li>\n</ul></li>\n</ul>\n\n<p>Michael #3: <a href=\"https://medium.com/@shamir.stav_83310/the-other-great-benefit-of-python-type-annotations-896c7d077c6b\">The other (great) benefit of Python type annotations</a></p>\n\n<ul>\n<li>We've had type annotations for awhile</li>\n<li>When and why is sometimes unclear\n<ul>\n<li>Lack of types an issue sometimes, especially annoying while learning new APIs or diving into a new large codebase, and made me completely reliant on documentation.</li>\n<li>Optional:\n<ul>\n<li>You can\u2019t break the code by adding them</li>\n<li>They have no effect performance-wise</li>\n<li>You may add them only where you see fit</li>\n</ul></li>\n</ul></li>\n<li>Straightforward benefits\n<ul>\n<li>Employ static code analysis to catch type errors prior to runtime</li>\n<li>Cleaner code/the code is self-documenting: \u201cdon\u2019t use a comment when you can use a function or a variable\u201d, we can now say \u201cdon\u2019t use comments to specify a type, when you can use type annotation\u201d</li>\n</ul></li>\n<li>The other benefit (it's massive!): Code completion</li>\n</ul>\n\n<p>Brian #4: <a href=\"https://www.youtube.com/watch?v=tzFWz5fiVKU&amp;feature=youtu.be&amp;t=48m55s\"><strong>Setting Expectations for Open Source Participation</strong></a></p>\n\n<ul>\n<li>Or <strong>Pay for Open Source with Kindness</strong></li>\n<li>Brett Cannon\u2019s morning talk this last Sunday at PyCon 2018</li>\n<li>This talk (or a variation of it and it\u2019s content) is essential material for anyone working with open source.</li>\n<li>Everything in open source has a cost whether it\u2019s time, effort, or emotional output.</li>\n<li>Open source should be a series of unsolicited kindnesses.</li>\n<li>Be open, considerate, and respectful</li>\n<li>Remember most of this runs on volunteer time and that people have lives.</li>\n<li>Guidelines for communicating online:\n<ul>\n<li>Assume you are asking for a favor.</li>\n<li>Assume your boss will read what you say.</li>\n<li>Assume your family will read what you say.</li>\n</ul></li>\n</ul>\n\n<p>Kojo #5:</p>\n\n<ul>\n<li>Python Community Events\n<ul>\n<li>Michael and I (along with Trey Hunner) helped lead a New Attendee Orientation</li>\n<li>Join your local Python community</li>\n<li>Be kind to your fellow Pythonistas</li>\n</ul></li>\n</ul>\n\n<p>Michael #6: <a href=\"https://ngrok.com/\">ngrok</a></p>\n\n<ul>\n<li>ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.</li>\n<li>Public URLs for testing on mobile devices, testing your chatbot, SSH access to your Raspberry Pi, sharing your local dev work on full stack web apps.</li>\n<li>Just a commandline away</li>\n<li>My use case: Course app development</li>\n<li>Features:\n<ul>\n<li>Secure Tunnels</li>\n<li>Request Inspection</li>\n<li>Fast (HTTP 2)</li>\n</ul></li>\n</ul>\n\n<p>Extras and our news:</p>\n\n<p>Michael:</p>\n\n<ul>\n<li>Live recording video is out: <a href=\"https://youtu.be/s9uUSQvrIaE\">https://youtu.be/s9uUSQvrIaE</a></li>\n<li>Now up to 8 video servers around the world, Japan, Sao Paulo, and Mumbai are the latest. Based on the systemd thing we discussed way back when (<a href=\"https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future\">episode 54</a>)</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\">https://pythonbytes.fm/datadog</a> \nSpecial guest: Kojo Idrissa -- <a href=\"https://twitter.com/Transition\">https://twitter.com/Transition</a></p>\n\n<p>Brian #1: <a href=\"https://medium.com/@s16h/the-forgotten-optional-else-in-python-loops-90d9c465c830\"><strong>The Forgotten Optional &lt;code&gt;else&lt;/code&gt; in Python Loops</strong></a></p>\n\n<ul>\n<li>\u201cBoth for and while loops in Python also take an optional else suite (like the if statement and the try statement do), which executes if the loop iteration completes normally. In other words, the else suite will be executed if we don\u2019t exit the loop in any way other than its natural way. So, no break statements, no return statement, or no exceptions being raised inside the loop.\u201d</li>\n<li>Why? So you don\u2019t have to invent a flag to indicate something wasn\u2019t found if you are using the loop to search for something. </li>\n</ul>\n\n<p>Kojo #2: <a href=\"https://libraries.io/\">libraries.io</a></p>\n\n<ul>\n<li><a href=\"https://libraries.io/\">https://libraries.io/</a>\n<ul>\n<li>Find out what your dependencies are!</li>\n<li>Look into <a href=\"https://tidelift.com/\">https://tidelift.com/</a></li>\n</ul></li>\n</ul>\n\n<p>Michael #3: <a href=\"https://medium.com/@shamir.stav_83310/the-other-great-benefit-of-python-type-annotations-896c7d077c6b\">The other (great) benefit of Python type annotations</a></p>\n\n<ul>\n<li>We've had type annotations for awhile</li>\n<li>When and why is sometimes unclear\n<ul>\n<li>Lack of types an issue sometimes, especially annoying while learning new APIs or diving into a new large codebase, and made me completely reliant on documentation.</li>\n<li>Optional:\n<ul>\n<li>You can\u2019t break the code by adding them</li>\n<li>They have no effect performance-wise</li>\n<li>You may add them only where you see fit</li>\n</ul></li>\n</ul></li>\n<li>Straightforward benefits\n<ul>\n<li>Employ static code analysis to catch type errors prior to runtime</li>\n<li>Cleaner code/the code is self-documenting: \u201cdon\u2019t use a comment when you can use a function or a variable\u201d, we can now say \u201cdon\u2019t use comments to specify a type, when you can use type annotation\u201d</li>\n</ul></li>\n<li>The other benefit (it's massive!): Code completion</li>\n</ul>\n\n<p>Brian #4: <a href=\"https://www.youtube.com/watch?v=tzFWz5fiVKU&amp;feature=youtu.be&amp;t=48m55s\"><strong>Setting Expectations for Open Source Participation</strong></a></p>\n\n<ul>\n<li>Or <strong>Pay for Open Source with Kindness</strong></li>\n<li>Brett Cannon\u2019s morning talk this last Sunday at PyCon 2018</li>\n<li>This talk (or a variation of it and it\u2019s content) is essential material for anyone working with open source.</li>\n<li>Everything in open source has a cost whether it\u2019s time, effort, or emotional output.</li>\n<li>Open source should be a series of unsolicited kindnesses.</li>\n<li>Be open, considerate, and respectful</li>\n<li>Remember most of this runs on volunteer time and that people have lives.</li>\n<li>Guidelines for communicating online:\n<ul>\n<li>Assume you are asking for a favor.</li>\n<li>Assume your boss will read what you say.</li>\n<li>Assume your family will read what you say.</li>\n</ul></li>\n</ul>\n\n<p>Kojo #5:</p>\n\n<ul>\n<li>Python Community Events\n<ul>\n<li>Michael and I (along with Trey Hunner) helped lead a New Attendee Orientation</li>\n<li>Join your local Python community</li>\n<li>Be kind to your fellow Pythonistas</li>\n</ul></li>\n</ul>\n\n<p>Michael #6: <a href=\"https://ngrok.com/\">ngrok</a></p>\n\n<ul>\n<li>ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.</li>\n<li>Public URLs for testing on mobile devices, testing your chatbot, SSH access to your Raspberry Pi, sharing your local dev work on full stack web apps.</li>\n<li>Just a commandline away</li>\n<li>My use case: Course app development</li>\n<li>Features:\n<ul>\n<li>Secure Tunnels</li>\n<li>Request Inspection</li>\n<li>Fast (HTTP 2)</li>\n</ul></li>\n</ul>\n\n<p>Extras and our news:</p>\n\n<p>Michael:</p>\n\n<ul>\n<li>Live recording video is out: <a href=\"https://youtu.be/s9uUSQvrIaE\">https://youtu.be/s9uUSQvrIaE</a></li>\n<li>Now up to 8 video servers around the world, Japan, Sao Paulo, and Mumbai are the latest. Based on the systemd thing we discussed way back when (<a href=\"https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future\">episode 54</a>)</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 18 May 2018 00:00:00 -0800", "published_parsed": [2018, 5, 18, 8, 0, 0, 4, 138, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Setting Expectations for Open Source Participation", "itunes_episode": "78", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:26:07"}}, "#77 You Don't Have To Be a Workaholic To Win": {"info": {"title": "#77 You Don't Have To Be a Workaholic To Win", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#77 You Don't Have To Be a Workaholic To Win"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/77/you-don-t-have-to-be-a-workaholic-to-win"}, {"length": "8217379", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/77/you-don-t-have-to-be-a-workaholic-to-win.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/77/you-don-t-have-to-be-a-workaholic-to-win", "id": "https://pythonbytes.fm/episodes/b7aad6ad-0b74-4467-a627-d6bba7964585", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://hackernoon.com/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a\"><strong>Why Senior Devs Write Dumb Code</strong></a></p>\n\n<ul>\n<li>\u201c<em>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\u201d - Kent Beck</em></li>\n<li>Code that is clean, straightforward, obvious, and easy to read actually takes practice to achieve.</li>\n<li>Follow principles like YAGNI, Singe Responsibility, DRY, etc.</li>\n<li>Avoid clever one-liners, weird abstractions.</li>\n<li>Esoteric language features.</li>\n<li>Code needs to be readable and easily understood while under time and stress pressure.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://geoalchemy-2.readthedocs.io/en/latest/\">GeoAlchemy 2</a></p>\n\n<ul>\n<li>GeoAlchemy 2 provides extensions to SQLAlchemy for working with spatial databases.</li>\n<li>GeoAlchemy 2 focuses on PostGIS. Aims to be simpler than its predecessor, GeoAlchemy.</li>\n<li>Using it:\n<ul>\n<li>Connect (e.g. Postgres)</li>\n<li>Declare a Mapping</li>\n</ul></li>\n</ul>\n\n<pre><code>    class Lake(Base):\n         __tablename__ = 'lake'\n         id = Column(Integer, primary_key=True)\n         name = Column(String)\n         geom = Column(Geometry('POLYGON'))\n</code></pre>\n\n<ul>\n<li>Create a table (via the engine)</li>\n<li>Create an Instance of the Mapped Class</li>\n<li>Inserts like standard SQLAlchmey</li>\n<li>Spatial Query</li>\n</ul>\n\n<pre><code>    from sqlalchemy import func\n    query = session.query(Lake).filter(\n             func.ST_Contains(Lake.geom, 'POINT(4 1)'))\n\n    query = session.query(Lake.name,\n          Lake.geom.ST_Buffer(2).ST_Area().label('bufferarea'))\n</code></pre>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <a href=\"https://github.com/digitaldomain/QtPyConvert\"><strong>QtPyConvert</strong></a></p>\n\n<ul>\n<li>An automatic Python Qt binding transpiler to the Qt.py abstraction layer.</li>\n<li>QtPyConvert supports the following bindings out of the box:\n<ul>\n<li><a href=\"https://www.riverbankcomputing.com/software/pyqt/download\">PyQt4</a></li>\n<li><a href=\"http://pyside.github.io/docs/pyside/\">PySide</a></li>\n<li><a href=\"https://www.riverbankcomputing.com/software/pyqt/download5\">PyQt5</a></li>\n<li><a href=\"https://wiki.qt.io/PySide2\">PySide2</a></li>\n</ul></li>\n<li>Conversions leave code comments in place, with the help of RedBaron</li>\n<li>Converts to <a href=\"https://github.com/mottosso/Qt.py\">Qt.py</a>\n<ul>\n<li>Minimal Python 2 &amp; 3 shim around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong>  <a href=\"https://www.kevinball.com/2018/04/17/you-dont-have-to-be-a-workaholic/\">You Don't Have To Be a Workaholic To Win: 13 Alternative Ways To Stand Out</a></p>\n\n<ul>\n<li>Do we have to kill ourselves to get ahead?</li>\n<li>Don\u2019t busy-brag</li>\n<li>Max Q analogy</li>\n<li>The tips</li>\n<li>Creativity</li>\n<li>Stubbornness</li>\n<li>Curiosity</li>\n<li>Kindness</li>\n<li>Planning</li>\n<li>Improvisation</li>\n<li>Enthusiasm</li>\n<li>Communication</li>\n<li>Presence</li>\n<li>Collaboration</li>\n<li>Willingness</li>\n<li>Patience</li>\n<li>Institutional Knowledge</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://github.com/PyCQA/Redbaron\"><strong>RedBaron</strong></a></p>\n\n<ul>\n<li>RedBaron is a python library to make the process of writing code that modify source code as easy and as simple as possible. \n<ul>\n<li>writing custom refactoring, generic refactoring, tools, </li>\n</ul></li>\n<li>Used by QtPyConvert to achieve the conversion while leaving code comments in place</li>\n<li>Uses the full syntax tree, FST. Like an AST, but keeps all information, including comments and formatting.</li>\n<li>possible uses:\n<ul>\n<li>rename a variable in a source file... without clashing with things that are not a variable (example: stuff inside a string)</li>\n<li>inline a function/method</li>\n<li>extract a function/method from a series of line of code</li>\n<li>split a class into several classes</li>\n<li>split a file into several modules</li>\n<li>convert your whole code base from one ORM to another</li>\n<li>do custom refactoring operation not implemented by IDE</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://no-title.victordomingos.com/articles/2018/project_beware_launches_app_for_ios/\">Project Beeware AppStore</a></p>\n\n<ul>\n<li>Project BeeWare has just released its first iPhone app made in Python using its Briefcase tool.</li>\n<li>Simple travel app for currency and tip calculations</li>\n<li>Briefcase: A distutils extension to assist in packaging Python projects as standalone applications.\nBriefcase is a tool for converting a Python project into a standalone native application. You can package projects for:\n<ul>\n<li>Mac</li>\n<li>Windows</li>\n<li>Linux</li>\n<li>iPhone/iPad</li>\n<li>Android</li>\n<li>AppleTV</li>\n<li>tvOS</li>\n</ul></li>\n<li>While there are other Python GUI toolkits aiming to enable Python developers to build and deploy iOS apps, like for instance the very nice <a href=\"http://omz-software.com/pythonista/\">Pythonista app</a>, the <a href=\"https://pybee.org\">BeeWare</a> project is a bit different because it aims at cross-platform compatibility and native widgets with a set of different tools, like Briefcase and Toga.</li>\n</ul>\n\n<p>Extras: </p>\n\n<ul>\n<li>Michael: Extra ssh breach Did you see that?  <a href=\"https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/\">https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/</a></li>\n<li>PyCon videos already up at <a href=\"https://www.youtube.com/pycon2018\">https://www.youtube.com/pycon2018</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://hackernoon.com/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a\"><strong>Why Senior Devs Write Dumb Code</strong></a></p>\n\n<ul>\n<li>\u201c<em>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\u201d - Kent Beck</em></li>\n<li>Code that is clean, straightforward, obvious, and easy to read actually takes practice to achieve.</li>\n<li>Follow principles like YAGNI, Singe Responsibility, DRY, etc.</li>\n<li>Avoid clever one-liners, weird abstractions.</li>\n<li>Esoteric language features.</li>\n<li>Code needs to be readable and easily understood while under time and stress pressure.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://geoalchemy-2.readthedocs.io/en/latest/\">GeoAlchemy 2</a></p>\n\n<ul>\n<li>GeoAlchemy 2 provides extensions to SQLAlchemy for working with spatial databases.</li>\n<li>GeoAlchemy 2 focuses on PostGIS. Aims to be simpler than its predecessor, GeoAlchemy.</li>\n<li>Using it:\n<ul>\n<li>Connect (e.g. Postgres)</li>\n<li>Declare a Mapping</li>\n</ul></li>\n</ul>\n\n<pre><code>    class Lake(Base):\n         __tablename__ = 'lake'\n         id = Column(Integer, primary_key=True)\n         name = Column(String)\n         geom = Column(Geometry('POLYGON'))\n</code></pre>\n\n<ul>\n<li>Create a table (via the engine)</li>\n<li>Create an Instance of the Mapped Class</li>\n<li>Inserts like standard SQLAlchmey</li>\n<li>Spatial Query</li>\n</ul>\n\n<pre><code>    from sqlalchemy import func\n    query = session.query(Lake).filter(\n             func.ST_Contains(Lake.geom, 'POINT(4 1)'))\n\n    query = session.query(Lake.name,\n          Lake.geom.ST_Buffer(2).ST_Area().label('bufferarea'))\n</code></pre>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <a href=\"https://github.com/digitaldomain/QtPyConvert\"><strong>QtPyConvert</strong></a></p>\n\n<ul>\n<li>An automatic Python Qt binding transpiler to the Qt.py abstraction layer.</li>\n<li>QtPyConvert supports the following bindings out of the box:\n<ul>\n<li><a href=\"https://www.riverbankcomputing.com/software/pyqt/download\">PyQt4</a></li>\n<li><a href=\"http://pyside.github.io/docs/pyside/\">PySide</a></li>\n<li><a href=\"https://www.riverbankcomputing.com/software/pyqt/download5\">PyQt5</a></li>\n<li><a href=\"https://wiki.qt.io/PySide2\">PySide2</a></li>\n</ul></li>\n<li>Conversions leave code comments in place, with the help of RedBaron</li>\n<li>Converts to <a href=\"https://github.com/mottosso/Qt.py\">Qt.py</a>\n<ul>\n<li>Minimal Python 2 &amp; 3 shim around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong>  <a href=\"https://www.kevinball.com/2018/04/17/you-dont-have-to-be-a-workaholic/\">You Don't Have To Be a Workaholic To Win: 13 Alternative Ways To Stand Out</a></p>\n\n<ul>\n<li>Do we have to kill ourselves to get ahead?</li>\n<li>Don\u2019t busy-brag</li>\n<li>Max Q analogy</li>\n<li>The tips</li>\n<li>Creativity</li>\n<li>Stubbornness</li>\n<li>Curiosity</li>\n<li>Kindness</li>\n<li>Planning</li>\n<li>Improvisation</li>\n<li>Enthusiasm</li>\n<li>Communication</li>\n<li>Presence</li>\n<li>Collaboration</li>\n<li>Willingness</li>\n<li>Patience</li>\n<li>Institutional Knowledge</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://github.com/PyCQA/Redbaron\"><strong>RedBaron</strong></a></p>\n\n<ul>\n<li>RedBaron is a python library to make the process of writing code that modify source code as easy and as simple as possible. \n<ul>\n<li>writing custom refactoring, generic refactoring, tools, </li>\n</ul></li>\n<li>Used by QtPyConvert to achieve the conversion while leaving code comments in place</li>\n<li>Uses the full syntax tree, FST. Like an AST, but keeps all information, including comments and formatting.</li>\n<li>possible uses:\n<ul>\n<li>rename a variable in a source file... without clashing with things that are not a variable (example: stuff inside a string)</li>\n<li>inline a function/method</li>\n<li>extract a function/method from a series of line of code</li>\n<li>split a class into several classes</li>\n<li>split a file into several modules</li>\n<li>convert your whole code base from one ORM to another</li>\n<li>do custom refactoring operation not implemented by IDE</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://no-title.victordomingos.com/articles/2018/project_beware_launches_app_for_ios/\">Project Beeware AppStore</a></p>\n\n<ul>\n<li>Project BeeWare has just released its first iPhone app made in Python using its Briefcase tool.</li>\n<li>Simple travel app for currency and tip calculations</li>\n<li>Briefcase: A distutils extension to assist in packaging Python projects as standalone applications.\nBriefcase is a tool for converting a Python project into a standalone native application. You can package projects for:\n<ul>\n<li>Mac</li>\n<li>Windows</li>\n<li>Linux</li>\n<li>iPhone/iPad</li>\n<li>Android</li>\n<li>AppleTV</li>\n<li>tvOS</li>\n</ul></li>\n<li>While there are other Python GUI toolkits aiming to enable Python developers to build and deploy iOS apps, like for instance the very nice <a href=\"http://omz-software.com/pythonista/\">Pythonista app</a>, the <a href=\"https://pybee.org\">BeeWare</a> project is a bit different because it aims at cross-platform compatibility and native widgets with a set of different tools, like Briefcase and Toga.</li>\n</ul>\n\n<p>Extras: </p>\n\n<ul>\n<li>Michael: Extra ssh breach Did you see that?  <a href=\"https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/\">https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/</a></li>\n<li>PyCon videos already up at <a href=\"https://www.youtube.com/pycon2018\">https://www.youtube.com/pycon2018</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Sat, 12 May 2018 00:00:00 -0800", "published_parsed": [2018, 5, 12, 8, 0, 0, 5, 132, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "You Don't Have To Be a Workaholic To Win", "itunes_episode": "77", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:04"}}, "#76 Goodbye zero-versioning": {"info": {"title": "#76 Goodbye zero-versioning", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#76 Goodbye zero-versioning"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/76/goodbye-zero-versioning"}, {"length": "13580892", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/76/goodbye-zero-versioning.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/76/goodbye-zero-versioning", "id": "https://pythonbytes.fm/episodes/04878768-7e7c-41b3-b087-d132798a6934", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://medium.freecodecamp.org/unlearning-toxic-behaviors-in-a-code-review-culture-b7c295452a3c\"><strong>Unlearning toxic behaviors in a code review culture</strong></a></p>\n\n<ul>\n<li>unhelpful behaviors:\n<ul>\n<li>passing off opinion as fact</li>\n<li>overwhelming with an avalanche of comments</li>\n<li>asking people to fix problems they didn\u2019t cause \u201cwhile they\u2019re at it\u201d.</li>\n<li>asking judgmental questions</li>\n<li>being sarcastic</li>\n<li>using emojis</li>\n<li>not replying to comments</li>\n<li>ignoring (not calling out) toxic behavior from high performers</li>\n</ul></li>\n<li>helpful:\n<ul>\n<li>use questions or recommendations to drive dialog</li>\n<li>collaborate, don\u2019t back-seat drive</li>\n<li>respond to every comment</li>\n<li>know when to take a discussion offline</li>\n<li>use opportunities to teach, and don\u2019t show off</li>\n<li>don\u2019t show surprise of lack of knowledge by others</li>\n<li>automate what can be</li>\n<li>refuse to normalize toxic behavior</li>\n<li>managers: hire carefully, listen to your team, and enforce</li>\n<li>set the standard as your team is small and growing</li>\n<li>understand you might be part of the problem</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.palletsprojects.com/blog/flask-1-0-released/\">Flask 1.0 Released</a></p>\n\n<ul>\n<li>Dropped support for Python 2.6 and 3.3.</li>\n<li>The CLI is more flexible. <code>FLASK_APP</code> can point to an app factory, optionally with arguments. It understands import names in more cases where filenames were previously used. It automatically detects common filenames, app names, and factory names. <code>FLASK_ENV</code> describes the environment the app is running in, like <code>development</code>, and replaces <code>FLASK_DEBUG</code> in most cases. <a href=\"http://flask.pocoo.org/docs/1.0/cli/\">See the docs to learn more.</a></li>\n<li>If python-dotenv is installed, the <code>flask</code> CLI will load environment variables from <code>.flaskenv</code> and <code>.env</code> files rather than having to export them in each new terminal.</li>\n<li>The development server is multi-threaded by default to handle concurrent requests during development.</li>\n<li>flask.ext, which was previously deprecated, is completely removed. Import extensions by their actual package names.</li>\n<li>Accessing missing keys from <code>request.form</code> shows a more helpful error message in debug mode, addressing a very common source of confusion for developers.</li>\n<li>Error handlers are looked up by code then exception class, on the blueprint then application. This gives more predictable control over handlers, including being able to handle <code>HTTPException</code>.</li>\n<li>The behavior of <code>app.logger</code> has been greatly simplified and should be much easier to customize. The logger is always named <code>flask.app</code>, it only adds a handler if none are registered, and it never removes existing handlers. <a href=\"http://flask.pocoo.org/docs/1.0/logging/\">See the docs to learn more.</a></li>\n<li>The <code>test_client</code> gained a <code>json</code> argument for posting JSON data, and the <code>Response</code> object gained a <code>get_json</code> method to decode the data as JSON in tests.</li>\n<li>A new <code>test_cli_runner</code> is added for testing an app's CLI commands.</li>\n<li>Many documentation sections have been rewritten to improve clarity and relevance. This is an ongoing effort.</li>\n<li>The <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/\">tutorial</a> and corresponding <a href=\"https://github.com/pallets/flask/tree/1.0/examples/tutorial\">example</a> have been rewritten. They use a structured layout and go into more detail about each aspect in order to help new users avoid common issues and become comfortable with Flask.\n<ul>\n<li>There are many more changes throughout the framework. <a href=\"http://flask.pocoo.org/docs/1.0/changelog/\">Read the full</a> </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <strong>So, I still don\u2019t quite get pipenv, \u2026.</strong></p>\n\n<ul>\n<li>Best discussion of why pipenv is useful for applications I\u2019ve come across so far is <a href=\"https://realpython.com/pipenv-guide/\">Pipenv: A Guide to the New Python Packaging Tool</a></li>\n<li>Starts with a discussion of situations where <code>pip</code>, <code>pip freeze</code>, and <code>requirements.txt</code> fall apart.\n<ul>\n<li><code>requirements.txt</code> often just have an applications direct dependencies, not sub-dependencies.</li>\n<li><code>pip freeze &gt; requirements.txt</code> will pin your versions to specific versions, but then you\u2019ve got to keep track of dependencies and sub-dependencies.</li>\n<li><code>Pipfile</code> intends to replace <code>requirements.txt</code>, with a simple-ish human readable format. Also includes extra things like dev environment support.</li>\n<li><code>Pipfile.lock</code> intends to replace pinned <code>requirements.txt</code> files. Also includes hashes to validate versions haven\u2019t been corrupted.</li>\n<li><code>pipenv</code> also includes cool tools like dependency graphing, checking for updates, etc.</li>\n</ul></li>\n<li><code>pipenv</code> should be used for applications, but not packages intended to be included in other applications. But you can use it during package development, just probably not include the Pipfile and Pipfile.lock in the repo or package distribution. - Brian\u2019s comment</li>\n</ul>\n\n<p>Bonus extra: </p>\n\n<ul>\n<li><a href=\"https://github.com/elgertam/cookiecutter-pipenv\">cookiecutter-pipenv: Cookiecutter Python Package Template with Pipenv</a> </li>\n</ul>\n\n<p><strong>Michael #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://blogs.oracle.com/developers/announcing-graalvm\">GraalVM: Run Programs Faster Anywhere</a></p>\n\n<ul>\n<li>Why?\n<ul>\n<li>Current production virtual machines (VMs) provide high performance execution of programs only for a specific language or a very small set of languages.</li>\n<li>Compilation, memory management, and tooling are maintained separately for different languages, violating the \u2018don\u2019t repeat yourself\u2019 (DRY) principle.</li>\n<li>high performance VMs are heavyweight processes with high memory footprint and difficult to embed.</li>\n</ul></li>\n<li>Oracle Labs started a new research project for exploring a novel architecture for virtual machines. Our vision was to create a single VM that would provide high performance for all programming languages, therefore facilitating communication between programs.</li>\n<li>Released: <a href=\"http://www.graalvm.org/\">GraalVM</a>, a universal virtual machine designed for a polyglot world.</li>\n<li>GraalVM provides high performance for individual languages and interoperability with zero performance overhead for creating polyglot applications.</li>\n<li>GraalVM 1.0 allows you to run:\n<ul>\n<li>JVM-based languages like Java, Scala, Groovy, or Kotlin</li>\n<li>JavaScript (including Node.js)</li>\n<li>LLVM bitcode (created from programs written in e.g. C, C++, or Rust)</li>\n<li>Experimental versions of Ruby, R, and <strong>Python</strong></li>\n</ul></li>\n<li>Future: This first release is only the beginning. We are working on improving all aspects of GraalVM; in particular the support for Python</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"http://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/\"><strong>Testing a Flask Application using pytest</strong></a></p>\n\n<ul>\n<li>Small demo project, and article, that teaches the use of pytest in Flask.</li>\n<li>unit testing and functional testing</li>\n<li>Article covers testing models, with an example of a new user.</li>\n<li>project also has examples of using a test client to check the login page, password authentication, and a lot more.</li>\n<li>Very cool project.</li>\n</ul>\n\n<p><strong>Bonus:</strong> <a href=\"https://github.com/jbn/pytest-caprng\"><strong>A cool new pytest plugin: pytest-caprng</strong></a></p>\n\n<ul>\n<li>Tests that use <code>random</code> or <code>np.random</code> may fail, but when you re-run them, they don\u2019t fail, which makes them hard to debug.</li>\n<li>This plugin adds pytest flags <code>--caprng-global-stdlib</code> and <code>--caprng-global-np</code>, which saves the random state before each test so that if you re-run the test, the random-ness is not so random, and you can reproduce your failure.</li>\n<li>Also, thanks John for reminding me what \u201cstochastic\u201d means.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/\">How to have a great first PyCon</a></p>\n\n<ul>\n<li>Spending your time: which talks should I go to? The talks at PyCon are typically uploaded to YouTube within 24 hours after the talk ends. I am suggesting that you don\u2019t need to worry about attending every talk.</li>\n<li>Open spaces: attend them and consider hosting your own! </li>\n<li>There are a few reasons I often pick open spaces over talks:\n<ul>\n<li>Often the open spaces are more niche and topical than the talks: there are some subjects that exist in open spaces every year but which I\u2019ve never seen a talk on</li>\n<li>Open spaces are all about interaction and discussion whereas talks are a monologue that often evolves into subsequent dialogues</li>\n<li>Open spaces aren\u2019t recorded whereas the talks are, meaning you can\u2019t really catch up on them later</li>\n</ul></li>\n<li>Tips for starting conversation, breakfast and lunch time\u2026</li>\n<li>The hallway track \ud83d\udc63\n<ul>\n<li>Something you might consider doing while at PyCon is taking breaks in the hallway. </li>\n<li>In addition to joining or starting a table in the hallway, consider identifying groups that have <a href=\"http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/\">a PacMan opening</a> to join and make sure the groups you\u2019re in are PacMan-friendly.</li>\n</ul></li>\n<li>Interacting online during PyCon \ud83d\udc26\n<ul>\n<li>I recommend getting a Twitter account to make it easier to passively keep up with folks from PyCon after the conference ends.</li>\n<li>Sometimes people on Twitter will ask if anyone would like to join them for dinner and you might decide to reply and say you\u2019d like to join.</li>\n</ul></li>\n<li>Networking isn\u2019t a dirty word: it means making friends \ud83d\udc65</li>\n<li>I hear two opposing concerns sometimes expressed about PyCon:\n<ul>\n<li>Isn\u2019t everyone here to get a job or hire people?</li>\n<li>Is it acceptable to go to PyCon looking for a job?</li>\n<li>PyCon is a networking event. That doesn\u2019t necessarily mean everyone is there to get a job, but it also definitely doesn\u2019t mean it\u2019s unacceptable to job-seek at Python.</li>\n</ul></li>\n<li>Other topics include\n<ul>\n<li>Volunteering</li>\n<li>Evening events: dinners and board games</li>\n<li>Give a lightning talk \u26a1</li>\n<li>Take care of yourself</li>\n</ul></li>\n<li>Final tip from commentor: If you are on windows, it's helpful to install a virtual image of a linux like the current ubuntu on your laptop, because you could run into situations where you want to follow a talk / training which doesn't work on windows and then you're missing a great opportunity to learn.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Come see us at PyCon!!! We\u2019ll have stickers! </li>\n<li>Brian\u2019s talk is Friday at 5 something. </li>\n<li>We are doing a live Python Bytes open session, join \u201cfriends of the show\u201d to get notified</li>\n<li>I\u2019ll be at Microsoft BUILD too</li>\n<li>PyGotham 2018 Call for Proposals</li>\n<li><a href=\"http://PyCon.DE\">http://PyCon.DE</a>  (24-26 October 2018 in Karlsruhe, Germany) starting our CfP tomorrow until May 20. <a href=\"http://de.pycon.org\">http://de.pycon.org</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://medium.freecodecamp.org/unlearning-toxic-behaviors-in-a-code-review-culture-b7c295452a3c\"><strong>Unlearning toxic behaviors in a code review culture</strong></a></p>\n\n<ul>\n<li>unhelpful behaviors:\n<ul>\n<li>passing off opinion as fact</li>\n<li>overwhelming with an avalanche of comments</li>\n<li>asking people to fix problems they didn\u2019t cause \u201cwhile they\u2019re at it\u201d.</li>\n<li>asking judgmental questions</li>\n<li>being sarcastic</li>\n<li>using emojis</li>\n<li>not replying to comments</li>\n<li>ignoring (not calling out) toxic behavior from high performers</li>\n</ul></li>\n<li>helpful:\n<ul>\n<li>use questions or recommendations to drive dialog</li>\n<li>collaborate, don\u2019t back-seat drive</li>\n<li>respond to every comment</li>\n<li>know when to take a discussion offline</li>\n<li>use opportunities to teach, and don\u2019t show off</li>\n<li>don\u2019t show surprise of lack of knowledge by others</li>\n<li>automate what can be</li>\n<li>refuse to normalize toxic behavior</li>\n<li>managers: hire carefully, listen to your team, and enforce</li>\n<li>set the standard as your team is small and growing</li>\n<li>understand you might be part of the problem</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.palletsprojects.com/blog/flask-1-0-released/\">Flask 1.0 Released</a></p>\n\n<ul>\n<li>Dropped support for Python 2.6 and 3.3.</li>\n<li>The CLI is more flexible. <code>FLASK_APP</code> can point to an app factory, optionally with arguments. It understands import names in more cases where filenames were previously used. It automatically detects common filenames, app names, and factory names. <code>FLASK_ENV</code> describes the environment the app is running in, like <code>development</code>, and replaces <code>FLASK_DEBUG</code> in most cases. <a href=\"http://flask.pocoo.org/docs/1.0/cli/\">See the docs to learn more.</a></li>\n<li>If python-dotenv is installed, the <code>flask</code> CLI will load environment variables from <code>.flaskenv</code> and <code>.env</code> files rather than having to export them in each new terminal.</li>\n<li>The development server is multi-threaded by default to handle concurrent requests during development.</li>\n<li>flask.ext, which was previously deprecated, is completely removed. Import extensions by their actual package names.</li>\n<li>Accessing missing keys from <code>request.form</code> shows a more helpful error message in debug mode, addressing a very common source of confusion for developers.</li>\n<li>Error handlers are looked up by code then exception class, on the blueprint then application. This gives more predictable control over handlers, including being able to handle <code>HTTPException</code>.</li>\n<li>The behavior of <code>app.logger</code> has been greatly simplified and should be much easier to customize. The logger is always named <code>flask.app</code>, it only adds a handler if none are registered, and it never removes existing handlers. <a href=\"http://flask.pocoo.org/docs/1.0/logging/\">See the docs to learn more.</a></li>\n<li>The <code>test_client</code> gained a <code>json</code> argument for posting JSON data, and the <code>Response</code> object gained a <code>get_json</code> method to decode the data as JSON in tests.</li>\n<li>A new <code>test_cli_runner</code> is added for testing an app's CLI commands.</li>\n<li>Many documentation sections have been rewritten to improve clarity and relevance. This is an ongoing effort.</li>\n<li>The <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/\">tutorial</a> and corresponding <a href=\"https://github.com/pallets/flask/tree/1.0/examples/tutorial\">example</a> have been rewritten. They use a structured layout and go into more detail about each aspect in order to help new users avoid common issues and become comfortable with Flask.\n<ul>\n<li>There are many more changes throughout the framework. <a href=\"http://flask.pocoo.org/docs/1.0/changelog/\">Read the full</a> </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <strong>So, I still don\u2019t quite get pipenv, \u2026.</strong></p>\n\n<ul>\n<li>Best discussion of why pipenv is useful for applications I\u2019ve come across so far is <a href=\"https://realpython.com/pipenv-guide/\">Pipenv: A Guide to the New Python Packaging Tool</a></li>\n<li>Starts with a discussion of situations where <code>pip</code>, <code>pip freeze</code>, and <code>requirements.txt</code> fall apart.\n<ul>\n<li><code>requirements.txt</code> often just have an applications direct dependencies, not sub-dependencies.</li>\n<li><code>pip freeze &gt; requirements.txt</code> will pin your versions to specific versions, but then you\u2019ve got to keep track of dependencies and sub-dependencies.</li>\n<li><code>Pipfile</code> intends to replace <code>requirements.txt</code>, with a simple-ish human readable format. Also includes extra things like dev environment support.</li>\n<li><code>Pipfile.lock</code> intends to replace pinned <code>requirements.txt</code> files. Also includes hashes to validate versions haven\u2019t been corrupted.</li>\n<li><code>pipenv</code> also includes cool tools like dependency graphing, checking for updates, etc.</li>\n</ul></li>\n<li><code>pipenv</code> should be used for applications, but not packages intended to be included in other applications. But you can use it during package development, just probably not include the Pipfile and Pipfile.lock in the repo or package distribution. - Brian\u2019s comment</li>\n</ul>\n\n<p>Bonus extra: </p>\n\n<ul>\n<li><a href=\"https://github.com/elgertam/cookiecutter-pipenv\">cookiecutter-pipenv: Cookiecutter Python Package Template with Pipenv</a> </li>\n</ul>\n\n<p><strong>Michael #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://blogs.oracle.com/developers/announcing-graalvm\">GraalVM: Run Programs Faster Anywhere</a></p>\n\n<ul>\n<li>Why?\n<ul>\n<li>Current production virtual machines (VMs) provide high performance execution of programs only for a specific language or a very small set of languages.</li>\n<li>Compilation, memory management, and tooling are maintained separately for different languages, violating the \u2018don\u2019t repeat yourself\u2019 (DRY) principle.</li>\n<li>high performance VMs are heavyweight processes with high memory footprint and difficult to embed.</li>\n</ul></li>\n<li>Oracle Labs started a new research project for exploring a novel architecture for virtual machines. Our vision was to create a single VM that would provide high performance for all programming languages, therefore facilitating communication between programs.</li>\n<li>Released: <a href=\"http://www.graalvm.org/\">GraalVM</a>, a universal virtual machine designed for a polyglot world.</li>\n<li>GraalVM provides high performance for individual languages and interoperability with zero performance overhead for creating polyglot applications.</li>\n<li>GraalVM 1.0 allows you to run:\n<ul>\n<li>JVM-based languages like Java, Scala, Groovy, or Kotlin</li>\n<li>JavaScript (including Node.js)</li>\n<li>LLVM bitcode (created from programs written in e.g. C, C++, or Rust)</li>\n<li>Experimental versions of Ruby, R, and <strong>Python</strong></li>\n</ul></li>\n<li>Future: This first release is only the beginning. We are working on improving all aspects of GraalVM; in particular the support for Python</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"http://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/\"><strong>Testing a Flask Application using pytest</strong></a></p>\n\n<ul>\n<li>Small demo project, and article, that teaches the use of pytest in Flask.</li>\n<li>unit testing and functional testing</li>\n<li>Article covers testing models, with an example of a new user.</li>\n<li>project also has examples of using a test client to check the login page, password authentication, and a lot more.</li>\n<li>Very cool project.</li>\n</ul>\n\n<p><strong>Bonus:</strong> <a href=\"https://github.com/jbn/pytest-caprng\"><strong>A cool new pytest plugin: pytest-caprng</strong></a></p>\n\n<ul>\n<li>Tests that use <code>random</code> or <code>np.random</code> may fail, but when you re-run them, they don\u2019t fail, which makes them hard to debug.</li>\n<li>This plugin adds pytest flags <code>--caprng-global-stdlib</code> and <code>--caprng-global-np</code>, which saves the random state before each test so that if you re-run the test, the random-ness is not so random, and you can reproduce your failure.</li>\n<li>Also, thanks John for reminding me what \u201cstochastic\u201d means.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/\">How to have a great first PyCon</a></p>\n\n<ul>\n<li>Spending your time: which talks should I go to? The talks at PyCon are typically uploaded to YouTube within 24 hours after the talk ends. I am suggesting that you don\u2019t need to worry about attending every talk.</li>\n<li>Open spaces: attend them and consider hosting your own! </li>\n<li>There are a few reasons I often pick open spaces over talks:\n<ul>\n<li>Often the open spaces are more niche and topical than the talks: there are some subjects that exist in open spaces every year but which I\u2019ve never seen a talk on</li>\n<li>Open spaces are all about interaction and discussion whereas talks are a monologue that often evolves into subsequent dialogues</li>\n<li>Open spaces aren\u2019t recorded whereas the talks are, meaning you can\u2019t really catch up on them later</li>\n</ul></li>\n<li>Tips for starting conversation, breakfast and lunch time\u2026</li>\n<li>The hallway track \ud83d\udc63\n<ul>\n<li>Something you might consider doing while at PyCon is taking breaks in the hallway. </li>\n<li>In addition to joining or starting a table in the hallway, consider identifying groups that have <a href=\"http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/\">a PacMan opening</a> to join and make sure the groups you\u2019re in are PacMan-friendly.</li>\n</ul></li>\n<li>Interacting online during PyCon \ud83d\udc26\n<ul>\n<li>I recommend getting a Twitter account to make it easier to passively keep up with folks from PyCon after the conference ends.</li>\n<li>Sometimes people on Twitter will ask if anyone would like to join them for dinner and you might decide to reply and say you\u2019d like to join.</li>\n</ul></li>\n<li>Networking isn\u2019t a dirty word: it means making friends \ud83d\udc65</li>\n<li>I hear two opposing concerns sometimes expressed about PyCon:\n<ul>\n<li>Isn\u2019t everyone here to get a job or hire people?</li>\n<li>Is it acceptable to go to PyCon looking for a job?</li>\n<li>PyCon is a networking event. That doesn\u2019t necessarily mean everyone is there to get a job, but it also definitely doesn\u2019t mean it\u2019s unacceptable to job-seek at Python.</li>\n</ul></li>\n<li>Other topics include\n<ul>\n<li>Volunteering</li>\n<li>Evening events: dinners and board games</li>\n<li>Give a lightning talk \u26a1</li>\n<li>Take care of yourself</li>\n</ul></li>\n<li>Final tip from commentor: If you are on windows, it's helpful to install a virtual image of a linux like the current ubuntu on your laptop, because you could run into situations where you want to follow a talk / training which doesn't work on windows and then you're missing a great opportunity to learn.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Come see us at PyCon!!! We\u2019ll have stickers! </li>\n<li>Brian\u2019s talk is Friday at 5 something. </li>\n<li>We are doing a live Python Bytes open session, join \u201cfriends of the show\u201d to get notified</li>\n<li>I\u2019ll be at Microsoft BUILD too</li>\n<li>PyGotham 2018 Call for Proposals</li>\n<li><a href=\"http://PyCon.DE\">http://PyCon.DE</a>  (24-26 October 2018 in Karlsruhe, Germany) starting our CfP tomorrow until May 20. <a href=\"http://de.pycon.org\">http://de.pycon.org</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 04 May 2018 00:00:00 -0800", "published_parsed": [2018, 5, 4, 8, 0, 0, 4, 124, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Goodbye zero-versioning", "itunes_episode": "76", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:30:40"}}, "#75 pypi.org officially launches": {"info": {"title": "#75 pypi.org officially launches", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#75 pypi.org officially launches"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/75/pypi.org-officially-launches"}, {"length": "9314616", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/75/pypi.org-officially-launches.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/75/pypi.org-officially-launches", "id": "https://pythonbytes.fm/episodes/6f5581c9-5ef6-4b25-be58-f3ebdedcbabc", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://pypi.org/project/numba/\"><strong>numba</strong></a></p>\n\n<ul>\n<li>From the numba readme:\n<ul>\n<li>\u201cThe easiest way to install numba and get updates is by using the Anaconda Distribution: <a href=\"https://www.anaconda.com/download\">https://www.anaconda.com/download</a>\u201d</li>\n</ul></li>\n<li><a href=\"http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/numba/numba.ipynb?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly#The-need-for-speed-without-bothering-too-much:-An-introduction-to-numba\">The need for speed without bothering too much: An introduction to numba</a></li>\n<li>Can get huge speed up for some computation heavy loops or algorithms.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://blog.python.org/2018/04/pip-10-has-been-released.html\"><strong>pip 10 is out</strong></a><strong>!</strong></p>\n\n<ul>\n<li>Time for: <code>python -m pip install --upgrade pip</code></li>\n<li>Features:\n<ul>\n<li>Python 2.6 is no longer supported - if you need pip on Python 2.6, you should stay on pip 9, which is the last version to support Python 2.6.</li>\n<li>Support for PEP 518, which allows projects to specify what packages they require in order to build from source. (PEP 518 support is currently limited, with full support coming in future versions - see the documentation for details).</li>\n<li>Significant improvements in Unicode handling for non-ASCII locales on Windows.</li>\n<li>A new \"pip config\" command.</li>\n<li>The default upgrade strategy has become \"only-if-needed\"</li>\n<li>Many bug fixes and minor improvements.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <a href=\"http://treyhunner.com/2018/04/keyword-arguments-in-python/\"><strong>Keyword (Named) Arguments in Python: How to Use Them</strong></a></p>\n\n<ul>\n<li>Using keyword arguments is often seen when there are many arguments to a function that have useful defaults, and you only want to override the default with some of the arguments.</li>\n<li>Example:</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;comma&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;separated&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;words&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">comma</span><span class=\"p\">,</span> <span class=\"n\">separated</span><span class=\"p\">,</span> <span class=\"n\">words</span>\n</code></pre></div>\n\n<ul>\n<li>You can take positional arguments and require some to be named with various uses of <code>*</code></li>\n</ul>\n\n<pre><code>    def foo(*, bar, baz):\n      print(f'{bar} {baz}') \n</code></pre>\n\n<ul>\n<li>Lots of other useful tricks in this article.</li>\n</ul>\n\n<p><strong>Michael #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://pythoninsider.blogspot.ca/2018/04/new-pypi-launched-legacy-pypi-shutting.html\"><strong>pypi.org officially launches</strong></a></p>\n\n<ul>\n<li>Legacy PyPI shutting down April 30</li>\n<li>Listen to talk python 159</li>\n<li>Starting April 16, the canonical Python Package Index is at <a href=\"https://pypi.org\">https://pypi.org</a> and uses the new Warehouse codebase.</li>\n<li>Launched the new PyPI, redirecting browser traffic and API calls (including \"pip install\") from pypi.python.org to the new site. The old codebase is still available at <a href=\"https://legacy.pypi.org\">https://legacy.pypi.org</a> for now.</li>\n<li>Monday April 30 (2018-04-30): We plan to shut down legacy PyPI https://legacy.pypi.org . The address pypi.python.org will continue to redirect to Warehouse.</li>\n<li>If your site/service links to or uses <a href=\"http://pypi.python.org\">pypi.python.org</a>, you should start using pypi.org instead: <a href=\"https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi\">https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi</a> </li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://realpython.com/python-modules-packages/\"><strong>Python Modules and Packages \u2013 An Introduction</strong></a></p>\n\n<ul>\n<li>In Python, it is, and understanding modules and packages is key to getting a good footing when learning Python. It\u2019s also an area that trips up people when they start trying to create reusable code.</li>\n<li>How to create a Python <strong>module</strong></li>\n<li>Locations where the Python interpreter searches for a module</li>\n<li>How to obtain access to the objects defined in a module with the <code>import</code> statement</li>\n<li>How to create a module that is executable as a standalone script</li>\n<li>How to organize modules into <strong>packages</strong> and <strong>subpackages</strong></li>\n<li>How to control package initialization</li>\n</ul>\n\n<p><strong>Michael #6: Pandas only like modern Python</strong></p>\n\n<ul>\n<li>From December 31st, 2018, Pandas will drop support for Python 2.7. This includes no backports of security or bug fixes (unless someone volunteers to do those)</li>\n<li>The final release before December 31, 2018 will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.</li>\n<li>Starting January 1, 2019, all releases will be Python 3 only.</li>\n<li>The full <a href=\"https://www.reddit.com/r/Python/comments/8c883i/from_december_31st_2018_pandas_will_drop_support/\">reddit discussion</a> is interesting.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Just launched: Python 3, an illustrated tour! <a href=\"https://talkpython.fm/illustrated\"><strong>talkpython.fm/illustrated</strong></a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://pypi.org/project/numba/\"><strong>numba</strong></a></p>\n\n<ul>\n<li>From the numba readme:\n<ul>\n<li>\u201cThe easiest way to install numba and get updates is by using the Anaconda Distribution: <a href=\"https://www.anaconda.com/download\">https://www.anaconda.com/download</a>\u201d</li>\n</ul></li>\n<li><a href=\"http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/numba/numba.ipynb?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly#The-need-for-speed-without-bothering-too-much:-An-introduction-to-numba\">The need for speed without bothering too much: An introduction to numba</a></li>\n<li>Can get huge speed up for some computation heavy loops or algorithms.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://blog.python.org/2018/04/pip-10-has-been-released.html\"><strong>pip 10 is out</strong></a><strong>!</strong></p>\n\n<ul>\n<li>Time for: <code>python -m pip install --upgrade pip</code></li>\n<li>Features:\n<ul>\n<li>Python 2.6 is no longer supported - if you need pip on Python 2.6, you should stay on pip 9, which is the last version to support Python 2.6.</li>\n<li>Support for PEP 518, which allows projects to specify what packages they require in order to build from source. (PEP 518 support is currently limited, with full support coming in future versions - see the documentation for details).</li>\n<li>Significant improvements in Unicode handling for non-ASCII locales on Windows.</li>\n<li>A new \"pip config\" command.</li>\n<li>The default upgrade strategy has become \"only-if-needed\"</li>\n<li>Many bug fixes and minor improvements.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#3:</strong> <a href=\"http://treyhunner.com/2018/04/keyword-arguments-in-python/\"><strong>Keyword (Named) Arguments in Python: How to Use Them</strong></a></p>\n\n<ul>\n<li>Using keyword arguments is often seen when there are many arguments to a function that have useful defaults, and you only want to override the default with some of the arguments.</li>\n<li>Example:</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;comma&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;separated&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;words&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">comma</span><span class=\"p\">,</span> <span class=\"n\">separated</span><span class=\"p\">,</span> <span class=\"n\">words</span>\n</code></pre></div>\n\n<ul>\n<li>You can take positional arguments and require some to be named with various uses of <code>*</code></li>\n</ul>\n\n<pre><code>    def foo(*, bar, baz):\n      print(f'{bar} {baz}') \n</code></pre>\n\n<ul>\n<li>Lots of other useful tricks in this article.</li>\n</ul>\n\n<p><strong>Michael #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://pythoninsider.blogspot.ca/2018/04/new-pypi-launched-legacy-pypi-shutting.html\"><strong>pypi.org officially launches</strong></a></p>\n\n<ul>\n<li>Legacy PyPI shutting down April 30</li>\n<li>Listen to talk python 159</li>\n<li>Starting April 16, the canonical Python Package Index is at <a href=\"https://pypi.org\">https://pypi.org</a> and uses the new Warehouse codebase.</li>\n<li>Launched the new PyPI, redirecting browser traffic and API calls (including \"pip install\") from pypi.python.org to the new site. The old codebase is still available at <a href=\"https://legacy.pypi.org\">https://legacy.pypi.org</a> for now.</li>\n<li>Monday April 30 (2018-04-30): We plan to shut down legacy PyPI https://legacy.pypi.org . The address pypi.python.org will continue to redirect to Warehouse.</li>\n<li>If your site/service links to or uses <a href=\"http://pypi.python.org\">pypi.python.org</a>, you should start using pypi.org instead: <a href=\"https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi\">https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi</a> </li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#5:</strong> <a href=\"https://realpython.com/python-modules-packages/\"><strong>Python Modules and Packages \u2013 An Introduction</strong></a></p>\n\n<ul>\n<li>In Python, it is, and understanding modules and packages is key to getting a good footing when learning Python. It\u2019s also an area that trips up people when they start trying to create reusable code.</li>\n<li>How to create a Python <strong>module</strong></li>\n<li>Locations where the Python interpreter searches for a module</li>\n<li>How to obtain access to the objects defined in a module with the <code>import</code> statement</li>\n<li>How to create a module that is executable as a standalone script</li>\n<li>How to organize modules into <strong>packages</strong> and <strong>subpackages</strong></li>\n<li>How to control package initialization</li>\n</ul>\n\n<p><strong>Michael #6: Pandas only like modern Python</strong></p>\n\n<ul>\n<li>From December 31st, 2018, Pandas will drop support for Python 2.7. This includes no backports of security or bug fixes (unless someone volunteers to do those)</li>\n<li>The final release before December 31, 2018 will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.</li>\n<li>Starting January 1, 2019, all releases will be Python 3 only.</li>\n<li>The full <a href=\"https://www.reddit.com/r/Python/comments/8c883i/from_december_31st_2018_pandas_will_drop_support/\">reddit discussion</a> is interesting.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li>Just launched: Python 3, an illustrated tour! <a href=\"https://talkpython.fm/illustrated\"><strong>talkpython.fm/illustrated</strong></a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Sat, 28 Apr 2018 00:00:00 -0800", "published_parsed": [2018, 4, 28, 8, 0, 0, 5, 118, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "pypi.org officially launches", "itunes_episode": "75", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:51"}}, "#74 Contributing to Open Source effectively": {"info": {"title": "#74 Contributing to Open Source effectively", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#74 Contributing to Open Source effectively"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/74/contributing-to-open-source-effectively"}, {"length": "10566523", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/74/contributing-to-open-source-effectively.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/74/contributing-to-open-source-effectively", "id": "https://pythonbytes.fm/episodes/20d66724-2553-4748-9967-b6b470afc53b", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Special guest: Matt Harrison -</strong> <a href=\"https://twitter.com/__mharrison__\"><strong>__mharrison__</strong></a></p>\n\n<p><strong>Brian #1: Contributing to Open Source effectively</strong>\nThe mechanics and conventions on how to contribute to open source projects can be confusing. After seeing a <a href=\"https://github.com/okken/cards/pull/31\">very well documented pull request</a> that started with <code>[WIP]</code> in the subject line when it was first submitted, I tried to find out more about the conventions and mechanics of it all. I\u2019m still learning, but here are a couple of resources:</p>\n\n<ul>\n<li><a href=\"https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/\">How to write the perfect pull request</a> is more of a mindset of how to initiate and receive PRs\n<ul>\n<li>Approach to writing a Pull Request, including that [WIP] trick.</li>\n<li>Offering feedback</li>\n<li>Responding to feedback</li>\n</ul></li>\n<li><a href=\"https://pragprog.com/book/vbopens/forge-your-future-with-open-source\">Forge Your Future with Open Source</a>, <a href=\"https://twitter.com/vmbrasseur\"><strong>@</strong></a><a href=\"https://twitter.com/vmbrasseur\">vmbrasseur</a> book on contributing to open source, includes:\n<ul>\n<li>Make a Contribution, which includes PRs</li>\n<li>Make a difference without making a pull request, which is suggests many ways to contribute to a project without contributing code, like reviewing others contributions, testing, triaging bugs, \u2026</li>\n<li>Interacting with the community.</li>\n</ul></li>\n</ul>\n\n<p><strong>Matt #2:</strong> <strong>Jupyter, Mathematica, and the Future of the Research Paper</strong></p>\n\n<ul>\n<li>Paul Romer, economy professor at NYU</li>\n<li>As a longtime Linux user there was constantly the question of the \u201cyear of the Linux Desktop\u201d. Maybe this is the year of the \u201cJupyter desktop\u201d (also beta version of JupyterLab). Not just a tool for innovators or early adopters</li>\n<li>Refers to Article in Atlantic contrasting Mathematica and Jupyter: <em>open-source developers have flocked to Python because it happens to be the de facto standard for scientific computing. Programming-language communities, like any social network, thrive\u2014or die\u2014on the strength of these feedback loops</em>. <a href=\"https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/\">https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/ </a></li>\n</ul>\n\n<p>Quotes: </p>\n\n<p><em>Jupyter is a new open-source alternative [to Mathmatica] that is well on the way to becoming a standard for exchanging research results.</em></p>\n\n<p><em>Python libraries let me replicate everything I wanted to do with Mathematica: Matplotlib for graphics, SymPy for symbolic math, NumPy and SciPy for numerical calculations, Pandas for data, and NLTK for natural language processing. Jupyter makes it easy to use Latex to display typeset math. With Matplotlib, Latex works even in the label text for graphs. (I have not yet tried the major update, JupyterLab, which is still in beta testing.)</em>\n<em>I\u2019m more productive. I\u2019m having fun.</em>\n<a href=\"https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/\">https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/</a></p>\n\n<p><strong>Michael</strong> <strong>#3:</strong> <a href=\"https://www.jetbrains.com/research/python-developers-survey-2017/\"><strong>Python Developers Survey 2017 Results</strong></a></p>\n\n<ul>\n<li>At the very end of 2017, JetBrains &amp; The PSF teamed up to build a solid picture of the modern Python developer</li>\n<li>Here are some take-aways\n<ul>\n<li>Almost 4 out of 5 Python developers use it as their main language, while for 21% it\u2019s only a secondary language.</li>\n<li>Data analysis is as popular as web development with Python: Web development is the only category with a large gap (54% vs 33%) separating those using Python as their main language vs as a supplementary language. For other types of development, the differences are far less significant.</li>\n<li>At 28% to 27% application, There are as many Python web developers as Python data scientists</li>\n<li>Python 3 vs Python 2: 75% to 25% and accelerating</li>\n<li>Top Cloud Platform(s)\n<ul>\n<li>67%: AWS</li>\n<li>29%: Google App Engine</li>\n<li>26%: Heroku</li>\n<li>23%: DigitalOcean</li>\n<li>16%: Microsoft Azure</li>\n</ul></li>\n<li>Team Size\n<ul>\n<li>74%: 2-7 people</li>\n<li>16%: 8-12 people</li>\n<li>5%: 13-20 people</li>\n<li>2%: 21-40 people</li>\n<li>2%: &gt; 40 people</li>\n</ul></li>\n<li>Operating Systems\n<ul>\n<li>49%: Windows</li>\n<li>19%: Linux</li>\n<li>15%: MacOS</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong><em>*</a><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"></strong>EdgeDB: A New Beginning</em>*</a>\nThis is \u201cnews you can\u2019t use\u201d so far, because the product isn\u2019t here yet. So why am I excited and interested in this:</p>\n\n<ul>\n<li>It\u2019s from Elvis <a href=\"https://twitter.com/elprans\"><strong>@</strong></a><a href=\"https://twitter.com/elprans\">elprans</a> and Yury <a href=\"https://twitter.com/1st1\"><strong>@</strong></a><a href=\"https://twitter.com/1st1\">1st1</a>, who have brought us asyncio and uvloop</li>\n<li>It\u2019s not just a relational DB, it\u2019s a DB based on PostgreSQL but with an entire new way to specify schema and interact with it.</li>\n<li>Goal is to be fast, user friendly, and remove the need for ORMs</li>\n</ul>\n\n<p><strong>Matt</strong> <strong>#5:</strong> <a href=\"http://www.scikit-yb.org/en/latest/\"><strong>Yellowbrick library</strong></a> </p>\n\n<ul>\n<li>Visualization is important, I\u2019ve found bugs by plotting before. Also important in evaluation of machine learning projects</li>\n<li>This is a project that has been around for about two years. I\u2019ve recently adopted it in place of some home grown libraries for some consulting projects and in my corporate training</li>\n<li>Yellowbrick offers visualization for:\n<ul>\n<li>Features</li>\n<li>Classification</li>\n<li>Regression</li>\n<li>Clustering</li>\n<li>Text</li>\n</ul></li>\n<li>Like sk-learn, uses a similar api (.fit, .transform, .poof (plot))</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/Jflick58/DepressionAI\"><strong>Depression AI</strong></a></p>\n\n<ul>\n<li>Alexa skill for people suffering with depression. </li>\n<li>Alexa <a href=\"https://www.amazon.com/Depression-AI/dp/B079N6WR6Y/ref=sr_1_1?s=digital-skills&amp;ie=UTF8&amp;qid=1522775645&amp;sr=1-1&amp;keywords=depression+ai\">store listing</a></li>\n<li>Based on <a href=\"https://github.com/johnwheeler/flask-ask\">Flask-Ask</a>\n<ul>\n<li>Discussed on <a href=\"https://talkpython.fm/episodes/show/146/building-alexa-skills-with-python-and-flask\">Talk Python 146</a></li>\n</ul></li>\n<li>Valley Hackathon 2018 winner</li>\n<li>71% of people who make their bed in the morning report feeling happy. This was the inspiration behind DepressionAI. </li>\n<li>The aim behind this skill is to encourage people to perform daily activities that become very difficult when one is depressed.</li>\n<li>The skill detects positive and negative moods. </li>\n<li>If the user is having a bad day, it asks them a series of questions about what they have done that day (e.g. \"Have you gotten out of bed?\") and if they haven't, it encourages them to do so.</li>\n<li>Features\n<ul>\n<li>Mood evaluation by a highly empathetic Alexa bot</li>\n<li>Suicidal intention detection and prevention attempt</li>\n<li>Location-based therapy reccomendations</li>\n<li>Suggestions for small activites to improve the user's mood</li>\n<li>Displays informative cards in the Alexa app</li>\n</ul></li>\n<li>Sample Phrases\n<ul>\n<li>\u201cAlexa, check on me.\"</li>\n<li>\"I feel down.\"</li>\n<li>\"I haven't got out of bed today.\"</li>\n<li>\"Help me feel better.\"</li>\n<li>\"Help me find a therapist\"</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Special guest: Matt Harrison -</strong> <a href=\"https://twitter.com/__mharrison__\"><strong>__mharrison__</strong></a></p>\n\n<p><strong>Brian #1: Contributing to Open Source effectively</strong>\nThe mechanics and conventions on how to contribute to open source projects can be confusing. After seeing a <a href=\"https://github.com/okken/cards/pull/31\">very well documented pull request</a> that started with <code>[WIP]</code> in the subject line when it was first submitted, I tried to find out more about the conventions and mechanics of it all. I\u2019m still learning, but here are a couple of resources:</p>\n\n<ul>\n<li><a href=\"https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/\">How to write the perfect pull request</a> is more of a mindset of how to initiate and receive PRs\n<ul>\n<li>Approach to writing a Pull Request, including that [WIP] trick.</li>\n<li>Offering feedback</li>\n<li>Responding to feedback</li>\n</ul></li>\n<li><a href=\"https://pragprog.com/book/vbopens/forge-your-future-with-open-source\">Forge Your Future with Open Source</a>, <a href=\"https://twitter.com/vmbrasseur\"><strong>@</strong></a><a href=\"https://twitter.com/vmbrasseur\">vmbrasseur</a> book on contributing to open source, includes:\n<ul>\n<li>Make a Contribution, which includes PRs</li>\n<li>Make a difference without making a pull request, which is suggests many ways to contribute to a project without contributing code, like reviewing others contributions, testing, triaging bugs, \u2026</li>\n<li>Interacting with the community.</li>\n</ul></li>\n</ul>\n\n<p><strong>Matt #2:</strong> <strong>Jupyter, Mathematica, and the Future of the Research Paper</strong></p>\n\n<ul>\n<li>Paul Romer, economy professor at NYU</li>\n<li>As a longtime Linux user there was constantly the question of the \u201cyear of the Linux Desktop\u201d. Maybe this is the year of the \u201cJupyter desktop\u201d (also beta version of JupyterLab). Not just a tool for innovators or early adopters</li>\n<li>Refers to Article in Atlantic contrasting Mathematica and Jupyter: <em>open-source developers have flocked to Python because it happens to be the de facto standard for scientific computing. Programming-language communities, like any social network, thrive\u2014or die\u2014on the strength of these feedback loops</em>. <a href=\"https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/\">https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/ </a></li>\n</ul>\n\n<p>Quotes: </p>\n\n<p><em>Jupyter is a new open-source alternative [to Mathmatica] that is well on the way to becoming a standard for exchanging research results.</em></p>\n\n<p><em>Python libraries let me replicate everything I wanted to do with Mathematica: Matplotlib for graphics, SymPy for symbolic math, NumPy and SciPy for numerical calculations, Pandas for data, and NLTK for natural language processing. Jupyter makes it easy to use Latex to display typeset math. With Matplotlib, Latex works even in the label text for graphs. (I have not yet tried the major update, JupyterLab, which is still in beta testing.)</em>\n<em>I\u2019m more productive. I\u2019m having fun.</em>\n<a href=\"https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/\">https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/</a></p>\n\n<p><strong>Michael</strong> <strong>#3:</strong> <a href=\"https://www.jetbrains.com/research/python-developers-survey-2017/\"><strong>Python Developers Survey 2017 Results</strong></a></p>\n\n<ul>\n<li>At the very end of 2017, JetBrains &amp; The PSF teamed up to build a solid picture of the modern Python developer</li>\n<li>Here are some take-aways\n<ul>\n<li>Almost 4 out of 5 Python developers use it as their main language, while for 21% it\u2019s only a secondary language.</li>\n<li>Data analysis is as popular as web development with Python: Web development is the only category with a large gap (54% vs 33%) separating those using Python as their main language vs as a supplementary language. For other types of development, the differences are far less significant.</li>\n<li>At 28% to 27% application, There are as many Python web developers as Python data scientists</li>\n<li>Python 3 vs Python 2: 75% to 25% and accelerating</li>\n<li>Top Cloud Platform(s)\n<ul>\n<li>67%: AWS</li>\n<li>29%: Google App Engine</li>\n<li>26%: Heroku</li>\n<li>23%: DigitalOcean</li>\n<li>16%: Microsoft Azure</li>\n</ul></li>\n<li>Team Size\n<ul>\n<li>74%: 2-7 people</li>\n<li>16%: 8-12 people</li>\n<li>5%: 13-20 people</li>\n<li>2%: 21-40 people</li>\n<li>2%: &gt; 40 people</li>\n</ul></li>\n<li>Operating Systems\n<ul>\n<li>49%: Windows</li>\n<li>19%: Linux</li>\n<li>15%: MacOS</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #4</strong><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong>:</strong></a> <a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"><strong><em>*</a><a href=\"https://edgedb.com/blog/edgedb-a-new-beginning\"></strong>EdgeDB: A New Beginning</em>*</a>\nThis is \u201cnews you can\u2019t use\u201d so far, because the product isn\u2019t here yet. So why am I excited and interested in this:</p>\n\n<ul>\n<li>It\u2019s from Elvis <a href=\"https://twitter.com/elprans\"><strong>@</strong></a><a href=\"https://twitter.com/elprans\">elprans</a> and Yury <a href=\"https://twitter.com/1st1\"><strong>@</strong></a><a href=\"https://twitter.com/1st1\">1st1</a>, who have brought us asyncio and uvloop</li>\n<li>It\u2019s not just a relational DB, it\u2019s a DB based on PostgreSQL but with an entire new way to specify schema and interact with it.</li>\n<li>Goal is to be fast, user friendly, and remove the need for ORMs</li>\n</ul>\n\n<p><strong>Matt</strong> <strong>#5:</strong> <a href=\"http://www.scikit-yb.org/en/latest/\"><strong>Yellowbrick library</strong></a> </p>\n\n<ul>\n<li>Visualization is important, I\u2019ve found bugs by plotting before. Also important in evaluation of machine learning projects</li>\n<li>This is a project that has been around for about two years. I\u2019ve recently adopted it in place of some home grown libraries for some consulting projects and in my corporate training</li>\n<li>Yellowbrick offers visualization for:\n<ul>\n<li>Features</li>\n<li>Classification</li>\n<li>Regression</li>\n<li>Clustering</li>\n<li>Text</li>\n</ul></li>\n<li>Like sk-learn, uses a similar api (.fit, .transform, .poof (plot))</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/Jflick58/DepressionAI\"><strong>Depression AI</strong></a></p>\n\n<ul>\n<li>Alexa skill for people suffering with depression. </li>\n<li>Alexa <a href=\"https://www.amazon.com/Depression-AI/dp/B079N6WR6Y/ref=sr_1_1?s=digital-skills&amp;ie=UTF8&amp;qid=1522775645&amp;sr=1-1&amp;keywords=depression+ai\">store listing</a></li>\n<li>Based on <a href=\"https://github.com/johnwheeler/flask-ask\">Flask-Ask</a>\n<ul>\n<li>Discussed on <a href=\"https://talkpython.fm/episodes/show/146/building-alexa-skills-with-python-and-flask\">Talk Python 146</a></li>\n</ul></li>\n<li>Valley Hackathon 2018 winner</li>\n<li>71% of people who make their bed in the morning report feeling happy. This was the inspiration behind DepressionAI. </li>\n<li>The aim behind this skill is to encourage people to perform daily activities that become very difficult when one is depressed.</li>\n<li>The skill detects positive and negative moods. </li>\n<li>If the user is having a bad day, it asks them a series of questions about what they have done that day (e.g. \"Have you gotten out of bed?\") and if they haven't, it encourages them to do so.</li>\n<li>Features\n<ul>\n<li>Mood evaluation by a highly empathetic Alexa bot</li>\n<li>Suicidal intention detection and prevention attempt</li>\n<li>Location-based therapy reccomendations</li>\n<li>Suggestions for small activites to improve the user's mood</li>\n<li>Displays informative cards in the Alexa app</li>\n</ul></li>\n<li>Sample Phrases\n<ul>\n<li>\u201cAlexa, check on me.\"</li>\n<li>\"I feel down.\"</li>\n<li>\"I haven't got out of bed today.\"</li>\n<li>\"Help me feel better.\"</li>\n<li>\"Help me find a therapist\"</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 19 Apr 2018 00:00:00 -0800", "published_parsed": [2018, 4, 19, 8, 0, 0, 3, 109, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Contributing to Open Source effectively", "itunes_episode": "74", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:51"}}, "#73 This podcast comes in any color you want, as long as it's black": {"info": {"title": "#73 This podcast comes in any color you want, as long as it's black", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#73 This podcast comes in any color you want, as long as it's black"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black"}, {"length": "8208388", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black", "id": "https://pythonbytes.fm/episodes/e14d3f94-a4b1-4a78-bdd5-7dc13e4d07fc", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://www.idiotinside.com/2017/08/19/set-theory-and-python-tips-tricks/\"><strong>Set Theory and Python</strong></a></p>\n\n<ul>\n<li>\u201cLet\u2019s talk about sets, baby \u2026\u201d is what I have in my head while reading this.</li>\n<li>Great overview of set theory and how to use the set data type in Python.</li>\n<li>Covered:\n<ul>\n<li>Creating sets</li>\n<li>Checking for containment (in, not in)</li>\n<li>union : set of things in either set or in both</li>\n<li>intersection: set of things in 2 sets</li>\n<li>difference: set of things in one set but not the other</li>\n<li>symmetric difference: set of things in either set but not in both</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://trio.readthedocs.io/en/latest/index.html\"><strong>Trio: async programming for humans and snake people</strong></a></p>\n\n<ul>\n<li>The Trio project\u2019s goal is to produce a production-quality, permissively licensed, async/await-native I/O library for Python. Like all async libraries, its main purpose is to help you write programs that do multiple things at the same time with parallelized I/O. </li>\n<li>Compared to other libraries, Trio attempts to distinguish itself with an obsessive focus on usability and correctness. </li>\n<li>Concurrency is complicated; we try to make it easy to get things right.</li>\n<li>Trio was built from the ground up to take advantage of the latest Python features</li>\n<li>Inspiration from <a href=\"https://github.com/python-trio/trio/wiki/Reading-list\">many sources</a>, in particular Dave Beazley\u2019s <a href=\"https://curio.readthedocs.io/\">Curio</a></li>\n<li>Resulting design is radically simpler than older competitors like asyncio and Twisted, yet just as capable.</li>\n<li>We <em>do</em> encourage you do use it, but you should <a href=\"https://github.com/python-trio/trio/issues/1\">read and subscribe to issue #1</a> to get warning and a chance to give feedback about any compatibility-breaking changes.</li>\n<li>Excellent scalability: trio can run 10,000+ tasks simultaneously without breaking a sweat, so long as their total CPU demands don\u2019t exceed what a single core can provide.</li>\n<li>Supports Python 3.5+ and PyPy</li>\n<li>Uses</li>\n</ul>\n\n<pre><code>    trio.run(async_method, 3)\n    trio.sleep(1.5) # Sleep, non-blocking\n\n    async with trio.open_nursery() as nursery:\n        print(\"parent: spawning child...\")\n        nursery.start_soon(child_func1)\n        print(\"parent: spawning child...\")\n        nursery.start_soon(child_func2)\n        print(\"parent: waiting for children to finish...\")\n        # -- we exit the nursery block here --\n    print(\"parent: child_func1 and child_func2 done!\")\n</code></pre>\n\n<ul>\n<li>trio provides a <a href=\"https://trio.readthedocs.io/en/latest/reference-hazmat.html#instrumentation\">rich set of tools for inspecting and debugging your programs</a>.</li>\n<li>Consider <a href=\"https://github.com/python-trio/trio-asyncio\">trio-asyncio</a> for compatibility</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/ambv/black\"><strong>black: The uncompromising Python code formatter</strong></a></p>\n\n<ul>\n<li><p>An amusing take on code formatting. From the readme:</p>\n\n<ul>\n<li>\u201c<em>Black</em> is the uncompromising Python code formatter. By using it, you agree to cease control over minutiae of hand-formatting. In return, <em>Black</em> gives you speed, determinism, and freedom from <code>pycodestyle</code> nagging about formatting. You will save time and mental energy for more important matters.\u201d</li>\n<li>\u201cBlackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead.\u201d</li>\n<li>\u201c<em>Black</em> makes code review faster by producing the smallest diffs possible.\u201d</li>\n</ul></li>\n<li><p>Datadog is a monitoring solution that provides deep visibility and tracks down issues quickly with distributed tracing for your Python apps.</p></li>\n<li>Within minutes, you'll be able to investigate bottlenecks in your code by exploring interactive flame graphs and rich dashboards.</li>\n<li>Visualize your Python performance today, get started with a free trial with Datadog and they'll send you a free T-shirt.</li>\n</ul>\n\n<p>See for yourself, visit pythonbytes.fm/datadog. </p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/gaojiuli/gain\"><strong>gain: Web crawling framework based on asyncio</strong></a></p>\n\n<ul>\n<li>Web crawling framework for everyone. Written with asyncio, uvloop and aiohttp.</li>\n<li>Simple and mostly automated\n<ul>\n<li>Define class mapped to CSS selectors and data to save</li>\n<li>Concurrently level</li>\n<li>Start URL</li>\n<li>Page templates to match URLs</li>\n<li>Run</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://rafiqul.rocks/generic-function-in-python-with-singledispatch/\"><strong>Generic Function in Python with Singledispatch</strong></a></p>\n\n<ul>\n<li>\u201cImagine, you can write different implementations of a function of the same name in the same scope, depending on the types of arguments. Wouldn\u2019t it be great? Of course, it would be. There is a term for this. It is called \u201cGeneric Function\u201d. Python recently added support for generic function in Python 3.4 (<a href=\"https://www.python.org/dev/peps/pep-0443/\">PEP 443</a>). They did this to the <code>functools</code> module by adding <code>@singledispatch</code> decorator.\u201d</li>\n<li>For people less familiar with \u201cgeneric functions\u201d. I think of this as providing similar functionality as C++\u2019s function overloading.</li>\n<li>Allows you do things like this (full code example is in the article):</li>\n</ul>\n\n<pre><code>    from functools import singledispatch\n\n    @singledispatch\n    def fprint(data):\n        \"code for default functionality\"\n\n    @fprint.register(list)\n    @fprint.register(set)\n    @fprint.register(tuple)\n    def _(data):\n        \"code for list, set, tuple\"\n\n    @fprint.register(dict)\n    def _(data):\n        \"code for dict\"\n</code></pre>\n\n<p>More complete code example: </p>\n\n<pre><code>    from functools import singledispatch\n\n    @singledispatch\n    def fprint(data):\n        print(f'({type(data).__name__}) {data}')\n\n    @fprint.register(list)\n    @fprint.register(set)\n    @fprint.register(tuple)\n    def _(data):\n        formatted_header = f'{type(data).__name__} -&gt; index : value'\n        print(formatted_header)\n        print('-' * len(formatted_header))\n        for index, value in enumerate(data):\n            print(f'{index} : ({type(value).__name__}) {value}')\n\n    @fprint.register(dict)\n    def _(data):\n        formatted_header = f'{type(data).__name__} -&gt; key : value'\n        print(formatted_header)\n        print('-' * len(formatted_header))\n        for key, value in data.items():\n            print(f'({type(key).__name__}) {key}: ({type(value).__name__}) {value}')\n\n    # &gt;&gt;&gt; fprint('hello')\n    # (str) hello\n\n    # &gt;&gt;&gt; fprint(21)\n    # (int) 21\n\n    #...\n\n    # &gt;&gt;&gt; fprint({'name': 'John Doe', 'age': 32, 'location': 'New York'})\n    # dict -&gt; key : value\n    # -------------------\n    # (str) name: (str) John Doe\n    # (str) age: (int) 32\n    # (str) location: (str) New York\n</code></pre>\n\n<p><strong>Michael #6:</strong> <a href=\"http://asherman.io/projects/unsync.html\"><strong>Unsync: Unsynchronizing async/await in Python 3.6</strong></a></p>\n\n<ul>\n<li>A rant about async/await in Python (by Alex Sherman)</li>\n<li>What\u2019s wrong?\n<ul>\n<li>The two big friction points I\u2019ve had are:\n<ul>\n<li>Difficult to \u201cfire and forget\u201d async calls (need to specifically run the event loop)</li>\n<li>Can\u2019t do blocking calls to asyncio.Future.result() (it throws an exception)</li>\n</ul></li>\n<li>We need to acquire an even loop, do some weird call to execute the async function in that event loop, and then synchronously execute the event loop ourselves. </li>\n</ul></li>\n<li>What can we do?\n<ul>\n<li>C# had this great idea of executing each Task (their version of a Future) first synchronously in the main thread until an await is hit, and then queueing it into an ambient thread pool to continue later possibly in a separate thread. </li>\n<li>Python did not take this approach and my hunch is that the Python maintainers didn\u2019t want to add an ambient thread pool to their language (which makes sense). </li>\n<li>Alex, however, is not the Python maintainers and did add an ambient thread (singular). I stuffed all the boiler plate into a decorator and the result looks like this:</li>\n</ul></li>\n</ul>\n\n<pre><code>    @unsync\n    async def unsync_async():\n        await asyncio.sleep(0.1)\n        return 'I like decorators'\n\n    print(unsync_async().result())\n</code></pre>\n\n<ul>\n<li>using @unsync on a regular function (not an async one) will cause it to be executed in a ThreadPoolExecutor. </li>\n<li>To support CPU bound workloads, you can use @unsync(cpu_bound=True) to decorate functions which will be executed in a ProcessPoolExecutor</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>fm</strong></a><a href=\"https://pythonbytes.fm/datadog\"><strong>/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://www.idiotinside.com/2017/08/19/set-theory-and-python-tips-tricks/\"><strong>Set Theory and Python</strong></a></p>\n\n<ul>\n<li>\u201cLet\u2019s talk about sets, baby \u2026\u201d is what I have in my head while reading this.</li>\n<li>Great overview of set theory and how to use the set data type in Python.</li>\n<li>Covered:\n<ul>\n<li>Creating sets</li>\n<li>Checking for containment (in, not in)</li>\n<li>union : set of things in either set or in both</li>\n<li>intersection: set of things in 2 sets</li>\n<li>difference: set of things in one set but not the other</li>\n<li>symmetric difference: set of things in either set but not in both</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://trio.readthedocs.io/en/latest/index.html\"><strong>Trio: async programming for humans and snake people</strong></a></p>\n\n<ul>\n<li>The Trio project\u2019s goal is to produce a production-quality, permissively licensed, async/await-native I/O library for Python. Like all async libraries, its main purpose is to help you write programs that do multiple things at the same time with parallelized I/O. </li>\n<li>Compared to other libraries, Trio attempts to distinguish itself with an obsessive focus on usability and correctness. </li>\n<li>Concurrency is complicated; we try to make it easy to get things right.</li>\n<li>Trio was built from the ground up to take advantage of the latest Python features</li>\n<li>Inspiration from <a href=\"https://github.com/python-trio/trio/wiki/Reading-list\">many sources</a>, in particular Dave Beazley\u2019s <a href=\"https://curio.readthedocs.io/\">Curio</a></li>\n<li>Resulting design is radically simpler than older competitors like asyncio and Twisted, yet just as capable.</li>\n<li>We <em>do</em> encourage you do use it, but you should <a href=\"https://github.com/python-trio/trio/issues/1\">read and subscribe to issue #1</a> to get warning and a chance to give feedback about any compatibility-breaking changes.</li>\n<li>Excellent scalability: trio can run 10,000+ tasks simultaneously without breaking a sweat, so long as their total CPU demands don\u2019t exceed what a single core can provide.</li>\n<li>Supports Python 3.5+ and PyPy</li>\n<li>Uses</li>\n</ul>\n\n<pre><code>    trio.run(async_method, 3)\n    trio.sleep(1.5) # Sleep, non-blocking\n\n    async with trio.open_nursery() as nursery:\n        print(\"parent: spawning child...\")\n        nursery.start_soon(child_func1)\n        print(\"parent: spawning child...\")\n        nursery.start_soon(child_func2)\n        print(\"parent: waiting for children to finish...\")\n        # -- we exit the nursery block here --\n    print(\"parent: child_func1 and child_func2 done!\")\n</code></pre>\n\n<ul>\n<li>trio provides a <a href=\"https://trio.readthedocs.io/en/latest/reference-hazmat.html#instrumentation\">rich set of tools for inspecting and debugging your programs</a>.</li>\n<li>Consider <a href=\"https://github.com/python-trio/trio-asyncio\">trio-asyncio</a> for compatibility</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/ambv/black\"><strong>black: The uncompromising Python code formatter</strong></a></p>\n\n<ul>\n<li><p>An amusing take on code formatting. From the readme:</p>\n\n<ul>\n<li>\u201c<em>Black</em> is the uncompromising Python code formatter. By using it, you agree to cease control over minutiae of hand-formatting. In return, <em>Black</em> gives you speed, determinism, and freedom from <code>pycodestyle</code> nagging about formatting. You will save time and mental energy for more important matters.\u201d</li>\n<li>\u201cBlackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead.\u201d</li>\n<li>\u201c<em>Black</em> makes code review faster by producing the smallest diffs possible.\u201d</li>\n</ul></li>\n<li><p>Datadog is a monitoring solution that provides deep visibility and tracks down issues quickly with distributed tracing for your Python apps.</p></li>\n<li>Within minutes, you'll be able to investigate bottlenecks in your code by exploring interactive flame graphs and rich dashboards.</li>\n<li>Visualize your Python performance today, get started with a free trial with Datadog and they'll send you a free T-shirt.</li>\n</ul>\n\n<p>See for yourself, visit pythonbytes.fm/datadog. </p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/gaojiuli/gain\"><strong>gain: Web crawling framework based on asyncio</strong></a></p>\n\n<ul>\n<li>Web crawling framework for everyone. Written with asyncio, uvloop and aiohttp.</li>\n<li>Simple and mostly automated\n<ul>\n<li>Define class mapped to CSS selectors and data to save</li>\n<li>Concurrently level</li>\n<li>Start URL</li>\n<li>Page templates to match URLs</li>\n<li>Run</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://rafiqul.rocks/generic-function-in-python-with-singledispatch/\"><strong>Generic Function in Python with Singledispatch</strong></a></p>\n\n<ul>\n<li>\u201cImagine, you can write different implementations of a function of the same name in the same scope, depending on the types of arguments. Wouldn\u2019t it be great? Of course, it would be. There is a term for this. It is called \u201cGeneric Function\u201d. Python recently added support for generic function in Python 3.4 (<a href=\"https://www.python.org/dev/peps/pep-0443/\">PEP 443</a>). They did this to the <code>functools</code> module by adding <code>@singledispatch</code> decorator.\u201d</li>\n<li>For people less familiar with \u201cgeneric functions\u201d. I think of this as providing similar functionality as C++\u2019s function overloading.</li>\n<li>Allows you do things like this (full code example is in the article):</li>\n</ul>\n\n<pre><code>    from functools import singledispatch\n\n    @singledispatch\n    def fprint(data):\n        \"code for default functionality\"\n\n    @fprint.register(list)\n    @fprint.register(set)\n    @fprint.register(tuple)\n    def _(data):\n        \"code for list, set, tuple\"\n\n    @fprint.register(dict)\n    def _(data):\n        \"code for dict\"\n</code></pre>\n\n<p>More complete code example: </p>\n\n<pre><code>    from functools import singledispatch\n\n    @singledispatch\n    def fprint(data):\n        print(f'({type(data).__name__}) {data}')\n\n    @fprint.register(list)\n    @fprint.register(set)\n    @fprint.register(tuple)\n    def _(data):\n        formatted_header = f'{type(data).__name__} -&gt; index : value'\n        print(formatted_header)\n        print('-' * len(formatted_header))\n        for index, value in enumerate(data):\n            print(f'{index} : ({type(value).__name__}) {value}')\n\n    @fprint.register(dict)\n    def _(data):\n        formatted_header = f'{type(data).__name__} -&gt; key : value'\n        print(formatted_header)\n        print('-' * len(formatted_header))\n        for key, value in data.items():\n            print(f'({type(key).__name__}) {key}: ({type(value).__name__}) {value}')\n\n    # &gt;&gt;&gt; fprint('hello')\n    # (str) hello\n\n    # &gt;&gt;&gt; fprint(21)\n    # (int) 21\n\n    #...\n\n    # &gt;&gt;&gt; fprint({'name': 'John Doe', 'age': 32, 'location': 'New York'})\n    # dict -&gt; key : value\n    # -------------------\n    # (str) name: (str) John Doe\n    # (str) age: (int) 32\n    # (str) location: (str) New York\n</code></pre>\n\n<p><strong>Michael #6:</strong> <a href=\"http://asherman.io/projects/unsync.html\"><strong>Unsync: Unsynchronizing async/await in Python 3.6</strong></a></p>\n\n<ul>\n<li>A rant about async/await in Python (by Alex Sherman)</li>\n<li>What\u2019s wrong?\n<ul>\n<li>The two big friction points I\u2019ve had are:\n<ul>\n<li>Difficult to \u201cfire and forget\u201d async calls (need to specifically run the event loop)</li>\n<li>Can\u2019t do blocking calls to asyncio.Future.result() (it throws an exception)</li>\n</ul></li>\n<li>We need to acquire an even loop, do some weird call to execute the async function in that event loop, and then synchronously execute the event loop ourselves. </li>\n</ul></li>\n<li>What can we do?\n<ul>\n<li>C# had this great idea of executing each Task (their version of a Future) first synchronously in the main thread until an await is hit, and then queueing it into an ambient thread pool to continue later possibly in a separate thread. </li>\n<li>Python did not take this approach and my hunch is that the Python maintainers didn\u2019t want to add an ambient thread pool to their language (which makes sense). </li>\n<li>Alex, however, is not the Python maintainers and did add an ambient thread (singular). I stuffed all the boiler plate into a decorator and the result looks like this:</li>\n</ul></li>\n</ul>\n\n<pre><code>    @unsync\n    async def unsync_async():\n        await asyncio.sleep(0.1)\n        return 'I like decorators'\n\n    print(unsync_async().result())\n</code></pre>\n\n<ul>\n<li>using @unsync on a regular function (not an async one) will cause it to be executed in a ThreadPoolExecutor. </li>\n<li>To support CPU bound workloads, you can use @unsync(cpu_bound=True) to decorate functions which will be executed in a ProcessPoolExecutor</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 12 Apr 2018 00:00:00 -0800", "published_parsed": [2018, 4, 12, 8, 0, 0, 3, 102, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "This podcast comes in any color you want, as long as it's black", "itunes_episode": "73", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:18:35"}}, "#72 New versioning: Episode 0.0.7.2 (with 72 releases)": {"info": {"title": "#72 New versioning: Episode 0.0.7.2 (with 72 releases)", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#72 New versioning: Episode 0.0.7.2 (with 72 releases)"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/72/new-versioning-episode-0.0.7.2-with-72-releases"}, {"length": "10302499", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/72/new-versioning-episode-0.0.7.2-with-72-releases.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/72/new-versioning-episode-0.0.7.2-with-72-releases", "id": "https://pythonbytes.fm/episodes/08463d77-0b65-49e3-91d5-b7a4a410449c", "guidislink": false, "summary": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.fm/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://0ver.org/\"><strong>ZeroVer: 0-based Versioning</strong></a></p>\n\n<ul>\n<li>\u201cSoftware's most popular versioning scheme!\u201d</li>\n<li>\u201c<em>Cutting-edge software versioning for minimalists\u201d</em></li>\n<li>My favorite April Fools prank this year.\n<ul>\n<li>Calls out many popular projects for never reaching 1.0</li>\n</ul></li>\n<li>From the about page: \n<ul>\n<li>\u201cZeroVer is the world's most popular software versioning convention, and the only one shown to harness the innovative power of zero. The benefits are innumerable and the effects on the software world are profound.\u201d</li>\n<li>\u201cVersion 0.0.1 of ZeroVer was published by <a href=\"https://github.com/mahmoud/\">Mahmoud Hashemi</a>, with help from Moshe, Mark, Kurt, and other patient collaborators, on 2018-04-01. ZeroVer is satire, <a href=\"https://en.wikipedia.org/wiki/Poe%27s_law\">please do not use it</a>. We sincerely hope no project release schedules were harmed as a result of this humble attempt at programmer humor.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.infoq.com/news/2018/03/github-vulnerability-alerts-resp\"><strong>GitHub Security Alerts Detected over Four Million Vulnerabilities</strong></a></p>\n\n<ul>\n<li>Last year GitHub launched \u201cGitHub security alerts\u201d</li>\n<li>GitHub\u2019s security alerts notify repository admins when library vulnerabilities from the Common Vulnerabilities and Exposures (CVEs) list are detected in their repositories. </li>\n<li>Nearly half of all displayed alerts are responded to within a week and the rate of vulnerabilities resolved in the first seven days has been about 30%. </li>\n<li>When that statistics is restricted to only repositories with recent contributions, i.e., contributions in the last 90 days, things look even brighter, GitHub says, with 98% of such repositories being patched in fewer than seven days. </li>\n<li>More than four million vulnerabilities in over 500,000 repositories have been reported.</li>\n<li>Security alerts are only currently supported for repositories written in Ruby or JavaScript, while support for Python is planned for 2018.</li>\n<li>I also recommend <a href=\"http://pyup.io\">pyup.io</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi\"><strong>Markdown Descriptions on PyPI</strong></a></p>\n\n<ul>\n<li>Dustin Ingram provides detailed steps on how to get this to work.</li>\n<li>README.md now supported by pypi.org\n<ul>\n<li>\u201cOnly <a href=\"https://pypi.org/\">https://pypi.org</a> will correctly render your new Markdown description.</li>\n<li>Legacy PyPI (<a href=\"http://pypi.python.org/\">http://pypi.python.org/</a>) will still render your description as plaintext, but don\u2019t worry, <a href=\"https://wiki.python.org/psf/WarehouseRoadmap\">it\u2019s going away real soon</a>.</li>\n</ul></li>\n<li>And also,  <a href=\"http://blog.jonparrott.com/github-flavored-markdown-on-pypi/\">Github-Flavored Markdown Descriptions are supported</a>.\n<ul>\n<li>Another post, this one by Jon Wayne Parrot</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c\"><strong>Concurrency comparison between NGINX-unit and uWSGI</strong></a></p>\n\n<ul>\n<li>show performance of two web application servers \n<ul>\n<li>nginx-unit (a new modern application web server)</li>\n<li>uWSGI (the best one application server)</li>\n</ul></li>\n<li>uWSGI and nginx-unit configured with 4 workers because test system has 4 cores.</li>\n<li>Effectively an empty \u201cHello world\u201d Flask app</li>\n<li>Have a look at the pictures here: https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c</li>\n<li>Take away: I\u2019m going to start paying attention to NGINX-unit</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python\"><strong>Loop better: A deeper look at iteration in Python</strong></a></p>\n\n<ul>\n<li>via Trey Hunner</li>\n<li>Generators are a great way to loop, but have a few gotchas\n<ul>\n<li>Looping twice doesn\u2019t work</li>\n<li>Containment checks muck up the generator \u201ccontents\u201d.</li>\n<li>Unpacking has odd results.</li>\n</ul></li>\n<li>This article describes Python loops in detail and then applies that do describe why the gotchas act like they do.</li>\n<li>Covered:\n<ul>\n<li>iterators, iterables, sequences, generators</li>\n<li>the iterator protocol</li>\n</ul></li>\n<li>Reading this will make you a better programmer, but might hurt your head.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/\"><strong>Misconfigured Django Apps Are Exposing Secret API Keys, Database Passwords</strong></a></p>\n\n<ul>\n<li>Security researchers have been stumbling upon misconfigured Django applications that are exposing sensitive information such as API keys, server passwords, or AWS access tokens.</li>\n<li>He discovered 28,165 Django apps just this week where admins left debug mode enabled.</li>\n<li>Just by skimming through a few of the servers, the researcher found that the debug mode of many of these apps were exposing extremely sensitive information that would have allowed a malicious actor full access to the app owner's data. </li>\n<li>This is <strong>not a failure from Django's side</strong>. My recommendation is to disable debugging mode when deploying the application to production.</li>\n<li>Security researcher Victor Gevers said some of the servers running Django apps have already been compromised.</li>\n<li>He found at least one compromised server, running the Weevely web shell. Some servers Gevers found leaking sensitive data belonged to various government agencies carrying out critical operations.</li>\n<li>Gevers said he started notifying servers owners about their leaky Django apps. \"At this moment we have reported 1,822 servers,\" Gevers said. \"143 were fixed or taken offline.\"</li>\n</ul>\n\n<p><strong>Extra:</strong></p>\n\n<ul>\n<li>We covered wagtail on <a href=\"https://pythonbytes.fm/70\">episode 70</a>. They are running <a href=\"https://www.kickstarter.com/projects/noripyt/wagtails-first-hatch\">a kickstarter campaign</a> to get some new features out. There\u2019s a video there.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.fm/datadog</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://0ver.org/\"><strong>ZeroVer: 0-based Versioning</strong></a></p>\n\n<ul>\n<li>\u201cSoftware's most popular versioning scheme!\u201d</li>\n<li>\u201c<em>Cutting-edge software versioning for minimalists\u201d</em></li>\n<li>My favorite April Fools prank this year.\n<ul>\n<li>Calls out many popular projects for never reaching 1.0</li>\n</ul></li>\n<li>From the about page: \n<ul>\n<li>\u201cZeroVer is the world's most popular software versioning convention, and the only one shown to harness the innovative power of zero. The benefits are innumerable and the effects on the software world are profound.\u201d</li>\n<li>\u201cVersion 0.0.1 of ZeroVer was published by <a href=\"https://github.com/mahmoud/\">Mahmoud Hashemi</a>, with help from Moshe, Mark, Kurt, and other patient collaborators, on 2018-04-01. ZeroVer is satire, <a href=\"https://en.wikipedia.org/wiki/Poe%27s_law\">please do not use it</a>. We sincerely hope no project release schedules were harmed as a result of this humble attempt at programmer humor.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.infoq.com/news/2018/03/github-vulnerability-alerts-resp\"><strong>GitHub Security Alerts Detected over Four Million Vulnerabilities</strong></a></p>\n\n<ul>\n<li>Last year GitHub launched \u201cGitHub security alerts\u201d</li>\n<li>GitHub\u2019s security alerts notify repository admins when library vulnerabilities from the Common Vulnerabilities and Exposures (CVEs) list are detected in their repositories. </li>\n<li>Nearly half of all displayed alerts are responded to within a week and the rate of vulnerabilities resolved in the first seven days has been about 30%. </li>\n<li>When that statistics is restricted to only repositories with recent contributions, i.e., contributions in the last 90 days, things look even brighter, GitHub says, with 98% of such repositories being patched in fewer than seven days. </li>\n<li>More than four million vulnerabilities in over 500,000 repositories have been reported.</li>\n<li>Security alerts are only currently supported for repositories written in Ruby or JavaScript, while support for Python is planned for 2018.</li>\n<li>I also recommend <a href=\"http://pyup.io\">pyup.io</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi\"><strong>Markdown Descriptions on PyPI</strong></a></p>\n\n<ul>\n<li>Dustin Ingram provides detailed steps on how to get this to work.</li>\n<li>README.md now supported by pypi.org\n<ul>\n<li>\u201cOnly <a href=\"https://pypi.org/\">https://pypi.org</a> will correctly render your new Markdown description.</li>\n<li>Legacy PyPI (<a href=\"http://pypi.python.org/\">http://pypi.python.org/</a>) will still render your description as plaintext, but don\u2019t worry, <a href=\"https://wiki.python.org/psf/WarehouseRoadmap\">it\u2019s going away real soon</a>.</li>\n</ul></li>\n<li>And also,  <a href=\"http://blog.jonparrott.com/github-flavored-markdown-on-pypi/\">Github-Flavored Markdown Descriptions are supported</a>.\n<ul>\n<li>Another post, this one by Jon Wayne Parrot</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c\"><strong>Concurrency comparison between NGINX-unit and uWSGI</strong></a></p>\n\n<ul>\n<li>show performance of two web application servers \n<ul>\n<li>nginx-unit (a new modern application web server)</li>\n<li>uWSGI (the best one application server)</li>\n</ul></li>\n<li>uWSGI and nginx-unit configured with 4 workers because test system has 4 cores.</li>\n<li>Effectively an empty \u201cHello world\u201d Flask app</li>\n<li>Have a look at the pictures here: https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c</li>\n<li>Take away: I\u2019m going to start paying attention to NGINX-unit</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python\"><strong>Loop better: A deeper look at iteration in Python</strong></a></p>\n\n<ul>\n<li>via Trey Hunner</li>\n<li>Generators are a great way to loop, but have a few gotchas\n<ul>\n<li>Looping twice doesn\u2019t work</li>\n<li>Containment checks muck up the generator \u201ccontents\u201d.</li>\n<li>Unpacking has odd results.</li>\n</ul></li>\n<li>This article describes Python loops in detail and then applies that do describe why the gotchas act like they do.</li>\n<li>Covered:\n<ul>\n<li>iterators, iterables, sequences, generators</li>\n<li>the iterator protocol</li>\n</ul></li>\n<li>Reading this will make you a better programmer, but might hurt your head.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/\"><strong>Misconfigured Django Apps Are Exposing Secret API Keys, Database Passwords</strong></a></p>\n\n<ul>\n<li>Security researchers have been stumbling upon misconfigured Django applications that are exposing sensitive information such as API keys, server passwords, or AWS access tokens.</li>\n<li>He discovered 28,165 Django apps just this week where admins left debug mode enabled.</li>\n<li>Just by skimming through a few of the servers, the researcher found that the debug mode of many of these apps were exposing extremely sensitive information that would have allowed a malicious actor full access to the app owner's data. </li>\n<li>This is <strong>not a failure from Django's side</strong>. My recommendation is to disable debugging mode when deploying the application to production.</li>\n<li>Security researcher Victor Gevers said some of the servers running Django apps have already been compromised.</li>\n<li>He found at least one compromised server, running the Weevely web shell. Some servers Gevers found leaking sensitive data belonged to various government agencies carrying out critical operations.</li>\n<li>Gevers said he started notifying servers owners about their leaky Django apps. \"At this moment we have reported 1,822 servers,\" Gevers said. \"143 were fixed or taken offline.\"</li>\n</ul>\n\n<p><strong>Extra:</strong></p>\n\n<ul>\n<li>We covered wagtail on <a href=\"https://pythonbytes.fm/70\">episode 70</a>. They are running <a href=\"https://www.kickstarter.com/projects/noripyt/wagtails-first-hatch\">a kickstarter campaign</a> to get some new features out. There\u2019s a video there.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 05 Apr 2018 00:00:00 -0800", "published_parsed": [2018, 4, 5, 8, 0, 0, 3, 95, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "New versioning: Episode 0.0.7.2 (with 72 releases)", "itunes_episode": "72", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:54"}}, "#71 We can migrate to Python 3, careful please": {"info": {"title": "#71 We can migrate to Python 3, careful please", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#71 We can migrate to Python 3, careful please"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/71/we-can-migrate-to-python-3-careful-please"}, {"length": "10443651", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/71/we-can-migrate-to-python-3-careful-please.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/71/we-can-migrate-to-python-3-careful-please", "id": "https://pythonbytes.fm/episodes/db8d3bab-9430-4f10-9366-e68f49cb2a96", "guidislink": false, "summary": "<h1>Python Bytes 71</h1>\n\n<p>Sponsored by DigitalOcean: <strong><a href=\"https://do.co/python\">do.co/python</a></strong></p>\n\n<p>Special guest: Trey Hunner (<a href=\"https://twitter.com/treyhunner\"><strong>@treyhunner</strong></a>)</p>\n\n<p><strong>Trey #1:</strong> <a href=\"https://portingguide.readthedocs.io/en/latest/\"><strong>The Conservative Python 3 Porting Guide</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://github.com/fedora-python/portingguide/graphs/contributors\">various Red Hat folks</a> mostly</li>\n<li>Python 2 is coming to the end of its life on January 1, 2020. Are you ready?</li>\n<li>This is one of the best guides I\u2019ve found to porting your code from Python 2 to Python 3</li>\n<li>One of the issues with many of the Python 3 porting guides is that the old ones recommend dropping Python 2 support suddenly, which isn\u2019t recommended anymore.</li>\n<li>I do wish this guide recommended the future library instead of python-modernize. They\u2019re both great, but modernize is a little less focused on writing things the Python 3 way and a little more focused on just getting your code working in both 2 and 3.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://realpython.com/world-class-companies-using-python/\"><strong>World-Class Software Companies That Use Python</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://realpython.com/world-class-companies-using-python/#author\">Jason Reynolds</a> </li>\n<li>While it\u2019s easy to see how you can tinker with Python, you might be wondering how this translates to actual business and real world applications.</li>\n<li><strong>Industrial Light and Magic</strong>\n<ul>\n<li>The studio has used Python in multiple other facets of their work. Developers use Python to track and audit pipeline functionality, maintaining a database of every image produced for each film.</li>\n</ul></li>\n<li><strong>Google</strong>\n<ul>\n<li>In the beginning, the founders of Google made the decision of \u201cPython where we can, C++ where we must.\u201d</li>\n<li>Currently powers YouTube among other things</li>\n</ul></li>\n<li><strong>Facebook</strong>\n<ul>\n<li>Ensures that the infrastructure of Facebook is able to scale efficiently</li>\n</ul></li>\n<li><strong>Instagram</strong>\n<ul>\n<li>the Instagram engineering team boasted that they were <a href=\"https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366\">running the world\u2019s largest deployment of the Django web framework, which is written entirely in Python</a>.</li>\n<li>Instagram\u2019s engineering team has invested time and resources into keeping their Python deployment viable at the massive scale (<a href=\"https://www.statista.com/statistics/253577/number-of-monthly-active-instagram-users/\">~800 million monthly active users</a>) they\u2019re operating at.</li>\n<li><a href=\"https://www.youtube.com/watch?v=66XoCk79kjM\">PyCon 2017 keynote talk</a> by Lisa Guo and Hui Ding</li>\n</ul></li>\n<li><strong>Spotify</strong>\n<ul>\n<li>This music streaming giant is a <a href=\"https://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/\">huge proponent of Python</a>, using the language primarily for data analysis and back end services. </li>\n<li>On the back end, there are a large number of services that all communicate over 0MQ, or <a href=\"http://zguide.zeromq.org/page:all\">ZeroMQ</a>, an open source networking library and framework that is written in Python and C++(among other languages).</li>\n</ul></li>\n<li><strong>Quora</strong>\n<ul>\n<li>choosing to use Python where they could because of its ease of writing and readability, and implemented C++ for the performance critical sections. </li>\n<li>They got around Python\u2019s lack of typechecking by writing unit tests that accomplish much the same thing.</li>\n<li>Another key consideration for using Python was the existence of several good frameworks at the time including Django and Pylons. </li>\n</ul></li>\n<li><strong>Netflix</strong>\n<ul>\n<li>Lots of infrastructure and ops work done via Python https://talkpython.fm/episodes/show/16/python-at-netflix</li>\n</ul></li>\n<li><strong>Dropbox</strong>\n<ul>\n<li>Dropbox makes heavy use of Python</li>\n<li>Guido van Rossum works there!</li>\n<li>Lots of open source projects</li>\n<li>Client app in Python too</li>\n</ul></li>\n<li><strong>Reddit</strong>\n<ul>\n<li>This website had 542 million visitors every month across 2017, making it the fourth most visited website in the United States and seventh most visited in the world. </li>\n<li>In 2015, there were 73.15 million submissions and 82.54 billion pageviews. </li>\n<li>Behind it all, forming the software backbone, was Python.</li>\n</ul></li>\n</ul>\n\n<p><strong>Trey #3:</strong> <a href=\"https://www.youtube.com/watch?v=o9pEzgHorH0\"><strong>Stop Writing Classes</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://twitter.com/jackdied\">Jack Diederich</a></li>\n<li>This is one of my favorite PyCon talks to recommend to folks switching to Python from other programming languages. I especially like to recommend this talk to folks moving to Python from Java and C++.</li>\n<li>This is kind of an old talk. It's from 2012, so it's from the days of Python 2 but everything in it is still <em>very applicable today</em>.</li>\n<li>One of the great things about this talk is it doesn\u2019t just show times that you should write functions instead of classes, it also shows an example or two of when classes really make sense.</li>\n<li>The big advice from this talk: if you have a class that only has two methods and one is the initializer, you probably need a function instead.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pypi.org/\"><strong>PyPi.org is alive</strong></a></p>\n\n<ul>\n<li>For the LONGest time, pypi has been run out of <a href=\"http://pypi.python.org/pypi\">http://pypi.python.org/pypi</a></li>\n<li>Now the new version of pypi is out at pypi.org</li>\n<li>Rewritten in Pyramid</li>\n<li>Do you want to contribute? Now the barriers have come down</li>\n<li><strong><a href=\"https://twitter.com/EWDurbin/status/974424840429080578\">Tweet with graphs</a></strong></li>\n</ul>\n\n<p><strong>Trey</strong> <strong>#5:</strong> <a href=\"https://nedbatchelder.com/text/unipain.html\"><strong>Pragmatic Unicode</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://twitter.com/nedbat\">Ned Batchelder</a></li>\n<li>Another PyCon 2012 talk that is still relevant today, though it does use quite a bit of Python 2 syntax</li>\n<li>Ned describes the unicode sandwich in this talk. Talks with good metaphors really help shape your mental model of a topic. This was the talk that helped me really understand the unicode vs bytes issue that Python 3 largely solves for us (or at least forces us to do so upfront).</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://renesd.blogspot.com/2018/03/pygame-on-pypy-usable.html\"><strong>pygame on pypy usable</strong></a></p>\n\n<ul>\n<li>via Ren\u00e9 Dudfield</li>\n<li>0.5x to 30x the speed</li>\n<li>That is pygame (same one that runs on cpython), works on pypy through its C extension API</li>\n<li><strong>This is exciting because</strong>:\n<ul>\n<li>pure python code being fast on pypy(after warmup), also mixed with the fast bits in C/asm.</li>\n<li>cpyext is getting faster in pypy. There is already work and discussion towards it being faster than CPython.</li>\n<li>maintaining one pygame code base is easier than maintaining several (pygame cffi/ctypes/cython, ...).</li>\n<li>with one code base it should be fast on both pygame, and pypy(in time).</li>\n</ul></li>\n<li><strong>Where it can be slower</strong>: if you are going into C code for a lot of small operations. Like when using lots of pygame.Rect in a tight loop. This is because (currently) the cost of going from PyPy code into and out of CPython API code (like pygame) is a bit slow.</li>\n<li>Ray tracing in PyGame:\n<ul>\n<li>On PyPy - 18.6 seconds.</li>\n<li>On Python 2.7 - 9 minutes, 28.1 seconds (30x slower)</li>\n</ul></li>\n</ul>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong>\n<strong>#100DaysOfCode in Python course</strong>: <strong><a href=\"https://talkpython.fm/100days\">talkpython.fm/100days</a></strong></p>\n\n<p><strong>Trey:</strong> \nPython Morsels: <strong><a href=\"http://pythonmorsels.com\">pythonmorsels.com</a></strong></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 71</h1>\n\n<p>Sponsored by DigitalOcean: <strong><a href=\"https://do.co/python\">do.co/python</a></strong></p>\n\n<p>Special guest: Trey Hunner (<a href=\"https://twitter.com/treyhunner\"><strong>@treyhunner</strong></a>)</p>\n\n<p><strong>Trey #1:</strong> <a href=\"https://portingguide.readthedocs.io/en/latest/\"><strong>The Conservative Python 3 Porting Guide</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://github.com/fedora-python/portingguide/graphs/contributors\">various Red Hat folks</a> mostly</li>\n<li>Python 2 is coming to the end of its life on January 1, 2020. Are you ready?</li>\n<li>This is one of the best guides I\u2019ve found to porting your code from Python 2 to Python 3</li>\n<li>One of the issues with many of the Python 3 porting guides is that the old ones recommend dropping Python 2 support suddenly, which isn\u2019t recommended anymore.</li>\n<li>I do wish this guide recommended the future library instead of python-modernize. They\u2019re both great, but modernize is a little less focused on writing things the Python 3 way and a little more focused on just getting your code working in both 2 and 3.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://realpython.com/world-class-companies-using-python/\"><strong>World-Class Software Companies That Use Python</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://realpython.com/world-class-companies-using-python/#author\">Jason Reynolds</a> </li>\n<li>While it\u2019s easy to see how you can tinker with Python, you might be wondering how this translates to actual business and real world applications.</li>\n<li><strong>Industrial Light and Magic</strong>\n<ul>\n<li>The studio has used Python in multiple other facets of their work. Developers use Python to track and audit pipeline functionality, maintaining a database of every image produced for each film.</li>\n</ul></li>\n<li><strong>Google</strong>\n<ul>\n<li>In the beginning, the founders of Google made the decision of \u201cPython where we can, C++ where we must.\u201d</li>\n<li>Currently powers YouTube among other things</li>\n</ul></li>\n<li><strong>Facebook</strong>\n<ul>\n<li>Ensures that the infrastructure of Facebook is able to scale efficiently</li>\n</ul></li>\n<li><strong>Instagram</strong>\n<ul>\n<li>the Instagram engineering team boasted that they were <a href=\"https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366\">running the world\u2019s largest deployment of the Django web framework, which is written entirely in Python</a>.</li>\n<li>Instagram\u2019s engineering team has invested time and resources into keeping their Python deployment viable at the massive scale (<a href=\"https://www.statista.com/statistics/253577/number-of-monthly-active-instagram-users/\">~800 million monthly active users</a>) they\u2019re operating at.</li>\n<li><a href=\"https://www.youtube.com/watch?v=66XoCk79kjM\">PyCon 2017 keynote talk</a> by Lisa Guo and Hui Ding</li>\n</ul></li>\n<li><strong>Spotify</strong>\n<ul>\n<li>This music streaming giant is a <a href=\"https://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/\">huge proponent of Python</a>, using the language primarily for data analysis and back end services. </li>\n<li>On the back end, there are a large number of services that all communicate over 0MQ, or <a href=\"http://zguide.zeromq.org/page:all\">ZeroMQ</a>, an open source networking library and framework that is written in Python and C++(among other languages).</li>\n</ul></li>\n<li><strong>Quora</strong>\n<ul>\n<li>choosing to use Python where they could because of its ease of writing and readability, and implemented C++ for the performance critical sections. </li>\n<li>They got around Python\u2019s lack of typechecking by writing unit tests that accomplish much the same thing.</li>\n<li>Another key consideration for using Python was the existence of several good frameworks at the time including Django and Pylons. </li>\n</ul></li>\n<li><strong>Netflix</strong>\n<ul>\n<li>Lots of infrastructure and ops work done via Python https://talkpython.fm/episodes/show/16/python-at-netflix</li>\n</ul></li>\n<li><strong>Dropbox</strong>\n<ul>\n<li>Dropbox makes heavy use of Python</li>\n<li>Guido van Rossum works there!</li>\n<li>Lots of open source projects</li>\n<li>Client app in Python too</li>\n</ul></li>\n<li><strong>Reddit</strong>\n<ul>\n<li>This website had 542 million visitors every month across 2017, making it the fourth most visited website in the United States and seventh most visited in the world. </li>\n<li>In 2015, there were 73.15 million submissions and 82.54 billion pageviews. </li>\n<li>Behind it all, forming the software backbone, was Python.</li>\n</ul></li>\n</ul>\n\n<p><strong>Trey #3:</strong> <a href=\"https://www.youtube.com/watch?v=o9pEzgHorH0\"><strong>Stop Writing Classes</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://twitter.com/jackdied\">Jack Diederich</a></li>\n<li>This is one of my favorite PyCon talks to recommend to folks switching to Python from other programming languages. I especially like to recommend this talk to folks moving to Python from Java and C++.</li>\n<li>This is kind of an old talk. It's from 2012, so it's from the days of Python 2 but everything in it is still <em>very applicable today</em>.</li>\n<li>One of the great things about this talk is it doesn\u2019t just show times that you should write functions instead of classes, it also shows an example or two of when classes really make sense.</li>\n<li>The big advice from this talk: if you have a class that only has two methods and one is the initializer, you probably need a function instead.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pypi.org/\"><strong>PyPi.org is alive</strong></a></p>\n\n<ul>\n<li>For the LONGest time, pypi has been run out of <a href=\"http://pypi.python.org/pypi\">http://pypi.python.org/pypi</a></li>\n<li>Now the new version of pypi is out at pypi.org</li>\n<li>Rewritten in Pyramid</li>\n<li>Do you want to contribute? Now the barriers have come down</li>\n<li><strong><a href=\"https://twitter.com/EWDurbin/status/974424840429080578\">Tweet with graphs</a></strong></li>\n</ul>\n\n<p><strong>Trey</strong> <strong>#5:</strong> <a href=\"https://nedbatchelder.com/text/unipain.html\"><strong>Pragmatic Unicode</strong></a></p>\n\n<ul>\n<li>by <a href=\"https://twitter.com/nedbat\">Ned Batchelder</a></li>\n<li>Another PyCon 2012 talk that is still relevant today, though it does use quite a bit of Python 2 syntax</li>\n<li>Ned describes the unicode sandwich in this talk. Talks with good metaphors really help shape your mental model of a topic. This was the talk that helped me really understand the unicode vs bytes issue that Python 3 largely solves for us (or at least forces us to do so upfront).</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://renesd.blogspot.com/2018/03/pygame-on-pypy-usable.html\"><strong>pygame on pypy usable</strong></a></p>\n\n<ul>\n<li>via Ren\u00e9 Dudfield</li>\n<li>0.5x to 30x the speed</li>\n<li>That is pygame (same one that runs on cpython), works on pypy through its C extension API</li>\n<li><strong>This is exciting because</strong>:\n<ul>\n<li>pure python code being fast on pypy(after warmup), also mixed with the fast bits in C/asm.</li>\n<li>cpyext is getting faster in pypy. There is already work and discussion towards it being faster than CPython.</li>\n<li>maintaining one pygame code base is easier than maintaining several (pygame cffi/ctypes/cython, ...).</li>\n<li>with one code base it should be fast on both pygame, and pypy(in time).</li>\n</ul></li>\n<li><strong>Where it can be slower</strong>: if you are going into C code for a lot of small operations. Like when using lots of pygame.Rect in a tight loop. This is because (currently) the cost of going from PyPy code into and out of CPython API code (like pygame) is a bit slow.</li>\n<li>Ray tracing in PyGame:\n<ul>\n<li>On PyPy - 18.6 seconds.</li>\n<li>On Python 2.7 - 9 minutes, 28.1 seconds (30x slower)</li>\n</ul></li>\n</ul>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong>\n<strong>#100DaysOfCode in Python course</strong>: <strong><a href=\"https://talkpython.fm/100days\">talkpython.fm/100days</a></strong></p>\n\n<p><strong>Trey:</strong> \nPython Morsels: <strong><a href=\"http://pythonmorsels.com\">pythonmorsels.com</a></strong></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 28 Mar 2018 00:00:00 -0800", "published_parsed": [2018, 3, 28, 8, 0, 0, 2, 87, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "We can migrate to Python 3, careful please", "itunes_episode": "71", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:01"}}, "#70 Have you seen my log? It's cute!": {"info": {"title": "#70 Have you seen my log? It's cute!", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#70 Have you seen my log? It's cute!"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/70/have-you-seen-my-log-it-s-cute"}, {"length": "7188429", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/70/have-you-seen-my-log-it-s-cute.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/70/have-you-seen-my-log-it-s-cute", "id": "https://pythonbytes.fm/episodes/4dbe914e-aa3d-4f0f-b2a2-97395704b323", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://generator.kpavlovsky.pro/\"><strong>Online CookieCutter Generator</strong></a></p>\n\n<ul>\n<li>\u201cGet a ZIP-archive with project by filling out the form.\u201d</li>\n<li>By <a href=\"https://twitter.com/kpavlovsky_pro\">@kpavlovsky_pro</a> Konstantin Pavlovsky</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/busimus/cutelog\"><strong>cutelog \u2013 GUI for Python's logging module</strong></a></p>\n\n<ul>\n<li>This is a graphical log viewer for Python's standard logging module. </li>\n<li>Features\n<ul>\n<li>Allows any number of simultaneous connections</li>\n<li>Fully customizable look of log levels and columns</li>\n<li>Filtering based on level and name of the logger, as well as filtering by searching</li>\n<li>Search through all records or only through filtered ones</li>\n<li>View exception tracebacks or messages in a separate window</li>\n<li>Dark theme (with its own set of colors for levels)</li>\n<li>Pop tabs out of the window, merge records of multiple tabs into one</li>\n</ul></li>\n<li>Based on PyQt5 speaking of GUIs</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://wagtail.io/blog/wagtail-2/\"><strong>wagtail 2.0</strong></a></p>\n\n<ul>\n<li>\u201cWagtail is a content management system built on Django. It\u2019s focused on user experience, and offers precise control for designers and developers.\u201d</li>\n<li><a href=\"http://docs.wagtail.io/en/v2.0/getting_started/the_zen_of_wagtail.html\">The Zen of Wagtail</a> - nice philosophy of the project page to let you know if this kind of thing is right for you and your project.</li>\n<li>In 2.0\n<ul>\n<li>a new text editor</li>\n<li>Django 2 support </li>\n<li>better scheduled publishing</li>\n<li>\u2026</li>\n</ul></li>\n<li><a href=\"http://docs.wagtail.io/en/v2.0/getting_started/index.html\">wagtail docs</a></li>\n<li><a href=\"https://madewithwagtail.org/\">gallery of sites made with wagtail</a></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://charlesleifer.com/blog/peewee-3-0-released/\"><strong>peewee 3.0 is out</strong></a></p>\n\n<ul>\n<li>Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.\n<ul>\n<li>A small, expressive ORM</li>\n<li>Written in python with support for versions 2.7+ and 3.4+ (developed with 3.6)</li>\n<li>Built-in support for SQLite, MySQL and Postgresql.</li>\n<li>Numerous extensions available (postgres hstore/json/arrays, sqlite full-text-search, schema migrations, and much more).</li>\n</ul></li>\n<li>Although this was pretty much a complete rewrite of the 2.x codebase, I have tried to maintain backwards-compatibility for the public APIs.</li>\n<li>Exciting because of its async support via <strong>peewee-async</strong>\n<ul>\n<li><strong>peewee-async</strong> is a library providing asynchronous interface powered by <a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a> for <a href=\"https://github.com/coleifer/peewee\">peewee</a> ORM.</li>\n</ul></li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">set_allow_sync</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">():</span>\n        <span class=\"n\">await</span> <span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">TestModel</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Not bad. Watch this, I&#39;m async!&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">all_objects</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">TestModel</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">all_objects</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/zotroneneis/machine_learning_basics\"><strong>Machine Learning Basics</strong></a></p>\n\n<ul>\n<li>\u201cPlain python implementations of basic machine learning algorithms\u201d</li>\n<li>From the repo:\n<ul>\n<li>A repository of implementations of basic machine learning algorithms in plain Python (Python Version 3.6+). All algorithms are implemented from scratch without using additional machine learning libraries. The intention of these notebooks is to provide a basic understanding of the algorithms and their underlying structure, not to provide the most efficient implementations.\n<ul>\n<li>Linear Regression</li>\n<li>Logistic Regression</li>\n<li>Perceptron</li>\n<li>k-nearest-neighbor</li>\n<li>k-Means clustering</li>\n<li>Simple neural network with one hidden layer</li>\n<li>Multinomial Logistic Regression</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://docs.python-cerberus.org/en/stable/\"><strong>Cerberus</strong></a></p>\n\n<ul>\n<li>Cerberus provides powerful yet simple and lightweight data validation functionality out of the box</li>\n<li>designed to be easily extensible, allowing for custom validation</li>\n<li>Origin of the name: CERBERUS, n. The watch-dog of Hades, whose duty it was to guard the entrance;</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">},</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;integer&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}}</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n    <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Little Joe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">errors</span>  <span class=\"c1\"># {&#39;age&#39;: [&#39;min value is 10&#39;]}</span>\n</code></pre></div>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong></p>\n\n<p><strong>#100DaysOfCode in Python course</strong>: <strong><a href=\"https://talkpython.fm/100days\">talkpython.fm/100days</a></strong></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://generator.kpavlovsky.pro/\"><strong>Online CookieCutter Generator</strong></a></p>\n\n<ul>\n<li>\u201cGet a ZIP-archive with project by filling out the form.\u201d</li>\n<li>By <a href=\"https://twitter.com/kpavlovsky_pro\">@kpavlovsky_pro</a> Konstantin Pavlovsky</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/busimus/cutelog\"><strong>cutelog \u2013 GUI for Python's logging module</strong></a></p>\n\n<ul>\n<li>This is a graphical log viewer for Python's standard logging module. </li>\n<li>Features\n<ul>\n<li>Allows any number of simultaneous connections</li>\n<li>Fully customizable look of log levels and columns</li>\n<li>Filtering based on level and name of the logger, as well as filtering by searching</li>\n<li>Search through all records or only through filtered ones</li>\n<li>View exception tracebacks or messages in a separate window</li>\n<li>Dark theme (with its own set of colors for levels)</li>\n<li>Pop tabs out of the window, merge records of multiple tabs into one</li>\n</ul></li>\n<li>Based on PyQt5 speaking of GUIs</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://wagtail.io/blog/wagtail-2/\"><strong>wagtail 2.0</strong></a></p>\n\n<ul>\n<li>\u201cWagtail is a content management system built on Django. It\u2019s focused on user experience, and offers precise control for designers and developers.\u201d</li>\n<li><a href=\"http://docs.wagtail.io/en/v2.0/getting_started/the_zen_of_wagtail.html\">The Zen of Wagtail</a> - nice philosophy of the project page to let you know if this kind of thing is right for you and your project.</li>\n<li>In 2.0\n<ul>\n<li>a new text editor</li>\n<li>Django 2 support </li>\n<li>better scheduled publishing</li>\n<li>\u2026</li>\n</ul></li>\n<li><a href=\"http://docs.wagtail.io/en/v2.0/getting_started/index.html\">wagtail docs</a></li>\n<li><a href=\"https://madewithwagtail.org/\">gallery of sites made with wagtail</a></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://charlesleifer.com/blog/peewee-3-0-released/\"><strong>peewee 3.0 is out</strong></a></p>\n\n<ul>\n<li>Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.\n<ul>\n<li>A small, expressive ORM</li>\n<li>Written in python with support for versions 2.7+ and 3.4+ (developed with 3.6)</li>\n<li>Built-in support for SQLite, MySQL and Postgresql.</li>\n<li>Numerous extensions available (postgres hstore/json/arrays, sqlite full-text-search, schema migrations, and much more).</li>\n</ul></li>\n<li>Although this was pretty much a complete rewrite of the 2.x codebase, I have tried to maintain backwards-compatibility for the public APIs.</li>\n<li>Exciting because of its async support via <strong>peewee-async</strong>\n<ul>\n<li><strong>peewee-async</strong> is a library providing asynchronous interface powered by <a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a> for <a href=\"https://github.com/coleifer/peewee\">peewee</a> ORM.</li>\n</ul></li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">set_allow_sync</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">():</span>\n        <span class=\"n\">await</span> <span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">TestModel</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Not bad. Watch this, I&#39;m async!&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">all_objects</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">TestModel</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">())</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">all_objects</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/zotroneneis/machine_learning_basics\"><strong>Machine Learning Basics</strong></a></p>\n\n<ul>\n<li>\u201cPlain python implementations of basic machine learning algorithms\u201d</li>\n<li>From the repo:\n<ul>\n<li>A repository of implementations of basic machine learning algorithms in plain Python (Python Version 3.6+). All algorithms are implemented from scratch without using additional machine learning libraries. The intention of these notebooks is to provide a basic understanding of the algorithms and their underlying structure, not to provide the most efficient implementations.\n<ul>\n<li>Linear Regression</li>\n<li>Logistic Regression</li>\n<li>Perceptron</li>\n<li>k-nearest-neighbor</li>\n<li>k-Means clustering</li>\n<li>Simple neural network with one hidden layer</li>\n<li>Multinomial Logistic Regression</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://docs.python-cerberus.org/en/stable/\"><strong>Cerberus</strong></a></p>\n\n<ul>\n<li>Cerberus provides powerful yet simple and lightweight data validation functionality out of the box</li>\n<li>designed to be easily extensible, allowing for custom validation</li>\n<li>Origin of the name: CERBERUS, n. The watch-dog of Hades, whose duty it was to guard the entrance;</li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">},</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;integer&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;min&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}}</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n    <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Little Joe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">document</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n    <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">errors</span>  <span class=\"c1\"># {&#39;age&#39;: [&#39;min value is 10&#39;]}</span>\n</code></pre></div>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong></p>\n\n<p><strong>#100DaysOfCode in Python course</strong>: <strong><a href=\"https://talkpython.fm/100days\">talkpython.fm/100days</a></strong></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 23 Mar 2018 00:00:00 -0800", "published_parsed": [2018, 3, 23, 8, 0, 0, 4, 82, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Have you seen my log? It's cute!", "itunes_episode": "70", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:15:51"}}, "#69 Digging into StackOverflow's 2018 survey results": {"info": {"title": "#69 Digging into StackOverflow's 2018 survey results", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#69 Digging into StackOverflow's 2018 survey results"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/69/digging-into-stackoverflow-s-2018-survey-results"}, {"length": "10895815", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/69/digging-into-stackoverflow-s-2018-survey-results.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/69/digging-into-stackoverflow-s-2018-survey-results", "id": "https://pythonbytes.fm/episodes/52020cca-f332-42ef-b430-71fedc9c20b4", "guidislink": false, "summary": "<h1>Python Bytes 69</h1>\n\n<p>Sponsored by DigitalOcean: <strong><a href=\"https://do.co/python\">https://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/minodes/pynb\"><strong>pynb: Jupyter Notebooks as plain Python code with embedded Markdown text</strong></a></p>\n\n<ul>\n<li><code>pynb</code> lets you manage Jupyter notebooks as plain Python code with embedded Markdown text, enabling:\n<ul>\n<li><strong>Python development environment</strong>: Use your preferred IDE/editor, ensure style compliance, navigate, refactor, and test your notebooks as regular Python code.</li>\n<li><strong>Version control</strong>: Track changes, review pull requests and merge conflicts as with regular Python code. The cell outputs are stored separately and don't interfere with versioning.</li>\n<li><strong>Consistent execution state</strong>: Never lose track again of the execution state. Notebooks are always executed from clean iPython kernels and the cell execution is cached.</li>\n</ul></li>\n<li>You also get parameterized notebooks with batch and programmatic execution.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>Microsoft\u2019s quantum computing language is now available for</strong></a> <a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>m</strong></a><a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>acOS</strong></a></p>\n\n<ul>\n<li>New language Q# (<a href=\"https://docs.microsoft.com/en-us/quantum/quantum-qr-statements?view=qsharp-preview\">snippet examples</a>)</li>\n<li>How do you run a quantum app?</li>\n<li>Based on topological qubits and quantum computers</li>\n<li>Now out on macOS &amp; Linux</li>\n<li>Need to use VS Code (and vs code extension)</li>\n<li>Comes with Python interoperability (only other language)</li>\n<li>Also in Jupyter</li>\n<li>Some real-world examples. See <a href=\"https://www.wired.co.uk/article/quantum-computing-explained\">this Wired article</a>.\n<ul>\n<li><a href=\"https://www.dwavesys.com/home\">D-wave</a></li>\n<li>IBM is making quantum computers commercially available. Since 2016, it has offered researchers the chance to run experiments on a five-qubit quantum computer via the cloud and at the end of 2017 started making its 20-qubit system available online too.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3: pytest talk in Spanish</strong> </p>\n\n<ul>\n<li>\"pytest: recommendations, basic packages for testing in Python and Django\"</li>\n<li>By A. Vallbona (<a href=\"https://twitter.com/avallbona\">@avallbona</a>) From PyConES 2017</li>\n<li>with  <a href=\"http://talks.apsl.io/testing-pycones-2017\">English slides</a>, and <a href=\"https://www.youtube.com/watch?v=K20GeR-lXDk&amp;feature=youtu.be\">video in Spanish</a>.</li>\n<li>Some of the topics covered:\n<ul>\n<li><code>pytest-django</code></li>\n<li><code>model-mommy</code> to easily create fixtures based on django models</li>\n<li><code>pytest-lazy-fixture</code> allows the use the fixtures as parameters to parameterize</li>\n<li><code>pytest-mock</code>, <code>pytest-cov</code>, <code>pytest-flake8</code></li>\n<li><code>freezegun</code> to helps us to \"freeze\" time</li>\n<li><code>eradicate</code> to eliminate commented code</li>\n<li><code>pytest-xdist</code> to run tests in parallel</li>\n</ul></li>\n</ul>\n\n<p><strong>Bonus pytest topic:</strong></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/reference.html\">pytest.org just added a Reference page</a>, a full reference to pytest\u2019s API.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://insights.stackoverflow.com/survey/2018/\"><strong>StackOverflow Developer Survey Results 2018</strong></a></p>\n\n<ul>\n<li>Sample size: Over 100,000 developers</li>\n<li>55% contribute to open source</li>\n<li>64% have CS degrees</li>\n<li>Experience and Belonging\n<ul>\n<li>Connection to other devs (increasing over time)</li>\n<li>Competing with peers (decreasing over time)</li>\n<li>Not as good as my peers (decreasing over time)</li>\n</ul></li>\n<li>How Much Time Do Developers Spend on a Computer? Most: 9-12 hours</li>\n<li>Python beats C# in usage for the first time</li>\n<li>Languages:\n<ul>\n<li>Most loved: #1 Rust, #2 Kotlin, #3 Python</li>\n<li>Most dreaded: VB 6 and CoffeeScript</li>\n<li>Most wanted: #1 Python 25%, #JavaScript 19%, #3 Go 16%</li>\n</ul></li>\n<li>Databases:\n<ul>\n<li>Loved: PostgreSQL</li>\n<li>Dreaded: IBM Db2, Memcached, and Oracle</li>\n<li>Most wanted: MongoDB</li>\n</ul></li>\n<li>Editor: VS Code</li>\n<li>Dev OSes:\n<ul>\n<li>Windows: 49%</li>\n<li>macOS: 27%</li>\n<li>Linux: 23%</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://pypi.python.org/pypi/demoshell/\"><strong>demoshell</strong></a></p>\n\n<ul>\n<li><a href=\"https://twitter.com/doughellmann\"><strong>@</strong></a><a href=\"https://twitter.com/doughellmann\">doughellmann</a></li>\n<li>Doug Hellman (<a href=\"https://twitter.com/doughellmann\"><strong>@</strong></a><a href=\"https://twitter.com/doughellmann\">doughellmann</a>) <a href=\"https://doughellmann.com/blog/2018/03/11/demoshell-0-1-0/\">announces demoshell</a>\n<ul>\n<li>Inspired by a tweet from <a href=\"https://twitter.com/genehack\">@genehack</a> \u201cHey, speakers, if you're doing live demos in a shell, clear the screen after <em>every</em> <em>command</em> to get the prompt back at the top, so folks in the back can see what you're doing.\u201d</li>\n</ul></li>\n<li>demoshell is a simplified shell for live demonstrations. It always shows the command prompt at the top of the screen and pushes command output down instead of letting it scroll up.</li>\n<li>In his words: \u201cI put it up there to start a discussion. I\u2019d be happy if a bunch of people showed up and wanted to take it over and actually turn it into something useful. I invite people to give it a look. And warn them that too much interest is going to be met with commit privileges on the repo. :-)\u201d</li>\n</ul>\n\n<p><strong>Michael #6: Clear statement on Python 2 EOL</strong></p>\n\n<ul>\n<li>Will there be a period where Py2.7 is in security-only status before hitting EOL?</li>\n<li>via Nicola Iarocci\u200f <a href=\"https://twitter.com/nicolaiarocci\">@nicolaiarocci</a>\n<ul>\n<li>Yay, @gvanrossum makes it adamantly clear: \u201cLet's not play games with semantics. The way I see the situation for <strong>2.7 is that EOL is January 1st, 2020</strong>, and there will be no updates, <strong>not even source-only security patches</strong>, after that date.\u201d <strong>https://buff.ly/2pbZmBZ</strong> </li>\n</ul></li>\n<li>Support (from the core devs, the PSF, and python.org) stops completely on that date.</li>\n</ul>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong></p>\n\n<ul>\n<li>Eve: MongoDB &amp; Flask-backed RESTful APIs course is out!\n<ul>\n<li><strong><a href=\"https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course\">https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course</a></strong></li>\n</ul></li>\n<li>Shoutout to everyone I met at <a href=\"https://2018.pycon.sk/en/\">PyCon Slovakia</a></li>\n</ul>\n\n<p><strong>Brian:</strong> </p>\n\n<ul>\n<li>A couple of recent episodes on Test &amp; Code focusing on project test development:\n<ul>\n<li><a href=\"http://testandcode.com/37\">What tests to write first</a> </li>\n<li><a href=\"http://testandcode.com/38\">Prioritize software tests with RCRCRC</a></li>\n<li>Upcoming topics will include beefing up test coverage with things like equivalence partitioning, boundary value analysis, state transition diagrams, state tables, negative testing, \u2026</li>\n<li>Also learning a lot about developing an open source project and all the tools surrounding that. I\u2019ll discuss those topics in episodes as well.</li>\n<li>Project used in both episodes, <a href=\"https://github.com/okken/cards\">cards : a project task tracking / todo list app</a> that will be expanded as I go along talking about different test and software development topics.</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 69</h1>\n\n<p>Sponsored by DigitalOcean: <strong><a href=\"https://do.co/python\">https://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/minodes/pynb\"><strong>pynb: Jupyter Notebooks as plain Python code with embedded Markdown text</strong></a></p>\n\n<ul>\n<li><code>pynb</code> lets you manage Jupyter notebooks as plain Python code with embedded Markdown text, enabling:\n<ul>\n<li><strong>Python development environment</strong>: Use your preferred IDE/editor, ensure style compliance, navigate, refactor, and test your notebooks as regular Python code.</li>\n<li><strong>Version control</strong>: Track changes, review pull requests and merge conflicts as with regular Python code. The cell outputs are stored separately and don't interfere with versioning.</li>\n<li><strong>Consistent execution state</strong>: Never lose track again of the execution state. Notebooks are always executed from clean iPython kernels and the cell execution is cached.</li>\n</ul></li>\n<li>You also get parameterized notebooks with batch and programmatic execution.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>Microsoft\u2019s quantum computing language is now available for</strong></a> <a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>m</strong></a><a href=\"https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/\"><strong>acOS</strong></a></p>\n\n<ul>\n<li>New language Q# (<a href=\"https://docs.microsoft.com/en-us/quantum/quantum-qr-statements?view=qsharp-preview\">snippet examples</a>)</li>\n<li>How do you run a quantum app?</li>\n<li>Based on topological qubits and quantum computers</li>\n<li>Now out on macOS &amp; Linux</li>\n<li>Need to use VS Code (and vs code extension)</li>\n<li>Comes with Python interoperability (only other language)</li>\n<li>Also in Jupyter</li>\n<li>Some real-world examples. See <a href=\"https://www.wired.co.uk/article/quantum-computing-explained\">this Wired article</a>.\n<ul>\n<li><a href=\"https://www.dwavesys.com/home\">D-wave</a></li>\n<li>IBM is making quantum computers commercially available. Since 2016, it has offered researchers the chance to run experiments on a five-qubit quantum computer via the cloud and at the end of 2017 started making its 20-qubit system available online too.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3: pytest talk in Spanish</strong> </p>\n\n<ul>\n<li>\"pytest: recommendations, basic packages for testing in Python and Django\"</li>\n<li>By A. Vallbona (<a href=\"https://twitter.com/avallbona\">@avallbona</a>) From PyConES 2017</li>\n<li>with  <a href=\"http://talks.apsl.io/testing-pycones-2017\">English slides</a>, and <a href=\"https://www.youtube.com/watch?v=K20GeR-lXDk&amp;feature=youtu.be\">video in Spanish</a>.</li>\n<li>Some of the topics covered:\n<ul>\n<li><code>pytest-django</code></li>\n<li><code>model-mommy</code> to easily create fixtures based on django models</li>\n<li><code>pytest-lazy-fixture</code> allows the use the fixtures as parameters to parameterize</li>\n<li><code>pytest-mock</code>, <code>pytest-cov</code>, <code>pytest-flake8</code></li>\n<li><code>freezegun</code> to helps us to \"freeze\" time</li>\n<li><code>eradicate</code> to eliminate commented code</li>\n<li><code>pytest-xdist</code> to run tests in parallel</li>\n</ul></li>\n</ul>\n\n<p><strong>Bonus pytest topic:</strong></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/reference.html\">pytest.org just added a Reference page</a>, a full reference to pytest\u2019s API.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://insights.stackoverflow.com/survey/2018/\"><strong>StackOverflow Developer Survey Results 2018</strong></a></p>\n\n<ul>\n<li>Sample size: Over 100,000 developers</li>\n<li>55% contribute to open source</li>\n<li>64% have CS degrees</li>\n<li>Experience and Belonging\n<ul>\n<li>Connection to other devs (increasing over time)</li>\n<li>Competing with peers (decreasing over time)</li>\n<li>Not as good as my peers (decreasing over time)</li>\n</ul></li>\n<li>How Much Time Do Developers Spend on a Computer? Most: 9-12 hours</li>\n<li>Python beats C# in usage for the first time</li>\n<li>Languages:\n<ul>\n<li>Most loved: #1 Rust, #2 Kotlin, #3 Python</li>\n<li>Most dreaded: VB 6 and CoffeeScript</li>\n<li>Most wanted: #1 Python 25%, #JavaScript 19%, #3 Go 16%</li>\n</ul></li>\n<li>Databases:\n<ul>\n<li>Loved: PostgreSQL</li>\n<li>Dreaded: IBM Db2, Memcached, and Oracle</li>\n<li>Most wanted: MongoDB</li>\n</ul></li>\n<li>Editor: VS Code</li>\n<li>Dev OSes:\n<ul>\n<li>Windows: 49%</li>\n<li>macOS: 27%</li>\n<li>Linux: 23%</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://pypi.python.org/pypi/demoshell/\"><strong>demoshell</strong></a></p>\n\n<ul>\n<li><a href=\"https://twitter.com/doughellmann\"><strong>@</strong></a><a href=\"https://twitter.com/doughellmann\">doughellmann</a></li>\n<li>Doug Hellman (<a href=\"https://twitter.com/doughellmann\"><strong>@</strong></a><a href=\"https://twitter.com/doughellmann\">doughellmann</a>) <a href=\"https://doughellmann.com/blog/2018/03/11/demoshell-0-1-0/\">announces demoshell</a>\n<ul>\n<li>Inspired by a tweet from <a href=\"https://twitter.com/genehack\">@genehack</a> \u201cHey, speakers, if you're doing live demos in a shell, clear the screen after <em>every</em> <em>command</em> to get the prompt back at the top, so folks in the back can see what you're doing.\u201d</li>\n</ul></li>\n<li>demoshell is a simplified shell for live demonstrations. It always shows the command prompt at the top of the screen and pushes command output down instead of letting it scroll up.</li>\n<li>In his words: \u201cI put it up there to start a discussion. I\u2019d be happy if a bunch of people showed up and wanted to take it over and actually turn it into something useful. I invite people to give it a look. And warn them that too much interest is going to be met with commit privileges on the repo. :-)\u201d</li>\n</ul>\n\n<p><strong>Michael #6: Clear statement on Python 2 EOL</strong></p>\n\n<ul>\n<li>Will there be a period where Py2.7 is in security-only status before hitting EOL?</li>\n<li>via Nicola Iarocci\u200f <a href=\"https://twitter.com/nicolaiarocci\">@nicolaiarocci</a>\n<ul>\n<li>Yay, @gvanrossum makes it adamantly clear: \u201cLet's not play games with semantics. The way I see the situation for <strong>2.7 is that EOL is January 1st, 2020</strong>, and there will be no updates, <strong>not even source-only security patches</strong>, after that date.\u201d <strong>https://buff.ly/2pbZmBZ</strong> </li>\n</ul></li>\n<li>Support (from the core devs, the PSF, and python.org) stops completely on that date.</li>\n</ul>\n\n<p><strong>Follow up and other news</strong></p>\n\n<p><strong>Michael:</strong></p>\n\n<ul>\n<li>Eve: MongoDB &amp; Flask-backed RESTful APIs course is out!\n<ul>\n<li><strong><a href=\"https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course\">https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course</a></strong></li>\n</ul></li>\n<li>Shoutout to everyone I met at <a href=\"https://2018.pycon.sk/en/\">PyCon Slovakia</a></li>\n</ul>\n\n<p><strong>Brian:</strong> </p>\n\n<ul>\n<li>A couple of recent episodes on Test &amp; Code focusing on project test development:\n<ul>\n<li><a href=\"http://testandcode.com/37\">What tests to write first</a> </li>\n<li><a href=\"http://testandcode.com/38\">Prioritize software tests with RCRCRC</a></li>\n<li>Upcoming topics will include beefing up test coverage with things like equivalence partitioning, boundary value analysis, state transition diagrams, state tables, negative testing, \u2026</li>\n<li>Also learning a lot about developing an open source project and all the tools surrounding that. I\u2019ll discuss those topics in episodes as well.</li>\n<li>Project used in both episodes, <a href=\"https://github.com/okken/cards\">cards : a project task tracking / todo list app</a> that will be expanded as I go along talking about different test and software development topics.</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Sun, 18 Mar 2018 00:00:00 -0800", "published_parsed": [2018, 3, 18, 8, 0, 0, 6, 77, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Digging into StackOverflow's 2018 survey results", "itunes_episode": "69", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:00"}}, "#68 Python notebooks galore!": {"info": {"title": "#68 Python notebooks galore!", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#68 Python notebooks galore!"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/68/python-notebooks-galore"}, {"length": "218", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/68/python-notebooks-galore.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/68/python-notebooks-galore", "id": "https://pythonbytes.fm/episodes/d8fea18a-f9ed-4fdf-a577-e97dce2fc9d5", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean! <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/chriskuehl/dumb-pypi\"><strong>dumb-pypi</strong></a></p>\n\n<ul>\n<li>This takes some fiddling with and trial and error. I definitely need to write up my experiences with this as a blog post.</li>\n<li>Combine with <code>pip download</code> (covered in <a href=\"https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you\">episode 24</a>), this makes it super easy to create a static locally hosted pypi server, either for all of your packages, or for your proprietary packages.</li>\n<li>Roughly:</li>\n</ul>\n\n<pre><code>    pip download -d my-packages-dir &lt;package name&gt;\n    ls my-packages-dir &gt; package-list.txt\n    dumb-pypi --package-list my-packages-dir \\\n              --packages-url &lt;url of my server&gt; \\\n              --output-dir my-pypi\n</code></pre>\n\n<ul>\n<li>Now add something like this to requirements.txt or pip commands:</li>\n<li><code>--trusted-host &lt;my server name&gt; -i http://&lt;my server&gt;/my-pypi/simple</code></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/kennethreitz/requests-html\"><strong>Requests-HTML: HTML Parsing for Humans</strong></a></p>\n\n<ul>\n<li>This library intends to make parsing HTML (e.g. scraping the web) as simple and intuitive as possible.</li>\n<li>When using this library you automatically get:\n<ul>\n<li>Full JavaScript support!</li>\n<li>CSS Selectors (a.k.a jQuery-style, thanks to PyQuery).</li>\n<li>XPath Selectors, for the faint at heart.</li>\n<li>Mocked user-agent (like a real web browser).</li>\n<li>Automatic following of redirects.</li>\n<li>Connection\u2013pooling and cookie persistence.</li>\n<li>The Requests experience you know and love, with magical parsing abilities</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong>  <a href=\"https://www.twilio.com/blog/2018/02/phone-number-forward-mask-python-flask.html\"><strong>A phone number proxy</strong></a></p>\n\n<ul>\n<li>Naomi Pentrel, <a href=\"http://twitter.com/naomi_pen\">@naomi_pen</a> on twilio blog</li>\n<li>Set up a phone number that you can share for temporary events to send and receive texts that get forwarded to your actual number.</li>\n</ul>\n\n<p><strong>Michael #4: Notebooks galore part 1:</strong> <a href=\"https://datalore.io/\"><strong>Datalore</strong></a></p>\n\n<ul>\n<li>In cloud and ready to go</li>\n<li>Intelligent code editor</li>\n<li>Out-of-the-box Python tools</li>\n<li>Collaboration</li>\n<li>Integrated version control</li>\n<li>Incremental calculations: Improve and adjust models without hustling with additional recalculations. Datalore follows dependencies between multiple computations and automatically applies relevant recalculations.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/hchasestevens/bellybutton\"><strong>bellybutton</strong></a></p>\n\n<ul>\n<li>by Chase Stevens, <a href=\"https://twitter.com/hchasestevens\">@hchasestevens</a></li>\n<li>Tool for creating personal static analysis/style tools like <code>pycodestyle</code>, <code>pylint</code>, and <code>flake8</code></li>\n<li>Teams often have some of their own style requirements that can\u2019t be expressed as <code>flake8</code> flags and exceptions.</li>\n<li>Example: deprecating internal library functions and catching that by the linter. </li>\n</ul>\n\n<p><strong>Michael #6:Notebooks galore part 2</strong></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/Python/comments/7xwotz/python_36_jupyter_notebook_on_azure/?st=JDT0O9LI&amp;sh=0c41688d\">Python 3.6 Jupyter Notebook on Azure</a></li>\n<li><a href=\"https://colab.research.google.com/notebooks/welcome.ipynb\">Google Colaboratory</a></li>\n<li><a href=\"https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906\">JupyterLab is Ready for Users</a>\n<ul>\n<li>JupyterLab is an interactive development environment for working with notebooks, code and data. Most importantly, JupyterLab has full support for Jupyter notebooks. Additionally, JupyterLab enables you to use text editors, terminals, data file viewers, and other custom components side by side with notebooks in a tabbed work area.</li>\n</ul></li>\n<li>you can pip install python packages within python code itself. \n<ul>\n<li>Super useful in situation #1 when you need a package that's not included but you don't have access to the shell. </li>\n<li>If you need to upgrade a package. For example the Pandas version is a little old on Azure, so you can upgrade by simply running:</li>\n</ul></li>\n</ul>\n\n<pre><code>    import pip\n    pip.main(['install', 'pandas', '--upgrade'])\n</code></pre>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean! <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/chriskuehl/dumb-pypi\"><strong>dumb-pypi</strong></a></p>\n\n<ul>\n<li>This takes some fiddling with and trial and error. I definitely need to write up my experiences with this as a blog post.</li>\n<li>Combine with <code>pip download</code> (covered in <a href=\"https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you\">episode 24</a>), this makes it super easy to create a static locally hosted pypi server, either for all of your packages, or for your proprietary packages.</li>\n<li>Roughly:</li>\n</ul>\n\n<pre><code>    pip download -d my-packages-dir &lt;package name&gt;\n    ls my-packages-dir &gt; package-list.txt\n    dumb-pypi --package-list my-packages-dir \\\n              --packages-url &lt;url of my server&gt; \\\n              --output-dir my-pypi\n</code></pre>\n\n<ul>\n<li>Now add something like this to requirements.txt or pip commands:</li>\n<li><code>--trusted-host &lt;my server name&gt; -i http://&lt;my server&gt;/my-pypi/simple</code></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/kennethreitz/requests-html\"><strong>Requests-HTML: HTML Parsing for Humans</strong></a></p>\n\n<ul>\n<li>This library intends to make parsing HTML (e.g. scraping the web) as simple and intuitive as possible.</li>\n<li>When using this library you automatically get:\n<ul>\n<li>Full JavaScript support!</li>\n<li>CSS Selectors (a.k.a jQuery-style, thanks to PyQuery).</li>\n<li>XPath Selectors, for the faint at heart.</li>\n<li>Mocked user-agent (like a real web browser).</li>\n<li>Automatic following of redirects.</li>\n<li>Connection\u2013pooling and cookie persistence.</li>\n<li>The Requests experience you know and love, with magical parsing abilities</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong>  <a href=\"https://www.twilio.com/blog/2018/02/phone-number-forward-mask-python-flask.html\"><strong>A phone number proxy</strong></a></p>\n\n<ul>\n<li>Naomi Pentrel, <a href=\"http://twitter.com/naomi_pen\">@naomi_pen</a> on twilio blog</li>\n<li>Set up a phone number that you can share for temporary events to send and receive texts that get forwarded to your actual number.</li>\n</ul>\n\n<p><strong>Michael #4: Notebooks galore part 1:</strong> <a href=\"https://datalore.io/\"><strong>Datalore</strong></a></p>\n\n<ul>\n<li>In cloud and ready to go</li>\n<li>Intelligent code editor</li>\n<li>Out-of-the-box Python tools</li>\n<li>Collaboration</li>\n<li>Integrated version control</li>\n<li>Incremental calculations: Improve and adjust models without hustling with additional recalculations. Datalore follows dependencies between multiple computations and automatically applies relevant recalculations.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/hchasestevens/bellybutton\"><strong>bellybutton</strong></a></p>\n\n<ul>\n<li>by Chase Stevens, <a href=\"https://twitter.com/hchasestevens\">@hchasestevens</a></li>\n<li>Tool for creating personal static analysis/style tools like <code>pycodestyle</code>, <code>pylint</code>, and <code>flake8</code></li>\n<li>Teams often have some of their own style requirements that can\u2019t be expressed as <code>flake8</code> flags and exceptions.</li>\n<li>Example: deprecating internal library functions and catching that by the linter. </li>\n</ul>\n\n<p><strong>Michael #6:Notebooks galore part 2</strong></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/Python/comments/7xwotz/python_36_jupyter_notebook_on_azure/?st=JDT0O9LI&amp;sh=0c41688d\">Python 3.6 Jupyter Notebook on Azure</a></li>\n<li><a href=\"https://colab.research.google.com/notebooks/welcome.ipynb\">Google Colaboratory</a></li>\n<li><a href=\"https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906\">JupyterLab is Ready for Users</a>\n<ul>\n<li>JupyterLab is an interactive development environment for working with notebooks, code and data. Most importantly, JupyterLab has full support for Jupyter notebooks. Additionally, JupyterLab enables you to use text editors, terminals, data file viewers, and other custom components side by side with notebooks in a tabbed work area.</li>\n</ul></li>\n<li>you can pip install python packages within python code itself. \n<ul>\n<li>Super useful in situation #1 when you need a package that's not included but you don't have access to the shell. </li>\n<li>If you need to upgrade a package. For example the Pandas version is a little old on Azure, so you can upgrade by simply running:</li>\n</ul></li>\n</ul>\n\n<pre><code>    import pip\n    pip.main(['install', 'pandas', '--upgrade'])\n</code></pre>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 06 Mar 2018 00:00:00 -0800", "published_parsed": [2018, 3, 6, 8, 0, 0, 1, 65, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python notebooks galore!", "itunes_episode": "68", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:09"}}, "#67 Result of moving Python to Github": {"info": {"title": "#67 Result of moving Python to Github", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#67 Result of moving Python to Github"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/67/result-of-moving-python-to-github"}, {"length": "218", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/67/result-of-moving-python-to-github.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/67/result-of-moving-python-to-github", "id": "https://pythonbytes.fm/episodes/7b7011ab-f9cb-4e2d-abd8-f55a76d66437", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean! <a href=\"http://do.co/python\">http://<strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pythonforundergradengineers.com/how-i-built-this-site-1.html\"><strong>Building a blog with Pelican</strong></a></p>\n\n<ul>\n<li>We did cover Pelican in <a href=\"https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python\">episode 38</a>, but this is a nice tutorial in 7 parts on building a blog.</li>\n<li>Peter Kazarinoff, <a href=\"https://twitter.com/pkazarinoff\">@pkazarinoff</a>\n<ul>\n<li>Nice blog with a focus on engineering students.</li>\n</ul></li>\n<li>Starts with installing Python and git and some other tools.</li>\n<li>Step by step, every action to get a a blog up as a static site hosted on github pages.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://notifiers.readthedocs.io/en/latest/index.html\"><strong>Notifiers</strong></a> </p>\n\n<ul>\n<li>Got an app or service and you want to enable your users to use notifications with their provider of choice? </li>\n<li>Working on a script and you want to receive notification based on its output? </li>\n<li>A one stop shop for all notification providers with a unified and simple interface.</li>\n<li>A unified interface means that you already support any new providers that will be added, no more work needed!</li>\n<li>Some providers\n<ul>\n<li>Slack</li>\n<li>Gmail</li>\n<li>Telegram</li>\n<li>Gitter</li>\n<li>\u2026</li>\n</ul></li>\n<li>Python 3 only</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html\"><strong>Using Makefiles in Python projects</strong></a></p>\n\n<ul>\n<li>Krzysztof \u017buraw, <a href=\"https://twitter.com/krzysztof_zuraw\">@krzysztof_zuraw</a></li>\n<li>Alerted to this article from kidpixo, <a href=\"https://twitter.com/kidpixo\">@kidpixo</a></li>\n<li>We don\u2019t usually think of Makefiles and Python together, but they can be a handy place to keep common scripts for a project all in one place.</li>\n<li>This article is a nice gentle intro to Makefiles and shows some cool uses:\n<ul>\n<li>cleaning out .pyc files</li>\n<li>cleaning out egg directories</li>\n<li>linting</li>\n<li>running tests with flags</li>\n<li>starting a test server</li>\n<li>deploying</li>\n<li>sorting import files</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/Python/comments/7qt4x3/result_of_moving_python_to_github/\"><strong>Result of moving Python to Github</strong></a></p>\n\n<ul>\n<li>See the graph linked in the post</li>\n<li>A couple of quick numbers (including PRs too) from 2017 compared to 2016:\n<ul>\n<li>the number of commit has increased by 190%</li>\n<li>inserted lines of code has increased by 140%</li>\n<li>number of unique contributors has increased by 1300%</li>\n<li>number of returning contributors has increased by 900%</li>\n</ul></li>\n<li>One comment was: \u201cPersonally, I would like them moving to Gitlab instead, but still good news.\u201d I tend to disagree.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo\"><strong>Self-Deprecation Needs to</strong></a> <a href=\"https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo\"><strong>Stop</strong></a></p>\n\n<ul>\n<li>Maurice Hayward, <a href=\"https://twitter.com/maurice_hayward\"><strong>@</strong></a><a href=\"https://twitter.com/maurice_hayward\">maurice_hayward</a></li>\n<li>Inspired by some tweets by Stephanie Hurlburt, <a href=\"https://twitter.com/sehurlburt\"><strong>@</strong></a><a href=\"https://twitter.com/sehurlburt\">sehurlburt</a></li>\n<li><strong>Stop saying these words when describing yourself or your accomplishments.</strong> \nThese words are now under BAN:\n\"My project is...\"\n    - very small/basic/simple\n    - not that good\n    - a thing I wrote\n    - just by a newbie\n    - something I didn't spend a lot of time/effort on\n    - silly\n    - not that useful\nJust state the topic and let others be the judge.</li>\n<li><strong>Really think about the value you bring, then let everybody know.</strong></li>\n<li><strong>Be Proud of Yourself!</strong></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/5-speed-improvements-in-python-3-7-1b39d1581d86\"><strong>5 speed improvements in Python 3.7</strong></a></p>\n\n<ol>\n<li><strong>Calling methods faster (maybe)</strong>\n<ol>\n<li>Python 3.7 adds 2 new Opcodes, LOAD_METHOD and CALL_METHOD for when the compiler sees x.method(...) it uses these new Opcodes.</li>\n<li>Bound methods with no arguments are now faster</li>\n</ol></li>\n<li><strong>str.find() is faster for some characters</strong>\n<ol>\n<li>Some unicode characters have an unfortunate issue when scanning a string for occurrences using str.find(x), seeing up to 25x slow down.</li>\n<li>These are still slower, but now 3x slower than ASCII characters instead of 25x!</li>\n</ol></li>\n<li><strong>os.fwalk is 2x faster</strong></li>\n<li><strong>Regular expressions are faster</strong>\n<ol>\n<li>A change was made in Python 3.6 which slowed down this call when flags were passed which were integers. Python 3.7 \u201cfixes\u201d the slowdown but is still not as fast as Python 3.5</li>\n</ol></li>\n<li><strong>Regular expressions are faster for case-insensitive matching</strong>\n<ol>\n<li>The speed improvement is significant, if you\u2019re matching ASCII characters you can see up to a 20x improvements in matching time since it\u2019s now doing a lookup instead of running lower() over each character.</li>\n</ol></li>\n</ol>\n\n<p>Follow up and other news</p>\n\n<p>Brian: </p>\n\n<ul>\n<li><a href=\"https://pyfound.blogspot.com/2018/02/python-package-maintainers-help-test.html\">Python package maintainers, help test the new PyPI!</a></li>\n<li><a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-productive-pytest-with-pycharm/\">pytest/pycharm webinar is up</a>.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean! <a href=\"http://do.co/python\">http://<strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pythonforundergradengineers.com/how-i-built-this-site-1.html\"><strong>Building a blog with Pelican</strong></a></p>\n\n<ul>\n<li>We did cover Pelican in <a href=\"https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python\">episode 38</a>, but this is a nice tutorial in 7 parts on building a blog.</li>\n<li>Peter Kazarinoff, <a href=\"https://twitter.com/pkazarinoff\">@pkazarinoff</a>\n<ul>\n<li>Nice blog with a focus on engineering students.</li>\n</ul></li>\n<li>Starts with installing Python and git and some other tools.</li>\n<li>Step by step, every action to get a a blog up as a static site hosted on github pages.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://notifiers.readthedocs.io/en/latest/index.html\"><strong>Notifiers</strong></a> </p>\n\n<ul>\n<li>Got an app or service and you want to enable your users to use notifications with their provider of choice? </li>\n<li>Working on a script and you want to receive notification based on its output? </li>\n<li>A one stop shop for all notification providers with a unified and simple interface.</li>\n<li>A unified interface means that you already support any new providers that will be added, no more work needed!</li>\n<li>Some providers\n<ul>\n<li>Slack</li>\n<li>Gmail</li>\n<li>Telegram</li>\n<li>Gitter</li>\n<li>\u2026</li>\n</ul></li>\n<li>Python 3 only</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html\"><strong>Using Makefiles in Python projects</strong></a></p>\n\n<ul>\n<li>Krzysztof \u017buraw, <a href=\"https://twitter.com/krzysztof_zuraw\">@krzysztof_zuraw</a></li>\n<li>Alerted to this article from kidpixo, <a href=\"https://twitter.com/kidpixo\">@kidpixo</a></li>\n<li>We don\u2019t usually think of Makefiles and Python together, but they can be a handy place to keep common scripts for a project all in one place.</li>\n<li>This article is a nice gentle intro to Makefiles and shows some cool uses:\n<ul>\n<li>cleaning out .pyc files</li>\n<li>cleaning out egg directories</li>\n<li>linting</li>\n<li>running tests with flags</li>\n<li>starting a test server</li>\n<li>deploying</li>\n<li>sorting import files</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/Python/comments/7qt4x3/result_of_moving_python_to_github/\"><strong>Result of moving Python to Github</strong></a></p>\n\n<ul>\n<li>See the graph linked in the post</li>\n<li>A couple of quick numbers (including PRs too) from 2017 compared to 2016:\n<ul>\n<li>the number of commit has increased by 190%</li>\n<li>inserted lines of code has increased by 140%</li>\n<li>number of unique contributors has increased by 1300%</li>\n<li>number of returning contributors has increased by 900%</li>\n</ul></li>\n<li>One comment was: \u201cPersonally, I would like them moving to Gitlab instead, but still good news.\u201d I tend to disagree.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo\"><strong>Self-Deprecation Needs to</strong></a> <a href=\"https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo\"><strong>Stop</strong></a></p>\n\n<ul>\n<li>Maurice Hayward, <a href=\"https://twitter.com/maurice_hayward\"><strong>@</strong></a><a href=\"https://twitter.com/maurice_hayward\">maurice_hayward</a></li>\n<li>Inspired by some tweets by Stephanie Hurlburt, <a href=\"https://twitter.com/sehurlburt\"><strong>@</strong></a><a href=\"https://twitter.com/sehurlburt\">sehurlburt</a></li>\n<li><strong>Stop saying these words when describing yourself or your accomplishments.</strong> \nThese words are now under BAN:\n\"My project is...\"\n    - very small/basic/simple\n    - not that good\n    - a thing I wrote\n    - just by a newbie\n    - something I didn't spend a lot of time/effort on\n    - silly\n    - not that useful\nJust state the topic and let others be the judge.</li>\n<li><strong>Really think about the value you bring, then let everybody know.</strong></li>\n<li><strong>Be Proud of Yourself!</strong></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/5-speed-improvements-in-python-3-7-1b39d1581d86\"><strong>5 speed improvements in Python 3.7</strong></a></p>\n\n<ol>\n<li><strong>Calling methods faster (maybe)</strong>\n<ol>\n<li>Python 3.7 adds 2 new Opcodes, LOAD_METHOD and CALL_METHOD for when the compiler sees x.method(...) it uses these new Opcodes.</li>\n<li>Bound methods with no arguments are now faster</li>\n</ol></li>\n<li><strong>str.find() is faster for some characters</strong>\n<ol>\n<li>Some unicode characters have an unfortunate issue when scanning a string for occurrences using str.find(x), seeing up to 25x slow down.</li>\n<li>These are still slower, but now 3x slower than ASCII characters instead of 25x!</li>\n</ol></li>\n<li><strong>os.fwalk is 2x faster</strong></li>\n<li><strong>Regular expressions are faster</strong>\n<ol>\n<li>A change was made in Python 3.6 which slowed down this call when flags were passed which were integers. Python 3.7 \u201cfixes\u201d the slowdown but is still not as fast as Python 3.5</li>\n</ol></li>\n<li><strong>Regular expressions are faster for case-insensitive matching</strong>\n<ol>\n<li>The speed improvement is significant, if you\u2019re matching ASCII characters you can see up to a 20x improvements in matching time since it\u2019s now doing a lookup instead of running lower() over each character.</li>\n</ol></li>\n</ol>\n\n<p>Follow up and other news</p>\n\n<p>Brian: </p>\n\n<ul>\n<li><a href=\"https://pyfound.blogspot.com/2018/02/python-package-maintainers-help-test.html\">Python package maintainers, help test the new PyPI!</a></li>\n<li><a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-productive-pytest-with-pycharm/\">pytest/pycharm webinar is up</a>.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 01 Mar 2018 00:00:00 -0800", "published_parsed": [2018, 3, 1, 8, 0, 0, 3, 60, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Result of moving Python to Github", "itunes_episode": "67", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:56"}}, "#66 Wait, NoSQL with ACID and transactions?": {"info": {"title": "#66 Wait, NoSQL with ACID and transactions?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#66 Wait, NoSQL with ACID and transactions?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/66/wait-nosql-with-acid-and-transactions"}, {"length": "218", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/66/wait-nosql-with-acid-and-transactions.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/66/wait-nosql-with-acid-and-transactions", "id": "https://pythonbytes.fm/episodes/3c1da96e-464d-45d1-8d6f-a8f7eef4727b", "guidislink": false, "summary": "<p>Sponsored by Rollbar: <strong><a href=\"https://pythonbytes.fm/rollbar\">https://pythonbytes.fm/rollbar</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://realpython.com/blog/python/python3-object-oriented-programming/\"><strong>Object-Oriented Programming (OOP) in Python 3</strong></a></p>\n\n<ul>\n<li>Real Python</li>\n<li>Nice modern introduction to classes, inheritance, and OOP.</li>\n<li>Classes, objects, attributes, instances, and inheritance.</li>\n<li>One gotcha not mentioned\n<ul>\n<li>The <code>__init__()</code> method of a base class is not called automatically by derived classes. If you override it, you need to call <code>super().__init__()</code>.</li>\n</ul></li>\n<li>Also, check out <a href=\"http://www.attrs.org\">attrs</a> for much of our OOP needs</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/SimonBiggs/scriptedforms\"><strong>ScriptedForms</strong></a></p>\n\n<ul>\n<li>Quickly create live-update GUIs for Python packages using Markdown and a few custom HTML elements. </li>\n<li>Just write in markdown + variables / UI types</li>\n<li>Based on Jupyter</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.mongodb.com/blog/post/multi-document-transactions-in-mongodb\"><strong>MongoDB to add multi-document transactions and ACID</strong></a></p>\n\n<ul>\n<li>Mind blown. Didn\u2019t see this coming</li>\n<li>\u201cMongoDB 4.0 will add support for multi-document transactions, making it the only database to combine the speed, flexibility, and power of the document model with ACID data integrity guarantees. Through snapshot isolation, transactions provide a globally consistent view of data, and enforce all-or-nothing execution to maintain data integrity.\u201d</li>\n<li>Due out this summer.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/\"><strong>Python packaging pitfalls</strong></a></p>\n\n<ul>\n<li>Just a short list of packaging blunders\n<ul>\n<li>Forgetting to clean the build dir</li>\n<li>Forgetting to specify package data</li>\n<li>Fine grained MANIFEST.in</li>\n<li>Using package_data, or worse: fine grained package_data</li>\n<li>Listing excludes/prunes before includes/grafts</li>\n<li>Hardcoding packages list in setup.py</li>\n<li>Hardcoding py_modules list in setup.py</li>\n<li>Importing your package in setup.py</li>\n<li>Importing unavailable tools in setup.py</li>\n<li>Messing with the environment</li>\n<li>Your tests do not test the installed code</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://jvns.ca/blog/2017/03/20/blogging-principles/\"><strong>Blogging principles</strong></a></p>\n\n<ul>\n<li>Julia Evans @b0rk</li>\n<li>Be honest about what you know</li>\n<li>Try not to write anything too long.\n<ul>\n<li>(My note: don\u2019t shy away from long tutorials. Just don\u2019t only do long stuff)</li>\n</ul></li>\n<li>Be positive.</li>\n<li>Write for the past you. </li>\n<li>Stick with your own experience.</li>\n<li>It\u2019s ok if not everyone likes it\n<ul>\n<li>Don\u2019t try to keep one upping yourself.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/pypa/pipenv\"><strong>pipenv is officially official</strong></a></p>\n\n<ul>\n<li>Pipenv \u2014 the officially recommended Python packaging tool from Python.org, free (as in freedom).\n<ul>\n<li>Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. </li>\n<li>Windows is a first\u2013class citizen, in our world.</li>\n</ul></li>\n<li>Benefits?\n<ul>\n<li>It automatically creates and manages a virtualenv for your projects</li>\n<li>adds/removes packages from your Pipfile as you install/uninstall packages</li>\n<li>generates the ever\u2013important Pipfile.lock, which is used to produce deterministic builds.</li>\n</ul></li>\n</ul>\n\n<p>Follow up and other news</p>\n\n<p><strong>Brian</strong></p>\n\n<ul>\n<li>Productive pytest with PyCharm webinar was recorded Thursday 22nd of Feb. </li>\n<li>Will be available here: <a href=\"https://www.jetbrains.com/community/webinars/\"><strong>https://www.jetbrains.com/community/webinars/</strong></a></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li>Embed Python in Unreal Engine 4 <strong><a href=\"https://github.com/20tab/UnrealEnginePython\">https://github.com/20tab/UnrealEnginePython</a></strong></li>\n<li>Pandas documentation sprint <strong><a href=\"https://python-sprints.github.io/pandas\">https://python-sprints.github.io/pandas</a></strong></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar: <strong><a href=\"https://pythonbytes.fm/rollbar\">https://pythonbytes.fm/rollbar</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://realpython.com/blog/python/python3-object-oriented-programming/\"><strong>Object-Oriented Programming (OOP) in Python 3</strong></a></p>\n\n<ul>\n<li>Real Python</li>\n<li>Nice modern introduction to classes, inheritance, and OOP.</li>\n<li>Classes, objects, attributes, instances, and inheritance.</li>\n<li>One gotcha not mentioned\n<ul>\n<li>The <code>__init__()</code> method of a base class is not called automatically by derived classes. If you override it, you need to call <code>super().__init__()</code>.</li>\n</ul></li>\n<li>Also, check out <a href=\"http://www.attrs.org\">attrs</a> for much of our OOP needs</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/SimonBiggs/scriptedforms\"><strong>ScriptedForms</strong></a></p>\n\n<ul>\n<li>Quickly create live-update GUIs for Python packages using Markdown and a few custom HTML elements. </li>\n<li>Just write in markdown + variables / UI types</li>\n<li>Based on Jupyter</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.mongodb.com/blog/post/multi-document-transactions-in-mongodb\"><strong>MongoDB to add multi-document transactions and ACID</strong></a></p>\n\n<ul>\n<li>Mind blown. Didn\u2019t see this coming</li>\n<li>\u201cMongoDB 4.0 will add support for multi-document transactions, making it the only database to combine the speed, flexibility, and power of the document model with ACID data integrity guarantees. Through snapshot isolation, transactions provide a globally consistent view of data, and enforce all-or-nothing execution to maintain data integrity.\u201d</li>\n<li>Due out this summer.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/\"><strong>Python packaging pitfalls</strong></a></p>\n\n<ul>\n<li>Just a short list of packaging blunders\n<ul>\n<li>Forgetting to clean the build dir</li>\n<li>Forgetting to specify package data</li>\n<li>Fine grained MANIFEST.in</li>\n<li>Using package_data, or worse: fine grained package_data</li>\n<li>Listing excludes/prunes before includes/grafts</li>\n<li>Hardcoding packages list in setup.py</li>\n<li>Hardcoding py_modules list in setup.py</li>\n<li>Importing your package in setup.py</li>\n<li>Importing unavailable tools in setup.py</li>\n<li>Messing with the environment</li>\n<li>Your tests do not test the installed code</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://jvns.ca/blog/2017/03/20/blogging-principles/\"><strong>Blogging principles</strong></a></p>\n\n<ul>\n<li>Julia Evans @b0rk</li>\n<li>Be honest about what you know</li>\n<li>Try not to write anything too long.\n<ul>\n<li>(My note: don\u2019t shy away from long tutorials. Just don\u2019t only do long stuff)</li>\n</ul></li>\n<li>Be positive.</li>\n<li>Write for the past you. </li>\n<li>Stick with your own experience.</li>\n<li>It\u2019s ok if not everyone likes it\n<ul>\n<li>Don\u2019t try to keep one upping yourself.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/pypa/pipenv\"><strong>pipenv is officially official</strong></a></p>\n\n<ul>\n<li>Pipenv \u2014 the officially recommended Python packaging tool from Python.org, free (as in freedom).\n<ul>\n<li>Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. </li>\n<li>Windows is a first\u2013class citizen, in our world.</li>\n</ul></li>\n<li>Benefits?\n<ul>\n<li>It automatically creates and manages a virtualenv for your projects</li>\n<li>adds/removes packages from your Pipfile as you install/uninstall packages</li>\n<li>generates the ever\u2013important Pipfile.lock, which is used to produce deterministic builds.</li>\n</ul></li>\n</ul>\n\n<p>Follow up and other news</p>\n\n<p><strong>Brian</strong></p>\n\n<ul>\n<li>Productive pytest with PyCharm webinar was recorded Thursday 22nd of Feb. </li>\n<li>Will be available here: <a href=\"https://www.jetbrains.com/community/webinars/\"><strong>https://www.jetbrains.com/community/webinars/</strong></a></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li>Embed Python in Unreal Engine 4 <strong><a href=\"https://github.com/20tab/UnrealEnginePython\">https://github.com/20tab/UnrealEnginePython</a></strong></li>\n<li>Pandas documentation sprint <strong><a href=\"https://python-sprints.github.io/pandas\">https://python-sprints.github.io/pandas</a></strong></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 23 Feb 2018 00:00:00 -0800", "published_parsed": [2018, 2, 23, 8, 0, 0, 4, 54, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Wait, NoSQL with ACID and transactions?", "itunes_episode": "66", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:43"}}, "#65 Speed of your import statements affecting performance?": {"info": {"title": "#65 Speed of your import statements affecting performance?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#65 Speed of your import statements affecting performance?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/65/speed-of-your-import-statements-affecting-performance"}, {"length": "218", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/65/speed-of-your-import-statements-affecting-performance.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/65/speed-of-your-import-statements-affecting-performance", "id": "https://pythonbytes.fm/episodes/6a23938e-d730-4555-a5b0-49524bef694e", "guidislink": false, "summary": "<p>Sponsored by Rollbar: <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pygal.org/en/stable/\"><strong>pygal</strong></a> <strong>: Simple Python Charting</strong> </p>\n\n<ul>\n<li>Output SVG or PNG</li>\n<li>Example Flask App (also django response) part of documentation.</li>\n<li>Enough other bits of doc to get you a chart in a web page super fast.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/learnprogramming/comments/7udoiv/how_many_of_you_selfstudied_programming_and_are/\"><strong>Thoughts on becoming a self-taught programming</strong></a></p>\n\n<ul>\n<li>Basic format:</li>\n<li>I'm 31 days into self-studying Python and am loving every minute of it!</li>\n<li>A few questions:\n<ul>\n<li>What were you doing before you began self-studying programming?</li>\n<li>What made you want to study programming on your own?</li>\n<li>How did you start (which resources and language)?</li>\n<li>How long did it take for you to feel confident enough in your skills and knowledge to know you could be employed as a programmer?</li>\n<li>What else did you do besides self-study that helped you in your journey to becoming a programmer?</li>\n<li>What's next for you?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://dev.to/methane/how-to-speed-up-python-application-startup-time-nkf\"><strong>How to speed up Python application startup time (timing imports in 3.7)</strong></a></p>\n\n<ul>\n<li>Python 3.7 includes <code>-X importtime</code> option that allows you to profile the time it takes to do all the imports.</li>\n<li>Way cool tool to help optimize the startup time of an application.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.anpylar.com/\">AnPyLar - The Python web front-end framework</a></p>\n\n<ul>\n<li>Create web applications with elegance, simplicity and yet full power with Python and components</li>\n<li>MISSION: Empower all Python programmers to work not only on the back-end but also on the front-end with the same language of choice</li>\n<li>Features\n<ul>\n<li>Reactive programming and Promises</li>\n<li>Python standard formatting as templates</li>\n<li>reusable components</li>\n<li>Scoped styling for component</li>\n<li>Integrated routing engine</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/arogozhnikov/python3_with_pleasure/blob/master/README.md\"><strong>Migrating to Python 3 with pleasure</strong></a></p>\n\n<ul>\n<li><strong>\u201cA short guide on features of Python 3 for data scientists\u201d</strong></li>\n<li>Quick tutorial through examples of <code>pathlib</code>.</li>\n<li>Type hinting and how cool it works with editors (PyCharm example shown)</li>\n<li>Adding runtime type enforcement for specific methods using <a href=\"https://github.com/RussBaz/enforce\">enforce</a></li>\n<li>Using function annotations for units, as done in <a href=\"http://docs.astropy.org/en/stable/units/quantity.html#functions-that-accept-quantities\">astropy</a>. </li>\n<li>Matrix multiplication with <code>@</code>.</li>\n<li>Globbing with <code>**</code>. \n<ul>\n<li><code>found_images = glob.glob('/path/**/*.jpg', recursive=True)</code></li>\n</ul></li>\n<li>Also \u2026 underscores in numeric literals, f-strings, true division with <code>/</code>, integer division with <code>//</code>, and lots of more fun goodies.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://engineering.ticketea.com/ticketea-migrates-python3-in-two-weeks/\"><strong>Moving to Python 3</strong></a></p>\n\n<ul>\n<li>Many of these issues were corrected just by running 2to3, which not only fixed many of the compatibility issues\n<ul>\n<li>Outdated external libraries which needed to be updated to newer versions featuring Python 3 compatibility\n<code>basestring</code> to <code>str</code>, <code>urlparse</code> to <code>urllib.urlparse</code> and similar major changes</li>\n<li>Dictionary change like <code>iteritems()</code> to <code>items()</code>, or <code>.items()</code> now returning a view.</li>\n<li>Things that weren't needed anymore, like Django's <code>force_unicode</code> or <code>__future__</code> library tools.</li>\n</ul></li>\n<li>Once we finished working on the \"low-hanging fruits\", the next step was to run Aphrodite's test suite and achieve zero errors.</li>\n<li>Lessons learned\n<ul>\n<li>Code coverage was originally around 70%,</li>\n<li>Keeping the Python 3 branch up to date with master</li>\n<li>A non-trivial feature was delivered during the migration (via feature branch)</li>\n<li>The pickle protocol version in python 3 can be higher than the highest available in Python 2.7. So we needed to add versioning to our Django caches</li>\n<li>Each modified file had to comply with flake8 linting rules</li>\n</ul></li>\n<li>Afrodita is currently running on Google App Engine Flexible, and one of the features our team loves with is traffic splitting</li>\n<li>With this feature, we can do <a href=\"https://martinfowler.com/bliki/CanaryRelease.html\">canary releases</a> with ease: We just deploy our new version of the service, and start redirecting small amounts of traffic traffic while we monitor for unexpected errors.</li>\n<li>After some minor bugfixes, we could bring the traffic of the Python 3.6 version to 100% with confidence. We also had the old version available for instant rollback, thanks to how parallel versions and traffic splitting work in GAE flexible.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Brian:</p>\n\n<ul>\n<li>Upcoming webinar: <a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/\">Productive pytest with Pycharm</a></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li>My GUI example: <a href=\"https://github.com/mikeckennedy/pyramid-web-builder-python-gui\">https://github.com/mikeckennedy/pyramid-web-builder-python-gui</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar: <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pygal.org/en/stable/\"><strong>pygal</strong></a> <strong>: Simple Python Charting</strong> </p>\n\n<ul>\n<li>Output SVG or PNG</li>\n<li>Example Flask App (also django response) part of documentation.</li>\n<li>Enough other bits of doc to get you a chart in a web page super fast.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/learnprogramming/comments/7udoiv/how_many_of_you_selfstudied_programming_and_are/\"><strong>Thoughts on becoming a self-taught programming</strong></a></p>\n\n<ul>\n<li>Basic format:</li>\n<li>I'm 31 days into self-studying Python and am loving every minute of it!</li>\n<li>A few questions:\n<ul>\n<li>What were you doing before you began self-studying programming?</li>\n<li>What made you want to study programming on your own?</li>\n<li>How did you start (which resources and language)?</li>\n<li>How long did it take for you to feel confident enough in your skills and knowledge to know you could be employed as a programmer?</li>\n<li>What else did you do besides self-study that helped you in your journey to becoming a programmer?</li>\n<li>What's next for you?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://dev.to/methane/how-to-speed-up-python-application-startup-time-nkf\"><strong>How to speed up Python application startup time (timing imports in 3.7)</strong></a></p>\n\n<ul>\n<li>Python 3.7 includes <code>-X importtime</code> option that allows you to profile the time it takes to do all the imports.</li>\n<li>Way cool tool to help optimize the startup time of an application.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.anpylar.com/\">AnPyLar - The Python web front-end framework</a></p>\n\n<ul>\n<li>Create web applications with elegance, simplicity and yet full power with Python and components</li>\n<li>MISSION: Empower all Python programmers to work not only on the back-end but also on the front-end with the same language of choice</li>\n<li>Features\n<ul>\n<li>Reactive programming and Promises</li>\n<li>Python standard formatting as templates</li>\n<li>reusable components</li>\n<li>Scoped styling for component</li>\n<li>Integrated routing engine</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/arogozhnikov/python3_with_pleasure/blob/master/README.md\"><strong>Migrating to Python 3 with pleasure</strong></a></p>\n\n<ul>\n<li><strong>\u201cA short guide on features of Python 3 for data scientists\u201d</strong></li>\n<li>Quick tutorial through examples of <code>pathlib</code>.</li>\n<li>Type hinting and how cool it works with editors (PyCharm example shown)</li>\n<li>Adding runtime type enforcement for specific methods using <a href=\"https://github.com/RussBaz/enforce\">enforce</a></li>\n<li>Using function annotations for units, as done in <a href=\"http://docs.astropy.org/en/stable/units/quantity.html#functions-that-accept-quantities\">astropy</a>. </li>\n<li>Matrix multiplication with <code>@</code>.</li>\n<li>Globbing with <code>**</code>. \n<ul>\n<li><code>found_images = glob.glob('/path/**/*.jpg', recursive=True)</code></li>\n</ul></li>\n<li>Also \u2026 underscores in numeric literals, f-strings, true division with <code>/</code>, integer division with <code>//</code>, and lots of more fun goodies.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://engineering.ticketea.com/ticketea-migrates-python3-in-two-weeks/\"><strong>Moving to Python 3</strong></a></p>\n\n<ul>\n<li>Many of these issues were corrected just by running 2to3, which not only fixed many of the compatibility issues\n<ul>\n<li>Outdated external libraries which needed to be updated to newer versions featuring Python 3 compatibility\n<code>basestring</code> to <code>str</code>, <code>urlparse</code> to <code>urllib.urlparse</code> and similar major changes</li>\n<li>Dictionary change like <code>iteritems()</code> to <code>items()</code>, or <code>.items()</code> now returning a view.</li>\n<li>Things that weren't needed anymore, like Django's <code>force_unicode</code> or <code>__future__</code> library tools.</li>\n</ul></li>\n<li>Once we finished working on the \"low-hanging fruits\", the next step was to run Aphrodite's test suite and achieve zero errors.</li>\n<li>Lessons learned\n<ul>\n<li>Code coverage was originally around 70%,</li>\n<li>Keeping the Python 3 branch up to date with master</li>\n<li>A non-trivial feature was delivered during the migration (via feature branch)</li>\n<li>The pickle protocol version in python 3 can be higher than the highest available in Python 2.7. So we needed to add versioning to our Django caches</li>\n<li>Each modified file had to comply with flake8 linting rules</li>\n</ul></li>\n<li>Afrodita is currently running on Google App Engine Flexible, and one of the features our team loves with is traffic splitting</li>\n<li>With this feature, we can do <a href=\"https://martinfowler.com/bliki/CanaryRelease.html\">canary releases</a> with ease: We just deploy our new version of the service, and start redirecting small amounts of traffic traffic while we monitor for unexpected errors.</li>\n<li>After some minor bugfixes, we could bring the traffic of the Python 3.6 version to 100% with confidence. We also had the old version available for instant rollback, thanks to how parallel versions and traffic splitting work in GAE flexible.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Brian:</p>\n\n<ul>\n<li>Upcoming webinar: <a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/\">Productive pytest with Pycharm</a></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li>My GUI example: <a href=\"https://github.com/mikeckennedy/pyramid-web-builder-python-gui\">https://github.com/mikeckennedy/pyramid-web-builder-python-gui</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 14 Feb 2018 00:00:00 -0800", "published_parsed": [2018, 2, 14, 8, 0, 0, 2, 45, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Speed of your import statements affecting performance?", "itunes_episode": "65", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:27:07"}}, "#64 The GUI phoenix rises with wxPython": {"info": {"title": "#64 The GUI phoenix rises with wxPython", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#64 The GUI phoenix rises with wxPython"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/64/the-gui-phoenix-rises-with-wxpython"}, {"length": "216", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/64/the-gui-phoenix-rises-with-wxpython.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/64/the-gui-phoenix-rises-with-wxpython", "id": "https://pythonbytes.fm/episodes/ff79359f-2982-47b1-8952-baa405d8a51b", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1: wxPython 4,</strong> <strong>Pheonix is now live and supports Python 3</strong></p>\n\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/wxPython/4.0.0\">wxPython on PyPI</a></li>\n<li><a href=\"https://www.wxpython.org/news/wxpython-4.0.0-release/index.html\">4.0.0</a>, <a href=\"https://www.wxpython.org/news/wxpython-4.0.1-release/index.html\">4.0.1 release notes</a></li>\n<li>If you haven\u2019t played with wxPython for a while, now might be a good time.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/python/typeshed\"><strong>typeshed</strong></a></p>\n\n<ul>\n<li>Typeshed contains external type annotations for the Python standard library and Python builtins, as well as third party packages.</li>\n<li>This data can e.g. be used for static analysis, type checking or type inference. </li>\n<li>Used as the basis of mypy and PyCharm\u2019s magic</li>\n<li>Each Python module is represented by a .pyi \"stub\". This is a normal Python file (i.e., it can be interpreted by Python 3), except all the methods are empty. Python function annotations (PEP 3107) are used to describe the types the function has.</li>\n<li>Here\u2019s what one of these exeternal definitions looks like:</li>\n</ul>\n\n<pre><code>     class NodeVisitor():\n        def visit(self, node: AST) -&gt; Any: ...\n        def generic_visit(self, node: AST) -&gt; None: ...\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://nedbatchelder.com/blog/201802/coverage_45.html\"><strong>Coverage 4.5 adds configurator plug-ins</strong></a></p>\n\n<ul>\n<li>\u201cThere\u2019s one new feature: <a href=\"http://coverage.readthedocs.io/en/latest/api_plugin.html#configurers\">configurator plug-ins</a>, that let you run Python code at startup to set the configuration for coverage. This side-steps a requested feature to have different exclusion pragmas for different versions of Python.\u201d</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.unrealengine.com/en-US/blog/technology-sneak-peek-python-in-unreal-engine\"><strong>Python integrated into Unreal Engine</strong></a></p>\n\n<ul>\n<li>via  Pirogov Alexander\u200f ( <a href=\"https://twitter.com/Pie_Daddy/status/948934041985781760\">@Pie_Daddy</a> )</li>\n<li>tl;dr: Autodesk university plans to integrate Python into Unreal Engine for the data integration pipeline and ease the process of bringing assets into the game.</li>\n<li>Autodesk is working on that will solve complicated problems with bringing CAD data into the Unreal Engine.</li>\n<li>Where they are today: \n<ul>\n<li>The Datasmith workflow toolkit, currently in beta, makes moving data into Unreal Engine as frictionless as possible. </li>\n<li>Datasmith provides high-fidelity translation of common scene assets such as geometry, textures, materials, lights and cameras from popular DCC and CAD applications into Unreal Engine.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.python.org/downloads/release/python-370b1/\"><strong>Python 3.7.0b1</strong></a> <strong>: Beta means we should be testing it!!!</strong></p>\n\n<ul>\n<li>If not people like us and our listeners, then who? Seems like we\u2019re a good set of beta testers.</li>\n<li>What are you going to test?</li>\n<li>I'm going to look at breakpoint() and data classes.</li>\n</ul>\n\n<p><strong>Michael #6: Releases abound!</strong></p>\n\n<ul>\n<li>Django security releases issued: 2.0.2 and 1.11.10\n<a href=\"https://www.djangoproject.com/weblog/2018/feb/01/security-releases/\">https://www.djangoproject.com/weblog/2018/feb/01/security-releases/</a></li>\n<li>Python 3.4.8 (security)\n<a href=\"https://www.python.org/downloads/release/python-348/\">https://www.python.org/downloads/release/python-348/</a></li>\n<li>Python 3.5.5 (security)\n<a href=\"https://www.python.org/downloads/release/python-355/\">https://www.python.org/downloads/release/python-355/</a>\n<ul>\n<li>libexpat XML lib had a security issue</li>\n</ul></li>\n<li>Channels 2.0 is a major rewrite of Channels\nhttps://channels.readthedocs.io/en/latest/releases/2.0.0.html\n<ul>\n<li>See <a href=\"https://talkpython.fm/episodes/show/98/adding-concurrency-to-django-with-django-channels\">Talk Python\u2019s interview</a> for more details</li>\n<li>Notably: Python 2.7 and 3.4 are no longer supported.</li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Brian:</p>\n\n<ul>\n<li>Speaking at PyCon 2018. \u201cPyCharm and pytest\u201d. Speaking with Paul Everitt</li>\n<li>Upcoming webinar: <a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/\">Productive pytest with Pycharm</a>\n<ul>\n<li>Feb 22, registration open</li>\n</ul></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li><a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-mongodb-quickstart-with-python-and-pycharm-with-michael-kennedy/\"><strong>Webinar Recording:</strong></a> \u201cMongoDB Quickstart with Python and PyCharm\u201d with Michael Kennedy</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1: wxPython 4,</strong> <strong>Pheonix is now live and supports Python 3</strong></p>\n\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/wxPython/4.0.0\">wxPython on PyPI</a></li>\n<li><a href=\"https://www.wxpython.org/news/wxpython-4.0.0-release/index.html\">4.0.0</a>, <a href=\"https://www.wxpython.org/news/wxpython-4.0.1-release/index.html\">4.0.1 release notes</a></li>\n<li>If you haven\u2019t played with wxPython for a while, now might be a good time.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/python/typeshed\"><strong>typeshed</strong></a></p>\n\n<ul>\n<li>Typeshed contains external type annotations for the Python standard library and Python builtins, as well as third party packages.</li>\n<li>This data can e.g. be used for static analysis, type checking or type inference. </li>\n<li>Used as the basis of mypy and PyCharm\u2019s magic</li>\n<li>Each Python module is represented by a .pyi \"stub\". This is a normal Python file (i.e., it can be interpreted by Python 3), except all the methods are empty. Python function annotations (PEP 3107) are used to describe the types the function has.</li>\n<li>Here\u2019s what one of these exeternal definitions looks like:</li>\n</ul>\n\n<pre><code>     class NodeVisitor():\n        def visit(self, node: AST) -&gt; Any: ...\n        def generic_visit(self, node: AST) -&gt; None: ...\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://nedbatchelder.com/blog/201802/coverage_45.html\"><strong>Coverage 4.5 adds configurator plug-ins</strong></a></p>\n\n<ul>\n<li>\u201cThere\u2019s one new feature: <a href=\"http://coverage.readthedocs.io/en/latest/api_plugin.html#configurers\">configurator plug-ins</a>, that let you run Python code at startup to set the configuration for coverage. This side-steps a requested feature to have different exclusion pragmas for different versions of Python.\u201d</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.unrealengine.com/en-US/blog/technology-sneak-peek-python-in-unreal-engine\"><strong>Python integrated into Unreal Engine</strong></a></p>\n\n<ul>\n<li>via  Pirogov Alexander\u200f ( <a href=\"https://twitter.com/Pie_Daddy/status/948934041985781760\">@Pie_Daddy</a> )</li>\n<li>tl;dr: Autodesk university plans to integrate Python into Unreal Engine for the data integration pipeline and ease the process of bringing assets into the game.</li>\n<li>Autodesk is working on that will solve complicated problems with bringing CAD data into the Unreal Engine.</li>\n<li>Where they are today: \n<ul>\n<li>The Datasmith workflow toolkit, currently in beta, makes moving data into Unreal Engine as frictionless as possible. </li>\n<li>Datasmith provides high-fidelity translation of common scene assets such as geometry, textures, materials, lights and cameras from popular DCC and CAD applications into Unreal Engine.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.python.org/downloads/release/python-370b1/\"><strong>Python 3.7.0b1</strong></a> <strong>: Beta means we should be testing it!!!</strong></p>\n\n<ul>\n<li>If not people like us and our listeners, then who? Seems like we\u2019re a good set of beta testers.</li>\n<li>What are you going to test?</li>\n<li>I'm going to look at breakpoint() and data classes.</li>\n</ul>\n\n<p><strong>Michael #6: Releases abound!</strong></p>\n\n<ul>\n<li>Django security releases issued: 2.0.2 and 1.11.10\n<a href=\"https://www.djangoproject.com/weblog/2018/feb/01/security-releases/\">https://www.djangoproject.com/weblog/2018/feb/01/security-releases/</a></li>\n<li>Python 3.4.8 (security)\n<a href=\"https://www.python.org/downloads/release/python-348/\">https://www.python.org/downloads/release/python-348/</a></li>\n<li>Python 3.5.5 (security)\n<a href=\"https://www.python.org/downloads/release/python-355/\">https://www.python.org/downloads/release/python-355/</a>\n<ul>\n<li>libexpat XML lib had a security issue</li>\n</ul></li>\n<li>Channels 2.0 is a major rewrite of Channels\nhttps://channels.readthedocs.io/en/latest/releases/2.0.0.html\n<ul>\n<li>See <a href=\"https://talkpython.fm/episodes/show/98/adding-concurrency-to-django-with-django-channels\">Talk Python\u2019s interview</a> for more details</li>\n<li>Notably: Python 2.7 and 3.4 are no longer supported.</li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Brian:</p>\n\n<ul>\n<li>Speaking at PyCon 2018. \u201cPyCharm and pytest\u201d. Speaking with Paul Everitt</li>\n<li>Upcoming webinar: <a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/\">Productive pytest with Pycharm</a>\n<ul>\n<li>Feb 22, registration open</li>\n</ul></li>\n</ul>\n\n<p>Michael:</p>\n\n<ul>\n<li><a href=\"https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-mongodb-quickstart-with-python-and-pycharm-with-michael-kennedy/\"><strong>Webinar Recording:</strong></a> \u201cMongoDB Quickstart with Python and PyCharm\u201d with Michael Kennedy</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 09 Feb 2018 00:00:00 -0800", "published_parsed": [2018, 2, 9, 8, 0, 0, 4, 40, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The GUI phoenix rises with wxPython", "itunes_episode": "64", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:01"}}, "#63 We're still on a desktop GUI kick": {"info": {"title": "#63 We're still on a desktop GUI kick", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#63 We're still on a desktop GUI kick"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/63/we-re-still-on-a-desktop-gui-kick"}, {"length": "216", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/63/we-re-still-on-a-desktop-gui-kick.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/63/we-re-still-on-a-desktop-gui-kick", "id": "https://pythonbytes.fm/episodes/0aca9086-f40a-49fe-9a24-c89614ee68d0", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://hackernoon.com/a-brief-tour-of-python-3-7-data-classes-22ee5e046517\"><strong>A brief tour of Python 3.7 data classes</strong></a></p>\n\n<ul>\n<li>a great write-up of the upcoming data classes via Anthony Shaw</li>\n<li>\u201cData classes are a way of automating the generation of boiler-plate code for classes which store multiple properties. They also carry the benefit of using Python 3\u2019s new type hinting.\u201d</li>\n<li>Default magic methods\n<ul>\n<li>In the default setting, any dataclass will implement <code>__init__</code>, <code>__repr__</code>, <code>__str__</code> and <code>__eq__</code> for you.</li>\n<li>The <code>__init__</code> method will have <strong>keyword-arguments</strong> with the same type annotations that are specified on the class.</li>\n<li>The <code>__eq__</code> method will compare all dataclass attributes in order.</li>\n<li>All fields are declared at the top of the class and type hinting is <strong>required</strong>.</li>\n</ul></li>\n<li>Also covered\n<ul>\n<li>type hinting</li>\n<li>mutability (and frozen)</li>\n<li>customizing the fields</li>\n<li>post-init processing : optional <code>__``*post_init_*``_</code> will run after the generated <code>_``*_init_*``_</code></li>\n<li>inheritance</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> SQLite [The Databaseology Lectures - CMU Fall 2015]</p>\n\n<ul>\n<li>Lots of DBs covered here: <strong><a href=\"http://db.cs.cmu.edu/seminar2015/\">http://db.cs.cmu.edu/seminar2015/</a></strong></li>\n<li>SQLite at this <a href=\"https://www.youtube.com/watch?v=gpxnbly9bz4&amp;index=2&amp;list=PLSE8ODhjZXjakeQR57ZdN5slUu2oPUr1Y\"><strong>YouTube video</strong></a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://haarcuba.github.io/dryable/\"><strong>dryable</strong></a> <a href=\"https://haarcuba.github.io/dryable/\"><strong>:</strong></a> <a href=\"https://haarcuba.github.io/dryable/\"><strong>a useful dry-run decorator for python</strong></a></p>\n\n<ul>\n<li>short circuit methods within your project during dry runs.</li>\n<li>example shows how to add a command line flag <code>--dry-run</code>.</li>\n<li>The test code is useful for understanding it also.</li>\n<li><p>Example something.py\nimport dryable</p>\n\n<p>@dryable.Dryable('foo')\ndef return_something():\n    return 'something'</p></li>\n</ul>\n\n<p>test_something.py</p>\n\n<pre><code>from something import return_something\nimport dryable\n\ndef test_normal_return():\n    dryable.set(False) \n    assert return_something() == 'something'\n\ndef test_dry_return(capsys):\n    dryable.set(True) \n    assert return_something() == 'foo'\n</code></pre>\n\n<p><strong>Michael #4:</strong> </p>\n\n<ul>\n<li>These are some pretty cool examples.\n<ul>\n<li><a href=\"https://github.com/victordomingos/PT-Tracking/\">https://github.com/victordomingos/PT-Tracking/</a></li>\n<li><a href=\"https://github.com/victordomingos/RepService/\">https://github.com/victordomingos/RepService/</a></li>\n<li><a href=\"https://github.com/victordomingos/ContarDinheiro.py\">https://github.com/victordomingos/ContarDinheiro.py</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://tonybaloney.github.io/pep-explorer/#\"><strong>PEP Explorer - Explore Python Enhancement Proposals</strong></a></p>\n\n<ul>\n<li>Cool idea. Might need some work though. I can\u2019t find any accepted PEPs for 3.7, including <a href=\"https://www.python.org/dev/peps/pep-0557/\">557, data classes</a>.</li>\n<li>I\u2019m ok with giving Anthony some shade on this, as we highlighted his writing in the first item.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://likegeeks.com/python-gui-examples-tkinter-tutorial/\"><strong>TKInter Tutorial</strong></a></p>\n\n<ul>\n<li>via @likegeeks</li>\n<li>Create your first GUI application</li>\n<li>Create a label and button widgets</li>\n<li>Input and combo boxs, menus, progressbars and more</li>\n</ul>\n\n<h2>Our news</h2>\n\n<p>Michael</p>\n\n<ul>\n<li>I built something with <a href=\"https://github.com/chriskiehl/Gooey\">Gooey</a> this weekend, it was wonderful.</li>\n<li>Self-serve team purchases and discounts at Talk Python Training</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://hackernoon.com/a-brief-tour-of-python-3-7-data-classes-22ee5e046517\"><strong>A brief tour of Python 3.7 data classes</strong></a></p>\n\n<ul>\n<li>a great write-up of the upcoming data classes via Anthony Shaw</li>\n<li>\u201cData classes are a way of automating the generation of boiler-plate code for classes which store multiple properties. They also carry the benefit of using Python 3\u2019s new type hinting.\u201d</li>\n<li>Default magic methods\n<ul>\n<li>In the default setting, any dataclass will implement <code>__init__</code>, <code>__repr__</code>, <code>__str__</code> and <code>__eq__</code> for you.</li>\n<li>The <code>__init__</code> method will have <strong>keyword-arguments</strong> with the same type annotations that are specified on the class.</li>\n<li>The <code>__eq__</code> method will compare all dataclass attributes in order.</li>\n<li>All fields are declared at the top of the class and type hinting is <strong>required</strong>.</li>\n</ul></li>\n<li>Also covered\n<ul>\n<li>type hinting</li>\n<li>mutability (and frozen)</li>\n<li>customizing the fields</li>\n<li>post-init processing : optional <code>__``*post_init_*``_</code> will run after the generated <code>_``*_init_*``_</code></li>\n<li>inheritance</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> SQLite [The Databaseology Lectures - CMU Fall 2015]</p>\n\n<ul>\n<li>Lots of DBs covered here: <strong><a href=\"http://db.cs.cmu.edu/seminar2015/\">http://db.cs.cmu.edu/seminar2015/</a></strong></li>\n<li>SQLite at this <a href=\"https://www.youtube.com/watch?v=gpxnbly9bz4&amp;index=2&amp;list=PLSE8ODhjZXjakeQR57ZdN5slUu2oPUr1Y\"><strong>YouTube video</strong></a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://haarcuba.github.io/dryable/\"><strong>dryable</strong></a> <a href=\"https://haarcuba.github.io/dryable/\"><strong>:</strong></a> <a href=\"https://haarcuba.github.io/dryable/\"><strong>a useful dry-run decorator for python</strong></a></p>\n\n<ul>\n<li>short circuit methods within your project during dry runs.</li>\n<li>example shows how to add a command line flag <code>--dry-run</code>.</li>\n<li>The test code is useful for understanding it also.</li>\n<li><p>Example something.py\nimport dryable</p>\n\n<p>@dryable.Dryable('foo')\ndef return_something():\n    return 'something'</p></li>\n</ul>\n\n<p>test_something.py</p>\n\n<pre><code>from something import return_something\nimport dryable\n\ndef test_normal_return():\n    dryable.set(False) \n    assert return_something() == 'something'\n\ndef test_dry_return(capsys):\n    dryable.set(True) \n    assert return_something() == 'foo'\n</code></pre>\n\n<p><strong>Michael #4:</strong> </p>\n\n<ul>\n<li>These are some pretty cool examples.\n<ul>\n<li><a href=\"https://github.com/victordomingos/PT-Tracking/\">https://github.com/victordomingos/PT-Tracking/</a></li>\n<li><a href=\"https://github.com/victordomingos/RepService/\">https://github.com/victordomingos/RepService/</a></li>\n<li><a href=\"https://github.com/victordomingos/ContarDinheiro.py\">https://github.com/victordomingos/ContarDinheiro.py</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://tonybaloney.github.io/pep-explorer/#\"><strong>PEP Explorer - Explore Python Enhancement Proposals</strong></a></p>\n\n<ul>\n<li>Cool idea. Might need some work though. I can\u2019t find any accepted PEPs for 3.7, including <a href=\"https://www.python.org/dev/peps/pep-0557/\">557, data classes</a>.</li>\n<li>I\u2019m ok with giving Anthony some shade on this, as we highlighted his writing in the first item.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://likegeeks.com/python-gui-examples-tkinter-tutorial/\"><strong>TKInter Tutorial</strong></a></p>\n\n<ul>\n<li>via @likegeeks</li>\n<li>Create your first GUI application</li>\n<li>Create a label and button widgets</li>\n<li>Input and combo boxs, menus, progressbars and more</li>\n</ul>\n\n<h2>Our news</h2>\n\n<p>Michael</p>\n\n<ul>\n<li>I built something with <a href=\"https://github.com/chriskiehl/Gooey\">Gooey</a> this weekend, it was wonderful.</li>\n<li>Self-serve team purchases and discounts at Talk Python Training</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 01 Feb 2018 00:00:00 -0800", "published_parsed": [2018, 2, 1, 8, 0, 0, 3, 32, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "We're still on a desktop GUI kick", "itunes_episode": "63", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:12"}}, "#62 Wooey and Gooey are simple Python GUIs": {"info": {"title": "#62 Wooey and Gooey are simple Python GUIs", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#62 Wooey and Gooey are simple Python GUIs"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/62/wooey-and-gooey-are-simple-python-guis"}, {"length": "216", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/62/wooey-and-gooey-are-simple-python-guis.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/62/wooey-and-gooey-are-simple-python-guis", "id": "https://pythonbytes.fm/episodes/5c4ddb28-d2e1-4d1b-a2c1-dab45e311c77", "guidislink": false, "summary": "<p>Brought to you by Datadog <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <strong>Dan Bader takes over Real Python</strong></p>\n\n<ul>\n<li><a href=\"https://mailchi.mp/realpython/final-blast?e=a41501fde5\">Announcement email</a>, with what Michael, Fletcher, and Jeremy are doing now</li>\n<li>Dan is on the show and tells us all about it.</li>\n</ul>\n\n<p><strong>Michael #2: Still more Python GUIs</strong></p>\n\n<ul>\n<li><strong><a href=\"https://github.com/wooey/Wooey\">https://github.com/wooey/Wooey</a></strong>\n<ul>\n<li>A Django app that creates automatic web UIs for Python scripts.</li>\n<li>Wooey is a simple web interface to run command line Python scripts. Think of it as an easy way to get your scripts up on the web for routine data analysis, file processing, or anything else.</li>\n<li>Wooey was envisioned as a system to allow data analysts to be able to easily:\n<ul>\n<li>Autodocument workflows for data analysis  (simple model saving).</li>\n<li>Enable fellow co-workers with no command line experience to utilize python scripts.</li>\n<li>Enable the easy wrapping of any program in simple python instead of having to use language specific  to existing tools such as Galaxy.</li>\n</ul></li>\n<li>Try the demo server: <a href=\"https://wooey.herokuapp.com/\">https://wooey.herokuapp.com/</a></li>\n</ul></li>\n<li><strong><a href=\"https://github.com/chriskiehl/Gooey\">https://github.com/chriskiehl/Gooey</a></strong>\n<ul>\n<li>Turn (almost) any Python command line program into a full GUI application with one line</li>\n<li>See the <a href=\"https://github.com/chriskiehl/Gooey\"><strong>screenshots here</strong></a></li>\n<li>Gooey converts your Console Applications into end-user-friendly GUI applications. </li>\n<li>It lets you focus on building robust, configurable programs in a familiar way, all without having to worry about how it will be presented to and interacted with by your average user.</li>\n</ul></li>\n<li>And Toga: <a href=\"https://pybee.org/project/projects/libraries/toga/\">https://pybee.org/project/projects/libraries/toga/</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://nedbatchelder.com//blog/201801/pythons_misleading_readability.html\"><strong>Python\u2019s misleading readability</strong></a></p>\n\n<ul>\n<li>Ned Batchelder</li>\n<li><code>is</code> and <code>or</code> are not obvious and can confuse people new to the language, new to programming.\n<ul>\n<li><code>1000 + 1 is 1001</code>  \u2192 <code>1000 + 1 == 1001</code></li>\n<li><code>answer == \"y\" or \"yes``\"</code> \u2192 <code>answer in {\"y\", \"yes\"}</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://haarcuba.github.io/warp2/\"><strong>warp2 access</strong></a> </p>\n\n<ul>\n<li>python2 code from python3</li>\n<li>It communicates with the subprocess using pickle, so there are limitation to using it - if you need to send unpicklable data, that\u2019s a problem.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Help! My tests can\u2019t see my code!</strong></p>\n\n<ul>\n<li>Probably should be an episode on <a href=\"http://testandcode.com/\">Test &amp; Code</a>, and maybe I\u2019ll do that also, but it\u2019s a big enough roadblock to many newcomers to <a href=\"http://amzn.to/2DBLFCz\">pytest</a>, that I want to get the word out on how to fix it.</li>\n<li>A best practice is to put your test code in a folder called tests.</li>\n<li>Now, if you are sitting in the parent directory, where you can see both your modules/packages under test and the <code>tests</code> directory, and you run <code>pytest</code>, your test code has to have some way to import the code under test.</li>\n<li>If you are in a hurry. Homework due in an hour, project manager breathing down your neck, or whatever, then there are two easy options:\n<ul>\n<li><code>python -m pytest</code></li>\n<li><code>python</code> adds the current directory where you start it to <code>PYTHONPATH</code>, <code>pytest</code> does not.</li>\n<li><code>pip install pytest-pythonpath</code></li>\n<li><a href=\"https://pypi.python.org/pypi/pytest-pythonpath\">https://pypi.python.org/pypi/pytest-pythonpath</a></li>\n<li>This plugin adds the current directory to <code>PYTHONPATH</code>, and adds some hooks that let you define search paths in your <code>pytest.ini</code> file.</li>\n</ul></li>\n<li>When you have time..\n<ul>\n<li>Create a <code>setup.py</code> file for your code. And\u2026</li>\n<li><code>pip install -e ./your_project</code></li>\n<li>This allows you to continue working on your code while letting your test code see the code under test</li>\n<li>This method is friendlier to <code>tox</code>.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://cement.readthedocs.io/en/latest/\"><strong>Cement - Framework for CLI</strong></a></p>\n\n<ul>\n<li>Cement is an advanced CLI Application Framework for Python. </li>\n<li>Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications </li>\n<li>Also supports rapid development needs without sacrificing quality.</li>\n<li>Core features\n<ul>\n<li>Core pieces of the framework are customizable via handlers/interfaces</li>\n<li>Extension handler interface to easily extend framework functionality</li>\n<li>Config handler supports parsing multiple config files into one config</li>\n<li>Argument handler parses command line arguments and merges with config</li>\n<li>Log handler supports console and file logging</li>\n<li>Plugin handler provides an interface to easily extend your application</li>\n<li>Hook support adds a bit of magic to apps and also ties into framework</li>\n<li>Handler system connects implementation classes with Interfaces</li>\n<li>Output handler interface renders return dictionaries to console</li>\n<li>Cache handler interface adds caching support for improved performance</li>\n</ul></li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael</p>\n\n<ul>\n<li>Conferences!\n<ul>\n<li>PyCascades in Vancouver BC on Jan 22, 23. Was great, get to it next year.</li>\n<li><a href=\"https://www.pycon.co/\">PyColumbia</a>, February 9, 10 and 11 Medellin, Colombia - I won't be there but if you are able to make it get your tickets</li>\n<li>PyCon Slovakia, March 9-11 in Bratislava. I'll be speaking there and doing a workshop. </li>\n<li>pycon us: Cleveland OH May 10th. I just finalized all my travel plans. I hope to see you there, please stop by our booth.</li>\n<li>PyCarribian: Santo Domingo, Dominican Republic, 17-18 February, 2018</li>\n</ul></li>\n<li>Podcast <a href=\"http://pythonoutloud.com/\">http://pythonoutloud.com/</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Brought to you by Datadog <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <strong>Dan Bader takes over Real Python</strong></p>\n\n<ul>\n<li><a href=\"https://mailchi.mp/realpython/final-blast?e=a41501fde5\">Announcement email</a>, with what Michael, Fletcher, and Jeremy are doing now</li>\n<li>Dan is on the show and tells us all about it.</li>\n</ul>\n\n<p><strong>Michael #2: Still more Python GUIs</strong></p>\n\n<ul>\n<li><strong><a href=\"https://github.com/wooey/Wooey\">https://github.com/wooey/Wooey</a></strong>\n<ul>\n<li>A Django app that creates automatic web UIs for Python scripts.</li>\n<li>Wooey is a simple web interface to run command line Python scripts. Think of it as an easy way to get your scripts up on the web for routine data analysis, file processing, or anything else.</li>\n<li>Wooey was envisioned as a system to allow data analysts to be able to easily:\n<ul>\n<li>Autodocument workflows for data analysis  (simple model saving).</li>\n<li>Enable fellow co-workers with no command line experience to utilize python scripts.</li>\n<li>Enable the easy wrapping of any program in simple python instead of having to use language specific  to existing tools such as Galaxy.</li>\n</ul></li>\n<li>Try the demo server: <a href=\"https://wooey.herokuapp.com/\">https://wooey.herokuapp.com/</a></li>\n</ul></li>\n<li><strong><a href=\"https://github.com/chriskiehl/Gooey\">https://github.com/chriskiehl/Gooey</a></strong>\n<ul>\n<li>Turn (almost) any Python command line program into a full GUI application with one line</li>\n<li>See the <a href=\"https://github.com/chriskiehl/Gooey\"><strong>screenshots here</strong></a></li>\n<li>Gooey converts your Console Applications into end-user-friendly GUI applications. </li>\n<li>It lets you focus on building robust, configurable programs in a familiar way, all without having to worry about how it will be presented to and interacted with by your average user.</li>\n</ul></li>\n<li>And Toga: <a href=\"https://pybee.org/project/projects/libraries/toga/\">https://pybee.org/project/projects/libraries/toga/</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://nedbatchelder.com//blog/201801/pythons_misleading_readability.html\"><strong>Python\u2019s misleading readability</strong></a></p>\n\n<ul>\n<li>Ned Batchelder</li>\n<li><code>is</code> and <code>or</code> are not obvious and can confuse people new to the language, new to programming.\n<ul>\n<li><code>1000 + 1 is 1001</code>  \u2192 <code>1000 + 1 == 1001</code></li>\n<li><code>answer == \"y\" or \"yes``\"</code> \u2192 <code>answer in {\"y\", \"yes\"}</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://haarcuba.github.io/warp2/\"><strong>warp2 access</strong></a> </p>\n\n<ul>\n<li>python2 code from python3</li>\n<li>It communicates with the subprocess using pickle, so there are limitation to using it - if you need to send unpicklable data, that\u2019s a problem.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Help! My tests can\u2019t see my code!</strong></p>\n\n<ul>\n<li>Probably should be an episode on <a href=\"http://testandcode.com/\">Test &amp; Code</a>, and maybe I\u2019ll do that also, but it\u2019s a big enough roadblock to many newcomers to <a href=\"http://amzn.to/2DBLFCz\">pytest</a>, that I want to get the word out on how to fix it.</li>\n<li>A best practice is to put your test code in a folder called tests.</li>\n<li>Now, if you are sitting in the parent directory, where you can see both your modules/packages under test and the <code>tests</code> directory, and you run <code>pytest</code>, your test code has to have some way to import the code under test.</li>\n<li>If you are in a hurry. Homework due in an hour, project manager breathing down your neck, or whatever, then there are two easy options:\n<ul>\n<li><code>python -m pytest</code></li>\n<li><code>python</code> adds the current directory where you start it to <code>PYTHONPATH</code>, <code>pytest</code> does not.</li>\n<li><code>pip install pytest-pythonpath</code></li>\n<li><a href=\"https://pypi.python.org/pypi/pytest-pythonpath\">https://pypi.python.org/pypi/pytest-pythonpath</a></li>\n<li>This plugin adds the current directory to <code>PYTHONPATH</code>, and adds some hooks that let you define search paths in your <code>pytest.ini</code> file.</li>\n</ul></li>\n<li>When you have time..\n<ul>\n<li>Create a <code>setup.py</code> file for your code. And\u2026</li>\n<li><code>pip install -e ./your_project</code></li>\n<li>This allows you to continue working on your code while letting your test code see the code under test</li>\n<li>This method is friendlier to <code>tox</code>.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://cement.readthedocs.io/en/latest/\"><strong>Cement - Framework for CLI</strong></a></p>\n\n<ul>\n<li>Cement is an advanced CLI Application Framework for Python. </li>\n<li>Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications </li>\n<li>Also supports rapid development needs without sacrificing quality.</li>\n<li>Core features\n<ul>\n<li>Core pieces of the framework are customizable via handlers/interfaces</li>\n<li>Extension handler interface to easily extend framework functionality</li>\n<li>Config handler supports parsing multiple config files into one config</li>\n<li>Argument handler parses command line arguments and merges with config</li>\n<li>Log handler supports console and file logging</li>\n<li>Plugin handler provides an interface to easily extend your application</li>\n<li>Hook support adds a bit of magic to apps and also ties into framework</li>\n<li>Handler system connects implementation classes with Interfaces</li>\n<li>Output handler interface renders return dictionaries to console</li>\n<li>Cache handler interface adds caching support for improved performance</li>\n</ul></li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael</p>\n\n<ul>\n<li>Conferences!\n<ul>\n<li>PyCascades in Vancouver BC on Jan 22, 23. Was great, get to it next year.</li>\n<li><a href=\"https://www.pycon.co/\">PyColumbia</a>, February 9, 10 and 11 Medellin, Colombia - I won't be there but if you are able to make it get your tickets</li>\n<li>PyCon Slovakia, March 9-11 in Bratislava. I'll be speaking there and doing a workshop. </li>\n<li>pycon us: Cleveland OH May 10th. I just finalized all my travel plans. I hope to see you there, please stop by our booth.</li>\n<li>PyCarribian: Santo Domingo, Dominican Republic, 17-18 February, 2018</li>\n</ul></li>\n<li>Podcast <a href=\"http://pythonoutloud.com/\">http://pythonoutloud.com/</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 26 Jan 2018 00:00:00 -0800", "published_parsed": [2018, 1, 26, 8, 0, 0, 4, 26, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Wooey and Gooey are simple Python GUIs", "itunes_episode": "62", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:28:41"}}, "#61 On Being a Senior Engineer": {"info": {"title": "#61 On Being a Senior Engineer", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#61 On Being a Senior Engineer"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/61/on-being-a-senior-engineer"}, {"length": "10318890", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/61/on-being-a-senior-engineer.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/61/on-being-a-senior-engineer", "id": "https://pythonbytes.fm/episodes/6d0623de-2a5d-4687-b397-a9f267703fdb", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.python.org/dev/peps/pep-0412/\"><strong>PEP 412's dict key sharing for classes</strong></a></p>\n\n<ul>\n<li>\"memory use is reduced by 10% to 20% for object-oriented programs with no significant change in memory use for other programs.\"</li>\n<li>To benefit from this, make sure all attributes used in life of class instances are initialized within <code>__init__()</code>. </li>\n<li>Video from PyCon 2017\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\">Brandon Rhodes The Dictionary Even Mightier PyCon 2017</a></li>\n<li>Look at description at about 14 minutes on in the video</li>\n</ul></li>\n<li>Suggested by <a href=\"https://twitter.com/nletcher/status/950184503116365825\">Ned Letcher</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://python-hunter.readthedocs.io/en/latest/cookbook.html#walkthrough\"><strong>Python Hunter</strong></a></p>\n\n<ul>\n<li>via Ivan Peji\u0107</li>\n<li>Hunter is a flexible code tracing toolkit, not for measuring coverage, but for debugging, logging, inspection and other nefarious purposes. It has a Python API, terminal activation (see Environment variable activation). and supports tracing other processes (see Tracing processes).</li>\n<li>The default action is to just print the code being executed</li>\n<li>Based on cython</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/\"><strong>Ten Things I Wish I\u2019d Known About bash</strong></a></p>\n\n<ul>\n<li>I started with ksh on Solaris/HP-UX, used zsh for few years.</li>\n<li>Mostly now, I use bash, because it\u2019s everywhere. Mac/Windows/Linux</li>\n<li>For windows: <a href=\"http://gitforwindows.org/\"><strong>git for windows</strong></a>\n<ul>\n<li>Even if you don't need git, git for windows comes with fully integrated unix tools and bash and it just works as you expect.</li>\n<li>you can launch windows applications</li>\n<li>most of the frequent bash commands are there</li>\n<li>If you really don\u2019t want bash, consider <a href=\"http://cmder.net/\"><strong>cmder</strong></a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://www.grokcode.com/864/snakefooding-python-code-for-complexity-visualization/\"><strong>Snakefooding Python Code For Complexity Visualization</strong></a></p>\n\n<ul>\n<li><a href=\"http://furius.ca/snakefood/\">Snakefood</a> is a tool written by Martin Blais to create Python dependency graphs. </li>\n<li>Combined with GraphViz, snakefood can create beautiful visualizations of Python codebases.</li>\n<li>Python Web Frameworks: The different development philosophies of Bottle, Django, Flask, and Pyramid are apparent by looking at their snakefood graphs.</li>\n<li>Bottle: A fast and simple micro framework for Python web applications.</li>\n<li>Django: A batteries-included web framework for perfectionists with deadlines.</li>\n<li>Flask: A microframework for Python.</li>\n<li>Pyramid: A small, fast, down-to-earth, open source Python web framework. It makes real-world web application development and deployment more fun, more predictable, and more productive.</li>\n<li>Also Queueing Implementations</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/\"><strong>On Being a Senior Engineer</strong></a></p>\n\n<ul>\n<li>2012 article that's still very valid</li>\n<li>Obligatory Pithy Characteristics of Mature Engineers</li>\n<li>Mature engineers ...\n<ul>\n<li>seek out constructive criticism of their designs.</li>\n<li>understand the non-technical areas of how they are perceived.</li>\n<li>do not shy away from making estimates, and are always trying to get better at it.</li>\n<li>have an innate sense of anticipation, even if they don\u2019t know they do.</li>\n<li>understand that not all of their projects are filled with rockstar-on-stage work.</li>\n<li>lift the skills and expertise of those around them.</li>\n<li>make their trade-offs explicit when making judgements and decisions.</li>\n<li>don\u2019t practice CYAE (\u201cCover Your Ass Engineering\u201d)</li>\n<li>are empathetic.</li>\n<li>don\u2019t make empty complaints.</li>\n<li>are aware of cognitive biases:\n<ul>\n<li>Self-Serving Bias</li>\n<li>Fundamental Attribution Error</li>\n<li>Hindsight Bias</li>\n<li>Outcome Bias</li>\n<li>Planning Fallacy</li>\n</ul></li>\n</ul></li>\n<li>The Ten Commandments of Egoless Programming\n<ol>\n<li>Understand and accept that you will make mistakes.</li>\n<li>You are not your code.</li>\n<li>No matter how much \u201ckarate\u201d you know, someone else will always know more. </li>\n<li>Don\u2019t rewrite code without consultation. </li>\n<li>Treat people who know less than you with respect, deference, and patience. </li>\n<li>The only constant in the world is change. </li>\n<li>The only true authority stems from knowledge, not from position. </li>\n<li>Fight for what you believe, but gracefully accept defeat. </li>\n<li>Don\u2019t be \u201cthe coder in the corner.\u201d </li>\n<li>Critique code instead of people \u2013 be kind to the coder, not to the code.</li>\n</ol></li>\n<li>also:\n<ul>\n<li>Novices versus Experts </li>\n<li>Dirty secret: mature engineers know the importance of (sometimes irrational) feelings people have. (gasp!)</li>\n<li>\u201cIt is amazing what you can accomplish if you do not care who gets credit.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: Python UI frameworks</strong></p>\n\n<ul>\n<li>TkInter (<a href=\"https://www.tutorialspoint.com/python/python_gui_programming.htm\">tutorial</a>) - not amazing, not at all (<a href=\"https://i.stack.imgur.com/Qdbsi.png\">example</a>).</li>\n<li><a href=\"https://github.com/pyside\">PySide</a> and Qt - hard to install, weird licensing and versioning, but has a nice designer</li>\n<li>Kivy and PyGame/PyOpenGL - game / simulation like</li>\n<li><a href=\"https://www.wxpython.org/\">wxPython</a> seems not bad actually\n<ul>\n<li><a href=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2011/07/events_in_style.png\">example</a></li>\n<li><a href=\"https://wxwidgets.org/\">widgets</a></li>\n<li><a href=\"https://github.com/wxFormBuilder/wxFormBuilder\">wxFormBuilder</a> - a RAD tool for wxWidgets GUI design</li>\n<li><a href=\"http://wxglade.sourceforge.net/\">wxGlade</a> is a GUI designer</li>\n</ul></li>\n<li>What else? A few platform specific examples</li>\n<li>The problem: was discussed last week</li>\n<li>Some more Electron.JS like solutions</li>\n<li><a href=\"https://github.com/ChrisKnott/Eel\"><strong>github.com/ChrisKnott/Eel</strong></a>\n<ul>\n<li>Eel is a little Python library for making simple Electron-like offline HTML/JS GUI apps, with full access to Python capabilities and libraries.</li>\n<li>It hosts a local webserver, then lets you annotate functions in Python so that they can be called from Javascript, and vice versa.</li>\n</ul></li>\n<li><a href=\"https://github.com/cztomczak/cefpython\">CEFPython</a> - Chrome browser control, a HTML 5 based Python GUI framework.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.python.org/dev/peps/pep-0412/\"><strong>PEP 412's dict key sharing for classes</strong></a></p>\n\n<ul>\n<li>\"memory use is reduced by 10% to 20% for object-oriented programs with no significant change in memory use for other programs.\"</li>\n<li>To benefit from this, make sure all attributes used in life of class instances are initialized within <code>__init__()</code>. </li>\n<li>Video from PyCon 2017\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\">Brandon Rhodes The Dictionary Even Mightier PyCon 2017</a></li>\n<li>Look at description at about 14 minutes on in the video</li>\n</ul></li>\n<li>Suggested by <a href=\"https://twitter.com/nletcher/status/950184503116365825\">Ned Letcher</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://python-hunter.readthedocs.io/en/latest/cookbook.html#walkthrough\"><strong>Python Hunter</strong></a></p>\n\n<ul>\n<li>via Ivan Peji\u0107</li>\n<li>Hunter is a flexible code tracing toolkit, not for measuring coverage, but for debugging, logging, inspection and other nefarious purposes. It has a Python API, terminal activation (see Environment variable activation). and supports tracing other processes (see Tracing processes).</li>\n<li>The default action is to just print the code being executed</li>\n<li>Based on cython</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/\"><strong>Ten Things I Wish I\u2019d Known About bash</strong></a></p>\n\n<ul>\n<li>I started with ksh on Solaris/HP-UX, used zsh for few years.</li>\n<li>Mostly now, I use bash, because it\u2019s everywhere. Mac/Windows/Linux</li>\n<li>For windows: <a href=\"http://gitforwindows.org/\"><strong>git for windows</strong></a>\n<ul>\n<li>Even if you don't need git, git for windows comes with fully integrated unix tools and bash and it just works as you expect.</li>\n<li>you can launch windows applications</li>\n<li>most of the frequent bash commands are there</li>\n<li>If you really don\u2019t want bash, consider <a href=\"http://cmder.net/\"><strong>cmder</strong></a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://www.grokcode.com/864/snakefooding-python-code-for-complexity-visualization/\"><strong>Snakefooding Python Code For Complexity Visualization</strong></a></p>\n\n<ul>\n<li><a href=\"http://furius.ca/snakefood/\">Snakefood</a> is a tool written by Martin Blais to create Python dependency graphs. </li>\n<li>Combined with GraphViz, snakefood can create beautiful visualizations of Python codebases.</li>\n<li>Python Web Frameworks: The different development philosophies of Bottle, Django, Flask, and Pyramid are apparent by looking at their snakefood graphs.</li>\n<li>Bottle: A fast and simple micro framework for Python web applications.</li>\n<li>Django: A batteries-included web framework for perfectionists with deadlines.</li>\n<li>Flask: A microframework for Python.</li>\n<li>Pyramid: A small, fast, down-to-earth, open source Python web framework. It makes real-world web application development and deployment more fun, more predictable, and more productive.</li>\n<li>Also Queueing Implementations</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/\"><strong>On Being a Senior Engineer</strong></a></p>\n\n<ul>\n<li>2012 article that's still very valid</li>\n<li>Obligatory Pithy Characteristics of Mature Engineers</li>\n<li>Mature engineers ...\n<ul>\n<li>seek out constructive criticism of their designs.</li>\n<li>understand the non-technical areas of how they are perceived.</li>\n<li>do not shy away from making estimates, and are always trying to get better at it.</li>\n<li>have an innate sense of anticipation, even if they don\u2019t know they do.</li>\n<li>understand that not all of their projects are filled with rockstar-on-stage work.</li>\n<li>lift the skills and expertise of those around them.</li>\n<li>make their trade-offs explicit when making judgements and decisions.</li>\n<li>don\u2019t practice CYAE (\u201cCover Your Ass Engineering\u201d)</li>\n<li>are empathetic.</li>\n<li>don\u2019t make empty complaints.</li>\n<li>are aware of cognitive biases:\n<ul>\n<li>Self-Serving Bias</li>\n<li>Fundamental Attribution Error</li>\n<li>Hindsight Bias</li>\n<li>Outcome Bias</li>\n<li>Planning Fallacy</li>\n</ul></li>\n</ul></li>\n<li>The Ten Commandments of Egoless Programming\n<ol>\n<li>Understand and accept that you will make mistakes.</li>\n<li>You are not your code.</li>\n<li>No matter how much \u201ckarate\u201d you know, someone else will always know more. </li>\n<li>Don\u2019t rewrite code without consultation. </li>\n<li>Treat people who know less than you with respect, deference, and patience. </li>\n<li>The only constant in the world is change. </li>\n<li>The only true authority stems from knowledge, not from position. </li>\n<li>Fight for what you believe, but gracefully accept defeat. </li>\n<li>Don\u2019t be \u201cthe coder in the corner.\u201d </li>\n<li>Critique code instead of people \u2013 be kind to the coder, not to the code.</li>\n</ol></li>\n<li>also:\n<ul>\n<li>Novices versus Experts </li>\n<li>Dirty secret: mature engineers know the importance of (sometimes irrational) feelings people have. (gasp!)</li>\n<li>\u201cIt is amazing what you can accomplish if you do not care who gets credit.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: Python UI frameworks</strong></p>\n\n<ul>\n<li>TkInter (<a href=\"https://www.tutorialspoint.com/python/python_gui_programming.htm\">tutorial</a>) - not amazing, not at all (<a href=\"https://i.stack.imgur.com/Qdbsi.png\">example</a>).</li>\n<li><a href=\"https://github.com/pyside\">PySide</a> and Qt - hard to install, weird licensing and versioning, but has a nice designer</li>\n<li>Kivy and PyGame/PyOpenGL - game / simulation like</li>\n<li><a href=\"https://www.wxpython.org/\">wxPython</a> seems not bad actually\n<ul>\n<li><a href=\"https://www.blog.pythonlibrary.org/wp-content/uploads/2011/07/events_in_style.png\">example</a></li>\n<li><a href=\"https://wxwidgets.org/\">widgets</a></li>\n<li><a href=\"https://github.com/wxFormBuilder/wxFormBuilder\">wxFormBuilder</a> - a RAD tool for wxWidgets GUI design</li>\n<li><a href=\"http://wxglade.sourceforge.net/\">wxGlade</a> is a GUI designer</li>\n</ul></li>\n<li>What else? A few platform specific examples</li>\n<li>The problem: was discussed last week</li>\n<li>Some more Electron.JS like solutions</li>\n<li><a href=\"https://github.com/ChrisKnott/Eel\"><strong>github.com/ChrisKnott/Eel</strong></a>\n<ul>\n<li>Eel is a little Python library for making simple Electron-like offline HTML/JS GUI apps, with full access to Python capabilities and libraries.</li>\n<li>It hosts a local webserver, then lets you annotate functions in Python so that they can be called from Javascript, and vice versa.</li>\n</ul></li>\n<li><a href=\"https://github.com/cztomczak/cefpython\">CEFPython</a> - Chrome browser control, a HTML 5 based Python GUI framework.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 16 Jan 2018 00:00:00 -0800", "published_parsed": [2018, 1, 16, 8, 0, 0, 1, 16, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "On Being a Senior Engineer", "itunes_episode": "61", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:22"}}, "#60 Don't dismiss SQLite as just a starter DB": {"info": {"title": "#60 Don't dismiss SQLite as just a starter DB", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#60 Don't dismiss SQLite as just a starter DB"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/60/don-t-dismiss-sqlite-as-just-a-starter-db"}, {"length": "24552139", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/60/don-t-dismiss-sqlite-as-just-a-starter-db.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/60/don-t-dismiss-sqlite-as-just-a-starter-db", "id": "https://pythonbytes.fm/episodes/2f925aff-d72f-4591-9bb6-a7465bc3f7dd", "guidislink": false, "summary": "<p>Brought to you by Datadog <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.youtube.com/watch?v=Qu76Xlq2J0k&amp;feature=youtu.be\"><strong>Who's at nine?</strong></a></p>\n\n<ul>\n<li>Organic Idiocy</li>\n<li>Inspired by <a href=\"https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill\">Michael talking about programming Alexa in episode 33</a>\n<ul>\n<li><a href=\"https://twitter.com/GregQuinlan/status/950138396445376513\">Twitter thread</a></li>\n</ul></li>\n<li>Using \n<ul>\n<li><a href=\"http://flask-ask.readthedocs.io/en/latest/\">Flask-Ask</a> for Alexa</li>\n<li><a href=\"http://flask-assistant.readthedocs.io/en/latest/\">Flask-Assistant</a> for Google Home</li>\n</ul></li>\n<li><a href=\"https://talkpython.fm/146\">Talk Python 146</a> is all about Flask Ask and Assistant this week. ;)</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://prog21.dadgum.com/203.html\"><strong>Retiring Python as a teaching language</strong></a></p>\n\n<ul>\n<li>Why did he write this?\n<ul>\n<li>Then one day a student will innocently ask \"Instead of running the poker simulator from the command line, how can I put it in a window with a button to deal the next hand?\"</li>\n</ul></li>\n<li>The ensuing Twitter conversation was very interesting. Scroll this status, it\u2019s pretty comprehensive <a href=\"https://twitter.com/mkennedy/status/949688651058835456\">https://twitter.com/mkennedy/status/949688651058835456</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Don't dismiss SQLite as just a starter DB</strong></p>\n\n<ul>\n<li>SQLite is a single file db that <a href=\"https://docs.python.org/3.6/library/sqlite3.html\">comes with Python</a>.</li>\n<li>A listener pointed us to a couple cool things about SQLite</li>\n<li>A great interview with the developer <a href=\"https://changelog.com/podcast/201\">The Changelog, episode 201</a>.</li>\n<li>It's extensive documentation on how <a href=\"http://sqlite.org/testing.html\">SQLite is tested</a>.</li>\n<li>Of course, for web applications and other applications that have to deal with extreme concurrency, you need a client server database </li>\n<li>Many applications don't have extreme concurrency needs.</li>\n<li>Sticking with SQLite might be just fine for quite a long time for many apps.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/aws/chalice\"><strong>Chalice: Python Serverless Microframework for AWS</strong></a></p>\n\n<ul>\n<li>Chalice is a python serverless microframework for AWS. It allows you to quickly create and deploy applications that use Amazon API Gateway and AWS Lambda. </li>\n<li>It provides:\n<ul>\n<li>A command line tool for creating, deploying, and managing your app</li>\n<li>A familiar and easy to use API for declaring views in python code (Flask)</li>\n<li>Automatic IAM policy generation</li>\n</ul></li>\n<li>Compare to Zappa: <a href=\"https://github.com/Miserlou/Zappa\">https://github.com/Miserlou/Zappa</a></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.peterbe.com/plog/fastest-way-to-uniquify-a-list-in-python-3.6\"><strong>Fastest way to uniquely a list in Python &gt;=3.6</strong></a></p>\n\n<ul>\n<li>Nice analysis of different ways to uniquify a list.</li>\n<li>Punchline:\n<ul>\n<li>The fastest way to uniqify a list of hashable objects (basically immutable things) is: <code>list(set(seq))</code></li>\n<li>And the fastest way, if the order is important is: <code>list(dict.fromkeys(seq))</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: PyTexas and PyCon AU vidoes are up</strong></p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PL0MRiRrXAvRiwQUUwTTh5g8rhbQyYlubo\">PyTexas</a>\n<ul>\n<li>Notable PyTexas videos\n<ul>\n<li>Micropython</li>\n<li>What is ML?</li>\n<li>C for yourself</li>\n<li>Python and .NET</li>\n</ul></li>\n</ul></li>\n<li><a href=\"http://pyvideo.org/events/pycon-au-2017.html\">PyCon AU</a>\n<ul>\n<li>Notable PyCon AU videos\n<ul>\n<li>Gradual typing</li>\n<li>Hot reloading Python web-servers at scale </li>\n<li>Prototyping Python Microservices in Production </li>\n<li>Secrets of a WSGI master. </li>\n<li>Python 3 for People Who Haven't Been Paying Attention </li>\n<li>Identity 2.0: the what, why and how of social and federated login </li>\n<li>Python: Ludicrous mode (with Django) </li>\n<li>Scaling Down: Running Large Sites Locally </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael</p>\n\n<p><a href=\"https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide?utm_source=pythonbytes\"><strong>Mastering PyCharm is out</strong></a>. Includes</p>\n\n<ul>\n<li>Learn to manage Python projects in PyCharm (large and small)</li>\n<li>Create web applications (Pyramid, Flask, Django, and more)</li>\n<li>Use PyCharm's special data science mode</li>\n<li>Refactor your Python code with confidence</li>\n<li>Learn about code smells and duplicate code tooling</li>\n<li>Access git, github, and use git flow</li>\n<li>Use the visual debugger to understand code flow and state</li>\n<li>Make your code more reliable with unit testing and pytest</li>\n<li>Create new Python packages</li>\n<li>And lots more</li>\n</ul>\n\n<p>Webcast with JetBrains: <a href=\"https://info.jetbrains.com/PyCharm-Webinar-January2018.html\"><strong>MongoDB Quickstart with Python and PyCharm</strong></a> <strong>Jan 30</strong></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Brought to you by Datadog <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.youtube.com/watch?v=Qu76Xlq2J0k&amp;feature=youtu.be\"><strong>Who's at nine?</strong></a></p>\n\n<ul>\n<li>Organic Idiocy</li>\n<li>Inspired by <a href=\"https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill\">Michael talking about programming Alexa in episode 33</a>\n<ul>\n<li><a href=\"https://twitter.com/GregQuinlan/status/950138396445376513\">Twitter thread</a></li>\n</ul></li>\n<li>Using \n<ul>\n<li><a href=\"http://flask-ask.readthedocs.io/en/latest/\">Flask-Ask</a> for Alexa</li>\n<li><a href=\"http://flask-assistant.readthedocs.io/en/latest/\">Flask-Assistant</a> for Google Home</li>\n</ul></li>\n<li><a href=\"https://talkpython.fm/146\">Talk Python 146</a> is all about Flask Ask and Assistant this week. ;)</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://prog21.dadgum.com/203.html\"><strong>Retiring Python as a teaching language</strong></a></p>\n\n<ul>\n<li>Why did he write this?\n<ul>\n<li>Then one day a student will innocently ask \"Instead of running the poker simulator from the command line, how can I put it in a window with a button to deal the next hand?\"</li>\n</ul></li>\n<li>The ensuing Twitter conversation was very interesting. Scroll this status, it\u2019s pretty comprehensive <a href=\"https://twitter.com/mkennedy/status/949688651058835456\">https://twitter.com/mkennedy/status/949688651058835456</a></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Don't dismiss SQLite as just a starter DB</strong></p>\n\n<ul>\n<li>SQLite is a single file db that <a href=\"https://docs.python.org/3.6/library/sqlite3.html\">comes with Python</a>.</li>\n<li>A listener pointed us to a couple cool things about SQLite</li>\n<li>A great interview with the developer <a href=\"https://changelog.com/podcast/201\">The Changelog, episode 201</a>.</li>\n<li>It's extensive documentation on how <a href=\"http://sqlite.org/testing.html\">SQLite is tested</a>.</li>\n<li>Of course, for web applications and other applications that have to deal with extreme concurrency, you need a client server database </li>\n<li>Many applications don't have extreme concurrency needs.</li>\n<li>Sticking with SQLite might be just fine for quite a long time for many apps.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/aws/chalice\"><strong>Chalice: Python Serverless Microframework for AWS</strong></a></p>\n\n<ul>\n<li>Chalice is a python serverless microframework for AWS. It allows you to quickly create and deploy applications that use Amazon API Gateway and AWS Lambda. </li>\n<li>It provides:\n<ul>\n<li>A command line tool for creating, deploying, and managing your app</li>\n<li>A familiar and easy to use API for declaring views in python code (Flask)</li>\n<li>Automatic IAM policy generation</li>\n</ul></li>\n<li>Compare to Zappa: <a href=\"https://github.com/Miserlou/Zappa\">https://github.com/Miserlou/Zappa</a></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.peterbe.com/plog/fastest-way-to-uniquify-a-list-in-python-3.6\"><strong>Fastest way to uniquely a list in Python &gt;=3.6</strong></a></p>\n\n<ul>\n<li>Nice analysis of different ways to uniquify a list.</li>\n<li>Punchline:\n<ul>\n<li>The fastest way to uniqify a list of hashable objects (basically immutable things) is: <code>list(set(seq))</code></li>\n<li>And the fastest way, if the order is important is: <code>list(dict.fromkeys(seq))</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: PyTexas and PyCon AU vidoes are up</strong></p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PL0MRiRrXAvRiwQUUwTTh5g8rhbQyYlubo\">PyTexas</a>\n<ul>\n<li>Notable PyTexas videos\n<ul>\n<li>Micropython</li>\n<li>What is ML?</li>\n<li>C for yourself</li>\n<li>Python and .NET</li>\n</ul></li>\n</ul></li>\n<li><a href=\"http://pyvideo.org/events/pycon-au-2017.html\">PyCon AU</a>\n<ul>\n<li>Notable PyCon AU videos\n<ul>\n<li>Gradual typing</li>\n<li>Hot reloading Python web-servers at scale </li>\n<li>Prototyping Python Microservices in Production </li>\n<li>Secrets of a WSGI master. </li>\n<li>Python 3 for People Who Haven't Been Paying Attention </li>\n<li>Identity 2.0: the what, why and how of social and federated login </li>\n<li>Python: Ludicrous mode (with Django) </li>\n<li>Scaling Down: Running Large Sites Locally </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael</p>\n\n<p><a href=\"https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide?utm_source=pythonbytes\"><strong>Mastering PyCharm is out</strong></a>. Includes</p>\n\n<ul>\n<li>Learn to manage Python projects in PyCharm (large and small)</li>\n<li>Create web applications (Pyramid, Flask, Django, and more)</li>\n<li>Use PyCharm's special data science mode</li>\n<li>Refactor your Python code with confidence</li>\n<li>Learn about code smells and duplicate code tooling</li>\n<li>Access git, github, and use git flow</li>\n<li>Use the visual debugger to understand code flow and state</li>\n<li>Make your code more reliable with unit testing and pytest</li>\n<li>Create new Python packages</li>\n<li>And lots more</li>\n</ul>\n\n<p>Webcast with JetBrains: <a href=\"https://info.jetbrains.com/PyCharm-Webinar-January2018.html\"><strong>MongoDB Quickstart with Python and PyCharm</strong></a> <strong>Jan 30</strong></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 11 Jan 2018 00:00:00 -0800", "published_parsed": [2018, 1, 11, 8, 0, 0, 3, 11, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Don't dismiss SQLite as just a starter DB", "itunes_episode": "60", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:26:29"}}, "#59 Instagram disregards Python's GC (again)": {"info": {"title": "#59 Instagram disregards Python's GC (again)", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#59 Instagram disregards Python's GC (again)"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/59/instagram-disregards-python-s-gc-again"}, {"length": "23712054", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/59/instagram-disregards-python-s-gc-again.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/59/instagram-disregards-python-s-gc-again", "id": "https://pythonbytes.fm/episodes/a8ec4b54-f53c-44c2-b883-a4070444e184", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <strong>gc.freeze() and Copy-on-write friendly Python garbage collection</strong></p>\n\n<ul>\n<li><a href=\"https://engineering.instagram.com/copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf\">Copy-on-write friendly Python garbage collection</a> - Instagram</li>\n<li><a href=\"https://github.com/python/cpython/pull/3705\">gc.freeze() now part of Python 3.7</a> - github pull request</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/astorfi/speechpy\"><strong>SpeechPy - A Library for Speech Processing and Recognition</strong></a></p>\n\n<ul>\n<li>A Library for Speech Processing and Recognition</li>\n<li>More foundation for data science than shooting out words.</li>\n<li>Based on MFCC (Mel Frequency Cepstral Coefficient)\n<ul>\n<li>The first step in any automatic speech recognition system is to extract features i.e. identify the components of the audio signal that are good for identifying the linguistic content and discarding all the other stuff which carries information like background noise, emotion etc. </li>\n</ul></li>\n<li>Citation section is a nice touch</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://codechalleng.es/\"><strong>PyBites Code Challenges : Bites of Py</strong></a></p>\n\n<ul>\n<li>Like code katas, coding challenges you can do on your own.</li>\n<li>\u201cBites of Py are self contained 20-60 min Python (3.6) code challenges you can code and verify in the browser.\u201d</li>\n<li>Use pytest to check answers</li>\n<li>See pytest output so you can partially solve challenges and see where it fails.</li>\n<li>BTW, min() takes a key, like sort() and sorted(). I learned that this morning.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://py.checkio.org/blog/how-big-is-the-python-family/\"><strong>How big is the Python Family</strong></a></p>\n\n<ul>\n<li>CPython, Jython, IronPython, Python for .NET, Cython, PyPy, MicroPython, and recently Grumpy</li>\n<li>This is why I don\u2019t like the word \u201cPython interpreter\u201d but rather use \u201cPython runtime\u201d even though it\u2019s less common.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dramatiq.io/index.html\"><strong>Dramatiq: simple task processing</strong></a></p>\n\n<ul>\n<li><a href=\"https://www.podcastinit.com/dramatiq-with-bogdan-popa-episode-141/\">Interview on Podcast.init</a></li>\n<li><a href=\"https://dramatiq.io/cookbook.html#\">Cookbook</a> included in documentation to get started pretty quick.</li>\n<li>Inspired by <a href=\"http://www.celeryproject.org/\">Celery</a>, but probably a bit easier to get into if you are new to task processing.</li>\n<li>License is interesting</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/controlling-python-async-creep-ec0a0f4b79ba\"><strong>Controlling Python Async Creep</strong></a></p>\n\n<ul>\n<li>From friend of the show Cristian Medina</li>\n<li>Boundary between sync and async can get tricky</li>\n<li>The complication arises when invoking awaitable functions. Doing so requires an async defined code block or coroutine. A non-issue except that if your caller has to be async, then you can\u2019t call it either unless its caller is async. Which then forces its caller into an async block as well, and so on. This is \u201casync creep\u201d.</li>\n<li>Solutions or techniques\n<ul>\n<li>Waiting for blocks of async code\n<ul>\n<li>The general guideline is to start with things that wait on I/O, like file or socket access, HTTP requests, etc.</li>\n<li>Once you know which pieces to optimize, start identifying the ones that can run on top of each other.</li>\n<li>Nice example using a web service</li>\n</ul></li>\n<li>Use a thread\n<ul>\n<li>Next example creating a dedicated asyncio loop in the secondary thread</li>\n</ul></li>\n<li>Mixing sync and async\n<ul>\n<li>Let\u2019s look at something more complicated. What if you have a library or module where most functions can run in parallel, but you only want to do so if the caller is async?</li>\n<li>This could prove useful to any python packages that are wanting to add support for asynchronous execution while still supporting legacy code. </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Extra (michael)</strong>: The <strong>PyTennessee conference</strong> will be held February 10-11, 2018. We recently announced our schedule (<a href=\"https://www.pytennessee.org/schedule/\">https://www.pytennessee.org/schedule/</a>), and tickets are on sale now (<a href=\"https://pytn2018.eventbrite.com/\">https://pytn2018.eventbrite.com/</a>). A smaller, regional conference is a great way to meet people, make new Python friends, and hear some great talks without having to fight the crowds of the larger conferences.</p>\n\n<p>If anyone wants to buy a ticket and wants a 10% discount, they can use the code <code>PythonBytes</code> during checkout.</p>\n\n<p><strong>In the news</strong></p>\n\n<ul>\n<li>Not much to do about this but pay attention: A critical design flaw in virtually all microprocessors allows attackers to dump the entire memory contents off of a machine/mobile device/PC/cloud server etc.\n<ul>\n<li><a href=\"https://twitter.com/nicoleperlroth/status/948684376249962496\">https://twitter.com/nicoleperlroth/status/948684376249962496</a></li>\n<li><a href=\"https://www.nytimes.com/2018/01/03/business/computer-flaws.html\">https://www.nytimes.com/2018/01/03/business/computer-flaws.html</a></li>\n<li>Probably excellent coverage on https://risky.biz/</li>\n</ul></li>\n<li>From NY Times:\n<ul>\n<li><em>The two problems, called Meltdown and Spectre, could allow hackers to steal the entire memory contents of computers, including mobile devices, personal computers and servers running in so-called cloud computer networks.</em></li>\n<li><em>There is no easy fix for Spectre, which could require redesigning the processors, according to researchers. As for Meltdown, the software patch needed to fix the issue could slow down computers by as much as 30 percent \u2014 an ugly situation for people used to fast downloads from their favorite online services.</em></li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael: <strong>Everything Bundle</strong>: <strong><a href=\"https://talkpython.fm/everything\">talkpython.fm/everything</a></strong></p>\n\n<p>Includes Mastering PyCharm, Python 3: An Illustrated Tour, Intro to Ansible, and much more.</p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <strong>gc.freeze() and Copy-on-write friendly Python garbage collection</strong></p>\n\n<ul>\n<li><a href=\"https://engineering.instagram.com/copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf\">Copy-on-write friendly Python garbage collection</a> - Instagram</li>\n<li><a href=\"https://github.com/python/cpython/pull/3705\">gc.freeze() now part of Python 3.7</a> - github pull request</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/astorfi/speechpy\"><strong>SpeechPy - A Library for Speech Processing and Recognition</strong></a></p>\n\n<ul>\n<li>A Library for Speech Processing and Recognition</li>\n<li>More foundation for data science than shooting out words.</li>\n<li>Based on MFCC (Mel Frequency Cepstral Coefficient)\n<ul>\n<li>The first step in any automatic speech recognition system is to extract features i.e. identify the components of the audio signal that are good for identifying the linguistic content and discarding all the other stuff which carries information like background noise, emotion etc. </li>\n</ul></li>\n<li>Citation section is a nice touch</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://codechalleng.es/\"><strong>PyBites Code Challenges : Bites of Py</strong></a></p>\n\n<ul>\n<li>Like code katas, coding challenges you can do on your own.</li>\n<li>\u201cBites of Py are self contained 20-60 min Python (3.6) code challenges you can code and verify in the browser.\u201d</li>\n<li>Use pytest to check answers</li>\n<li>See pytest output so you can partially solve challenges and see where it fails.</li>\n<li>BTW, min() takes a key, like sort() and sorted(). I learned that this morning.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://py.checkio.org/blog/how-big-is-the-python-family/\"><strong>How big is the Python Family</strong></a></p>\n\n<ul>\n<li>CPython, Jython, IronPython, Python for .NET, Cython, PyPy, MicroPython, and recently Grumpy</li>\n<li>This is why I don\u2019t like the word \u201cPython interpreter\u201d but rather use \u201cPython runtime\u201d even though it\u2019s less common.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dramatiq.io/index.html\"><strong>Dramatiq: simple task processing</strong></a></p>\n\n<ul>\n<li><a href=\"https://www.podcastinit.com/dramatiq-with-bogdan-popa-episode-141/\">Interview on Podcast.init</a></li>\n<li><a href=\"https://dramatiq.io/cookbook.html#\">Cookbook</a> included in documentation to get started pretty quick.</li>\n<li>Inspired by <a href=\"http://www.celeryproject.org/\">Celery</a>, but probably a bit easier to get into if you are new to task processing.</li>\n<li>License is interesting</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/controlling-python-async-creep-ec0a0f4b79ba\"><strong>Controlling Python Async Creep</strong></a></p>\n\n<ul>\n<li>From friend of the show Cristian Medina</li>\n<li>Boundary between sync and async can get tricky</li>\n<li>The complication arises when invoking awaitable functions. Doing so requires an async defined code block or coroutine. A non-issue except that if your caller has to be async, then you can\u2019t call it either unless its caller is async. Which then forces its caller into an async block as well, and so on. This is \u201casync creep\u201d.</li>\n<li>Solutions or techniques\n<ul>\n<li>Waiting for blocks of async code\n<ul>\n<li>The general guideline is to start with things that wait on I/O, like file or socket access, HTTP requests, etc.</li>\n<li>Once you know which pieces to optimize, start identifying the ones that can run on top of each other.</li>\n<li>Nice example using a web service</li>\n</ul></li>\n<li>Use a thread\n<ul>\n<li>Next example creating a dedicated asyncio loop in the secondary thread</li>\n</ul></li>\n<li>Mixing sync and async\n<ul>\n<li>Let\u2019s look at something more complicated. What if you have a library or module where most functions can run in parallel, but you only want to do so if the caller is async?</li>\n<li>This could prove useful to any python packages that are wanting to add support for asynchronous execution while still supporting legacy code. </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Extra (michael)</strong>: The <strong>PyTennessee conference</strong> will be held February 10-11, 2018. We recently announced our schedule (<a href=\"https://www.pytennessee.org/schedule/\">https://www.pytennessee.org/schedule/</a>), and tickets are on sale now (<a href=\"https://pytn2018.eventbrite.com/\">https://pytn2018.eventbrite.com/</a>). A smaller, regional conference is a great way to meet people, make new Python friends, and hear some great talks without having to fight the crowds of the larger conferences.</p>\n\n<p>If anyone wants to buy a ticket and wants a 10% discount, they can use the code <code>PythonBytes</code> during checkout.</p>\n\n<p><strong>In the news</strong></p>\n\n<ul>\n<li>Not much to do about this but pay attention: A critical design flaw in virtually all microprocessors allows attackers to dump the entire memory contents off of a machine/mobile device/PC/cloud server etc.\n<ul>\n<li><a href=\"https://twitter.com/nicoleperlroth/status/948684376249962496\">https://twitter.com/nicoleperlroth/status/948684376249962496</a></li>\n<li><a href=\"https://www.nytimes.com/2018/01/03/business/computer-flaws.html\">https://www.nytimes.com/2018/01/03/business/computer-flaws.html</a></li>\n<li>Probably excellent coverage on https://risky.biz/</li>\n</ul></li>\n<li>From NY Times:\n<ul>\n<li><em>The two problems, called Meltdown and Spectre, could allow hackers to steal the entire memory contents of computers, including mobile devices, personal computers and servers running in so-called cloud computer networks.</em></li>\n<li><em>There is no easy fix for Spectre, which could require redesigning the processors, according to researchers. As for Meltdown, the software patch needed to fix the issue could slow down computers by as much as 30 percent \u2014 an ugly situation for people used to fast downloads from their favorite online services.</em></li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael: <strong>Everything Bundle</strong>: <strong><a href=\"https://talkpython.fm/everything\">talkpython.fm/everything</a></strong></p>\n\n<p>Includes Mastering PyCharm, Python 3: An Illustrated Tour, Intro to Ansible, and much more.</p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 05 Jan 2018 00:00:00 -0800", "published_parsed": [2018, 1, 5, 8, 0, 0, 4, 5, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Instagram disregards Python's GC (again)", "itunes_episode": "59", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:25:39"}}, "#58 Better cache decorators and another take on type hints": {"info": {"title": "#58 Better cache decorators and another take on type hints", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#58 Better cache decorators and another take on type hints"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/58/better-cache-decorators-and-another-take-on-type-hints"}, {"length": "14622367", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/58/better-cache-decorators-and-another-take-on-type-hints.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/58/better-cache-decorators-and-another-take-on-type-hints", "id": "https://pythonbytes.fm/episodes/696028af-a02d-480f-a756-fd4fb20456d3", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://engineering.instagram.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881\"><strong>Instagram open sources MonkeyType</strong></a></p>\n\n<ul>\n<li><em>Carl Meyer, an engineer on Instagram\u2019s infrastructure team.</em></li>\n<li>(Note: <a href=\"https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future\">we talked about Dropbox\u2019s pyannotate in episode 54</a>. pyannotate is not on Python3 yet and generates comment style annotations that are Py2 compatible)</li>\n<li>MonkeyType is Instagram\u2019s tool for automatically adding type annotations to your Python 3 code via runtime tracing of types seen.</li>\n<li>Requires Python 3.6+</li>\n<li>Generates only Python 3 style type annotations (no type comments)</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://cachetools.readthedocs.io/en/latest/\"><strong>cachetools</strong></a></p>\n\n<ul>\n<li>Extensible memoizing collections and decorators</li>\n<li>Think variants of Python 3 Standard Library @lru_cache function decorator</li>\n<li>Caching types:\n<ul>\n<li><code>cachetools.Cache</code> Mutable mapping to serve as a simple cache or cache base class.</li>\n<li><code>cachetools.LFUCache</code> Least Frequently Used (LFU) cache implementation</li>\n<li><code>cachetools.LRUCache</code> Least Recently Used (LRU) cache implementation</li>\n<li><code>cachetools.TTLCache</code> LRU Cache implementation with per-item time-to-live (TTL) value.</li>\n<li>And more</li>\n</ul></li>\n<li>Memoizing decorators\n<ul>\n<li><code>cachetools.cached</code> Decorator to wrap a function with a memoizing callable that saves results in a cache.</li>\n<li>Note that cache need not be an instance of the cache implementations provided by the <code>cachetools</code> module. cached() will work with any mutable mapping type, including plain dict and <code>weakref.WeakValueDictionary</code>.</li>\n<li>Can pass key function for hash insertions and lock object for thread safety.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://charlesleifer.com/blog/going-fast-with-sqlite-and-python/\"><strong>Going Fast with SQLite and Python</strong></a></p>\n\n<ul>\n<li>Charles Leifer</li>\n<li>Many projects start with SQLite, as it\u2019s distributed with Python as <a href=\"https://docs.python.org/3/library/sqlite3.html\">sqlite3</a>.</li>\n<li>This article discusses some ways to achieve better performance from SQLite and shares some tricks.\n<ul>\n<li>transactions, concurrency, and autocommit</li>\n<li>user-defined functions</li>\n<li>using pragmas</li>\n<li>compilation flags</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4: <a href=\"https://www.numworks.com/features/\">The graphing calculator that makes learning math easier.</a></strong></p>\n\n<ul>\n<li>A full graphing calculator</li>\n<li>Programmable in Python</li>\n<li>Exam approved: Take the SAT and the ACT.</li>\n<li>Free browser emulator</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/index.html\"><strong>Installing Python Packages from a Jupyter Notebook</strong></a></p>\n\n<ul>\n<li>Jake VanderPlas</li>\n<li>using conda\nimport sys\n!conda install --yes --prefix {sys.prefix} numpy</li>\n<li>using pip \nimport sys\n{sys.executable} -m pip install numpy</li>\n<li>plus a discussion of why this is weird in Jupyter</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.youtube.com/user/PyConDE/videos\"><strong>Videos from PyConDE 2017 are online</strong></a></p>\n\n<ul>\n<li>via Miroslav \u0160ediv\u00fd <a href=\"https://twitter.com/eumiro/status/936671094429364225\">@eumiro</a></li>\n<li>Lots of interesting talk titles</li>\n<li>Almost all in English</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <strong><a href=\"http://do.co/python\">http://do.co/python</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://engineering.instagram.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881\"><strong>Instagram open sources MonkeyType</strong></a></p>\n\n<ul>\n<li><em>Carl Meyer, an engineer on Instagram\u2019s infrastructure team.</em></li>\n<li>(Note: <a href=\"https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future\">we talked about Dropbox\u2019s pyannotate in episode 54</a>. pyannotate is not on Python3 yet and generates comment style annotations that are Py2 compatible)</li>\n<li>MonkeyType is Instagram\u2019s tool for automatically adding type annotations to your Python 3 code via runtime tracing of types seen.</li>\n<li>Requires Python 3.6+</li>\n<li>Generates only Python 3 style type annotations (no type comments)</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://cachetools.readthedocs.io/en/latest/\"><strong>cachetools</strong></a></p>\n\n<ul>\n<li>Extensible memoizing collections and decorators</li>\n<li>Think variants of Python 3 Standard Library @lru_cache function decorator</li>\n<li>Caching types:\n<ul>\n<li><code>cachetools.Cache</code> Mutable mapping to serve as a simple cache or cache base class.</li>\n<li><code>cachetools.LFUCache</code> Least Frequently Used (LFU) cache implementation</li>\n<li><code>cachetools.LRUCache</code> Least Recently Used (LRU) cache implementation</li>\n<li><code>cachetools.TTLCache</code> LRU Cache implementation with per-item time-to-live (TTL) value.</li>\n<li>And more</li>\n</ul></li>\n<li>Memoizing decorators\n<ul>\n<li><code>cachetools.cached</code> Decorator to wrap a function with a memoizing callable that saves results in a cache.</li>\n<li>Note that cache need not be an instance of the cache implementations provided by the <code>cachetools</code> module. cached() will work with any mutable mapping type, including plain dict and <code>weakref.WeakValueDictionary</code>.</li>\n<li>Can pass key function for hash insertions and lock object for thread safety.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://charlesleifer.com/blog/going-fast-with-sqlite-and-python/\"><strong>Going Fast with SQLite and Python</strong></a></p>\n\n<ul>\n<li>Charles Leifer</li>\n<li>Many projects start with SQLite, as it\u2019s distributed with Python as <a href=\"https://docs.python.org/3/library/sqlite3.html\">sqlite3</a>.</li>\n<li>This article discusses some ways to achieve better performance from SQLite and shares some tricks.\n<ul>\n<li>transactions, concurrency, and autocommit</li>\n<li>user-defined functions</li>\n<li>using pragmas</li>\n<li>compilation flags</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4: <a href=\"https://www.numworks.com/features/\">The graphing calculator that makes learning math easier.</a></strong></p>\n\n<ul>\n<li>A full graphing calculator</li>\n<li>Programmable in Python</li>\n<li>Exam approved: Take the SAT and the ACT.</li>\n<li>Free browser emulator</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/index.html\"><strong>Installing Python Packages from a Jupyter Notebook</strong></a></p>\n\n<ul>\n<li>Jake VanderPlas</li>\n<li>using conda\nimport sys\n!conda install --yes --prefix {sys.prefix} numpy</li>\n<li>using pip \nimport sys\n{sys.executable} -m pip install numpy</li>\n<li>plus a discussion of why this is weird in Jupyter</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.youtube.com/user/PyConDE/videos\"><strong>Videos from PyConDE 2017 are online</strong></a></p>\n\n<ul>\n<li>via Miroslav \u0160ediv\u00fd <a href=\"https://twitter.com/eumiro/status/936671094429364225\">@eumiro</a></li>\n<li>Lots of interesting talk titles</li>\n<li>Almost all in English</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 26 Dec 2017 00:00:00 -0800", "published_parsed": [2017, 12, 26, 8, 0, 0, 1, 360, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Better cache decorators and another take on type hints", "itunes_episode": "58", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:15:27"}}, "#57 Our take on Excel and Python": {"info": {"title": "#57 Our take on Excel and Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#57 Our take on Excel and Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/57/our-take-on-excel-and-python"}, {"length": "14940544", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/57/our-take-on-excel-and-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/57/our-take-on-excel-and-python", "id": "https://pythonbytes.fm/episodes/07740c0a-f77e-4693-9435-50a3e22ea8c0", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"http://do.co/python\"><strong>http://digitalocean.com</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://medium.com/@anthonypjshaw/testing-python-3-and-2-simultaneously-with-retox-3e7c4b41453f\"><strong>Testing Python 3 and 2 simultaneously with retox</strong></a></p>\n\n<ul>\n<li>Anthony Shaw</li>\n<li><a href=\"https://tox.readthedocs.io/en/latest/\">tox</a> allows you to run the same tests in multiple configurations.\n<ul>\n<li>For example, multiple Python interpreters (2 vs 3), or on different hardware, or using different options, etc.</li>\n<li>tox can also tests your packaging code (on by default, but can be disabled)</li>\n</ul></li>\n<li><a href=\"https://pypi.python.org/pypi/detox\">detox</a> allows multiple configurations to be tested in parallel with multiprocessing\n<ul>\n<li>typically running all tests 2-4 times faster</li>\n</ul></li>\n<li><a href=\"https://github.com/tonybaloney/retox\">retox</a> does this with a GUI\n<ul>\n<li>also adds \u201cwatch\u201d capability</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://robomongo.org/\"><strong>Robo 3T / RoboMongo</strong></a></p>\n\n<ul>\n<li>MongoDB GUI with embedded shell</li>\n<li>CLI interaction</li>\n<li>GUI when you want it</li>\n<li>No. 34 repository on GitHub</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>regular expressions</strong></p>\n\n<ul>\n<li><a href=\"http://devarea.com/python-regular-expressions-practical-guide\">Regular Expressions Practical Guide</a>\n<ul>\n<li>Python examples for some common expressions</li>\n<li>How to use the built in re package for email addresses, URLs, phone numbers</li>\n<li>substitution with <code>re.sub()</code></li>\n<li>splitting a string with <code>re.split()</code></li>\n<li>what some of the escape shortcuts mean, like <code>\\w</code> for word, <code>\\s</code> for whitespace, etc.</li>\n<li>iterating through matches with <code>re.finditer()</code></li>\n<li>Using compiled expressions</li>\n</ul></li>\n<li><a href=\"https://www.dataquest.io/blog/regular-expressions-data-scientists/\">Regular Expressions for Data Scientists</a>\n<ul>\n<li>another great intro, that also talks about:</li>\n<li><code>re.search()</code></li>\n<li><code>re.findall()</code></li>\n<li>match groups</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://mongoengine.org/\"><strong>MongoEngine</strong></a></p>\n\n<ul>\n<li>MongoEngine is a Document-Object Mapper (think ORM, but for document databases) for working with MongoDB from Python.</li>\n<li>Map classes to MongoDB (think SQLAlchemy but for document databases)</li>\n<li>Adds features lacking from MongoDB\n<ul>\n<li>Schema</li>\n<li>Required fields</li>\n<li>Constraints</li>\n<li>Relationships</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://tommikaikkonen.github.io/introducing-prettyprinter-for-python/\"><strong>Introducing PrettyPrinter for Python</strong></a></p>\n\n<ul>\n<li>a powerful, syntax-highlighting, and declarative pretty printer for Python 3.6</li>\n<li>goals\n<ul>\n<li>Implement an algorithm that tries very hard to produce pretty output, even if it takes a bit more work.</li>\n<li>Implement a dead simple, declarative interface to writing your own pretty printers. Python developers rarely write <code>__repr__</code> methods because they're a pain; no one will definitely write pretty printing rules for user-defined types unless it's super simple.</li>\n<li>Implement syntax-highlighting that doesn't break on invalid Python syntax.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://excel.uservoice.com/forums/304921-excel-for-windows-desktop-application/suggestions/10549005-python-as-an-excel-scripting-language\"><strong>Excel and Python</strong></a></p>\n\n<ul>\n<li>Replace VBA</li>\n<li>Python in Excel as the main scripting language</li>\n<li>They need feedback (fill out their survey, upvote the issue)</li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael: \n* Webcast: <strong><a href=\"https://www.wintellect.com/webinar/lets-build-something-mongodb-python/\">https://www.wintellect.com/webinar/lets-build-something-mongodb-python/</a></strong></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"http://do.co/python\"><strong>http://digitalocean.com</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://medium.com/@anthonypjshaw/testing-python-3-and-2-simultaneously-with-retox-3e7c4b41453f\"><strong>Testing Python 3 and 2 simultaneously with retox</strong></a></p>\n\n<ul>\n<li>Anthony Shaw</li>\n<li><a href=\"https://tox.readthedocs.io/en/latest/\">tox</a> allows you to run the same tests in multiple configurations.\n<ul>\n<li>For example, multiple Python interpreters (2 vs 3), or on different hardware, or using different options, etc.</li>\n<li>tox can also tests your packaging code (on by default, but can be disabled)</li>\n</ul></li>\n<li><a href=\"https://pypi.python.org/pypi/detox\">detox</a> allows multiple configurations to be tested in parallel with multiprocessing\n<ul>\n<li>typically running all tests 2-4 times faster</li>\n</ul></li>\n<li><a href=\"https://github.com/tonybaloney/retox\">retox</a> does this with a GUI\n<ul>\n<li>also adds \u201cwatch\u201d capability</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://robomongo.org/\"><strong>Robo 3T / RoboMongo</strong></a></p>\n\n<ul>\n<li>MongoDB GUI with embedded shell</li>\n<li>CLI interaction</li>\n<li>GUI when you want it</li>\n<li>No. 34 repository on GitHub</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>regular expressions</strong></p>\n\n<ul>\n<li><a href=\"http://devarea.com/python-regular-expressions-practical-guide\">Regular Expressions Practical Guide</a>\n<ul>\n<li>Python examples for some common expressions</li>\n<li>How to use the built in re package for email addresses, URLs, phone numbers</li>\n<li>substitution with <code>re.sub()</code></li>\n<li>splitting a string with <code>re.split()</code></li>\n<li>what some of the escape shortcuts mean, like <code>\\w</code> for word, <code>\\s</code> for whitespace, etc.</li>\n<li>iterating through matches with <code>re.finditer()</code></li>\n<li>Using compiled expressions</li>\n</ul></li>\n<li><a href=\"https://www.dataquest.io/blog/regular-expressions-data-scientists/\">Regular Expressions for Data Scientists</a>\n<ul>\n<li>another great intro, that also talks about:</li>\n<li><code>re.search()</code></li>\n<li><code>re.findall()</code></li>\n<li>match groups</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://mongoengine.org/\"><strong>MongoEngine</strong></a></p>\n\n<ul>\n<li>MongoEngine is a Document-Object Mapper (think ORM, but for document databases) for working with MongoDB from Python.</li>\n<li>Map classes to MongoDB (think SQLAlchemy but for document databases)</li>\n<li>Adds features lacking from MongoDB\n<ul>\n<li>Schema</li>\n<li>Required fields</li>\n<li>Constraints</li>\n<li>Relationships</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://tommikaikkonen.github.io/introducing-prettyprinter-for-python/\"><strong>Introducing PrettyPrinter for Python</strong></a></p>\n\n<ul>\n<li>a powerful, syntax-highlighting, and declarative pretty printer for Python 3.6</li>\n<li>goals\n<ul>\n<li>Implement an algorithm that tries very hard to produce pretty output, even if it takes a bit more work.</li>\n<li>Implement a dead simple, declarative interface to writing your own pretty printers. Python developers rarely write <code>__repr__</code> methods because they're a pain; no one will definitely write pretty printing rules for user-defined types unless it's super simple.</li>\n<li>Implement syntax-highlighting that doesn't break on invalid Python syntax.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://excel.uservoice.com/forums/304921-excel-for-windows-desktop-application/suggestions/10549005-python-as-an-excel-scripting-language\"><strong>Excel and Python</strong></a></p>\n\n<ul>\n<li>Replace VBA</li>\n<li>Python in Excel as the main scripting language</li>\n<li>They need feedback (fill out their survey, upvote the issue)</li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael: \n* Webcast: <strong><a href=\"https://www.wintellect.com/webinar/lets-build-something-mongodb-python/\">https://www.wintellect.com/webinar/lets-build-something-mongodb-python/</a></strong></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 21 Dec 2017 00:00:00 -0800", "published_parsed": [2017, 12, 21, 8, 0, 0, 3, 355, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Our take on Excel and Python", "itunes_episode": "57", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:15:48"}}, "#56 The pendulum of time swings beautifully in PyPI": {"info": {"title": "#56 The pendulum of time swings beautifully in PyPI", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#56 The pendulum of time swings beautifully in PyPI"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/56/the-pendulum-of-time-swings-beautifully-in-pypi"}, {"length": "15228356", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/56/the-pendulum-of-time-swings-beautifully-in-pypi.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/56/the-pendulum-of-time-swings-beautifully-in-pypi", "id": "https://pythonbytes.fm/episodes/4df0584b-a673-4e94-a9aa-f024a035e6b0", "guidislink": false, "summary": "<p>Sponsored by Rollbar! <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://pendulum.eustace.io/\"><strong>Pendulum</strong></a> <strong>for datetimes</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/sdispater/pendulum\">on github</a></li>\n<li>See also\n<ul>\n<li><a href=\"http://arrow.readthedocs.io/en/latest/\">arrow</a></li>\n<li><a href=\"https://github.com/kennethreitz/maya\">maya</a></li>\n<li><a href=\"https://docs.python.org/3/library/datetime.html\">datetime</a>, and <a href=\"https://codeburst.io/dealing-with-datetimes-like-a-pro-in-python-fb3ac0feb94b\">Dealing with datetimes like a pro in Python</a></li>\n<li><a href=\"https://dateutil.readthedocs.io/en/stable/\">dateutil</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://allynh.com/blog/flask-asynchronous-background-tasks-with-celery-and-redis/\"><strong>Flask asynchronous background tasks with Celery and Redis</strong></a></p>\n\n<ul>\n<li>Easiest way to a significant scalability to your app: queuing</li>\n<li>What is Celery: Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well</li>\n<li>How Celery works:\n<ul>\n<li>Celery client: This will be connect your Flask application to the Celery task</li>\n<li>Celery worker: A process that runs a background task</li>\n<li>Message broker: The Celery client communicates to the Celery worker through a message broker (redis in this case)</li>\n</ul></li>\n<li>All examples on Windows </li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/\"><strong>Building a Simple Web App With Bottle, SQLAlchemy, and the Twitter API</strong></a></p>\n\n<ul>\n<li>Guest article on RealPython, by <a href=\"https://twitter.com/bbelderbos\">Bob Belderbos</a> of <a href=\"https://twitter.com/PyBytes\">PyBytes</a></li>\n<li>Fun full project start to finish using <a href=\"https://github.com/tweepy/tweepy\">Tweepy</a> to load tweets.</li>\n<li>Ends with a bottle app running on Heroku</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/vscode/comments/7burdg/python_extension_for_vscode_updated_now_brought/\"><strong>Python extension for VSCode updated, now brought to you by Microsoft</strong></a></p>\n\n<ul>\n<li>Don Jayamanne, creator of the Python extension for Visual Studio Code, joins Microsoft</li>\n<li>Full announcement: <strong><a href=\"https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/\">https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/</a></strong></li>\n<li>Had Don on Talk Python back on <a href=\"https://talkpython.fm/episodes/show/101/adding-a-full-featured-python-environment-to-visual-studio-code\"><strong>episode 101</strong></a>.</li>\n<li>What does Microsoft Python team publishing the extension mean?</li>\n<li>For all practical purposes the transition should be transparent to you. Additionally:\n<ul>\n<li>The extension will remain open source and free</li>\n<li>Development will continue to be on GitHub, under the existing license</li>\n<li>More dev resources means (generally) faster turnaround on bug fixes and new features</li>\n</ul></li>\n<li>Microsoft is hiring for Visual Studio Code / Python! They are hiring devs immediately to continue and expand work on our Python support for Visual Studio Code. If you are passionate about developer tools and productivity, this could be an ideal endeavor!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.smashingmagazine.com/2017/11/comprehensive-guide-web-design/\"><strong>A Comprehensive Guide To Web Design</strong></a></p>\n\n<ul>\n<li>Crash course in web design principles, not the mechanics</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/tryolabs/requestium\"><strong>Requestium</strong></a></p>\n\n<ul>\n<li>Integration layer between Requests and Selenium for automation of web actions.</li>\n<li>Merges the power of <a href=\"https://github.com/requests/requests\">Requests</a>, <a href=\"https://github.com/SeleniumHQ/selenium\">Selenium</a>, and <a href=\"https://github.com/scrapy/parsel\">Parsel</a> into a single integrated tool for automatizing web actions.</li>\n<li>The library was created for writing web automation scripts that are written using mostly Requests but that are able to seamlessly switch to Selenium for the JavaScript heavy parts of the website, while maintaining the session.</li>\n<li>Features\n<ul>\n<li>Enables switching between a Requests' Session and a Selenium webdriver while maintaining the current web session.</li>\n<li>Integrates Parsel's parser into the library, making xpath, css, and regex much cleaner to write.</li>\n<li>Improves Selenium's handling of dynamically loading elements.</li>\n<li>Makes cookie handling more flexible in Selenium.</li>\n<li>Makes clicking elements in Selenium more reliable.</li>\n<li>Supports Chrome and PhantomJS.</li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li><a href=\"http://testandcode.com/33\">Test &amp; Code 33: Testing in Data Science with Kathrine Jarmul</a></li>\n<li>Thanks to the 9 folks to that have left an Amazon review for <a href=\"https://www.amazon.com/Python-Testing-pytest-Effective-Scalable/dp/1680502409#customerReviews\">Python Testing with pytest</a>.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar! <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://pendulum.eustace.io/\"><strong>Pendulum</strong></a> <strong>for datetimes</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/sdispater/pendulum\">on github</a></li>\n<li>See also\n<ul>\n<li><a href=\"http://arrow.readthedocs.io/en/latest/\">arrow</a></li>\n<li><a href=\"https://github.com/kennethreitz/maya\">maya</a></li>\n<li><a href=\"https://docs.python.org/3/library/datetime.html\">datetime</a>, and <a href=\"https://codeburst.io/dealing-with-datetimes-like-a-pro-in-python-fb3ac0feb94b\">Dealing with datetimes like a pro in Python</a></li>\n<li><a href=\"https://dateutil.readthedocs.io/en/stable/\">dateutil</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://allynh.com/blog/flask-asynchronous-background-tasks-with-celery-and-redis/\"><strong>Flask asynchronous background tasks with Celery and Redis</strong></a></p>\n\n<ul>\n<li>Easiest way to a significant scalability to your app: queuing</li>\n<li>What is Celery: Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well</li>\n<li>How Celery works:\n<ul>\n<li>Celery client: This will be connect your Flask application to the Celery task</li>\n<li>Celery worker: A process that runs a background task</li>\n<li>Message broker: The Celery client communicates to the Celery worker through a message broker (redis in this case)</li>\n</ul></li>\n<li>All examples on Windows </li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/\"><strong>Building a Simple Web App With Bottle, SQLAlchemy, and the Twitter API</strong></a></p>\n\n<ul>\n<li>Guest article on RealPython, by <a href=\"https://twitter.com/bbelderbos\">Bob Belderbos</a> of <a href=\"https://twitter.com/PyBytes\">PyBytes</a></li>\n<li>Fun full project start to finish using <a href=\"https://github.com/tweepy/tweepy\">Tweepy</a> to load tweets.</li>\n<li>Ends with a bottle app running on Heroku</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/vscode/comments/7burdg/python_extension_for_vscode_updated_now_brought/\"><strong>Python extension for VSCode updated, now brought to you by Microsoft</strong></a></p>\n\n<ul>\n<li>Don Jayamanne, creator of the Python extension for Visual Studio Code, joins Microsoft</li>\n<li>Full announcement: <strong><a href=\"https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/\">https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/</a></strong></li>\n<li>Had Don on Talk Python back on <a href=\"https://talkpython.fm/episodes/show/101/adding-a-full-featured-python-environment-to-visual-studio-code\"><strong>episode 101</strong></a>.</li>\n<li>What does Microsoft Python team publishing the extension mean?</li>\n<li>For all practical purposes the transition should be transparent to you. Additionally:\n<ul>\n<li>The extension will remain open source and free</li>\n<li>Development will continue to be on GitHub, under the existing license</li>\n<li>More dev resources means (generally) faster turnaround on bug fixes and new features</li>\n</ul></li>\n<li>Microsoft is hiring for Visual Studio Code / Python! They are hiring devs immediately to continue and expand work on our Python support for Visual Studio Code. If you are passionate about developer tools and productivity, this could be an ideal endeavor!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.smashingmagazine.com/2017/11/comprehensive-guide-web-design/\"><strong>A Comprehensive Guide To Web Design</strong></a></p>\n\n<ul>\n<li>Crash course in web design principles, not the mechanics</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/tryolabs/requestium\"><strong>Requestium</strong></a></p>\n\n<ul>\n<li>Integration layer between Requests and Selenium for automation of web actions.</li>\n<li>Merges the power of <a href=\"https://github.com/requests/requests\">Requests</a>, <a href=\"https://github.com/SeleniumHQ/selenium\">Selenium</a>, and <a href=\"https://github.com/scrapy/parsel\">Parsel</a> into a single integrated tool for automatizing web actions.</li>\n<li>The library was created for writing web automation scripts that are written using mostly Requests but that are able to seamlessly switch to Selenium for the JavaScript heavy parts of the website, while maintaining the session.</li>\n<li>Features\n<ul>\n<li>Enables switching between a Requests' Session and a Selenium webdriver while maintaining the current web session.</li>\n<li>Integrates Parsel's parser into the library, making xpath, css, and regex much cleaner to write.</li>\n<li>Improves Selenium's handling of dynamically loading elements.</li>\n<li>Makes cookie handling more flexible in Selenium.</li>\n<li>Makes clicking elements in Selenium more reliable.</li>\n<li>Supports Chrome and PhantomJS.</li>\n</ul></li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<ul>\n<li><a href=\"http://testandcode.com/33\">Test &amp; Code 33: Testing in Data Science with Kathrine Jarmul</a></li>\n<li>Thanks to the 9 folks to that have left an Amazon review for <a href=\"https://www.amazon.com/Python-Testing-pytest-Effective-Scalable/dp/1680502409#customerReviews\">Python Testing with pytest</a>.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 14 Dec 2017 00:00:00 -0800", "published_parsed": [2017, 12, 14, 8, 0, 0, 3, 348, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The pendulum of time swings beautifully in PyPI", "itunes_episode": "56", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:16:29"}}, "#55 Flask, Flask, Flask, 3x Flask": {"info": {"title": "#55 Flask, Flask, Flask, 3x Flask", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#55 Flask, Flask, Flask, 3x Flask"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/55/flask-flask-flask-3x-flask"}, {"length": "17684799", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/55/flask-flask-flask-3x-flask.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/55/flask-flask-flask-3x-flask", "id": "https://pythonbytes.fm/episodes/bf0049c2-10fa-4cc2-856a-734d5ae7935e", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean: <a href=\"http://digitalocean.com\">http://digitalocean.com</a></p>\n\n<p><strong>Brian #1</strong> <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\"><strong>The Flask Mega-Tutorial</strong></a><strong>, reborn</strong></p>\n\n<ul>\n<li>This very popular tutorial, written in 2012, has been rewritten.</li>\n<li><a href=\"https://twitter.com/miguelgrinberg\">Miguel Grinberg</a> has rewritten it with the help of a kickstarter campaign.</li>\n<li><a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">Part 1 of the tutorial</a> is up, and he\u2019s releasing 1 part per week.</li>\n<li>Want it faster, you can get it all in an <a href=\"https://learn.miguelgrinberg.com/\">eBook</a> right now.</li>\n<li>A video version is coming in January.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/\"><strong>Django 2.0 Released</strong></a></p>\n\n<ul>\n<li>This release starts Django\u2019s use of a <a href=\"https://docs.djangoproject.com/en/stable/internals/release-process/#internal-release-cadence\">loose form of semantic versioning</a></li>\n<li>Features\n<ul>\n<li>A <a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#simplified-url-routing-syntax\">simplified URL routing syntax</a> that allows writing routes without regular expressions.</li>\n<li>A responsive, <a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#mobile-friendly-contrib-admin\">mobile-friendly contrib.admin</a>.</li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#window-expressions\">Window expressions</a> to allow adding an OVER clause to querysets.</li>\n</ul></li>\n<li>Python 3 only</li>\n<li>django.contrib.auth\n<ul>\n<li>The default iteration count for the PBKDF2 password hasher is increased from 36,000 to 100,000.</li>\n</ul></li>\n<li>Lots more changes</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://lintlyci.github.io/Flake8Rules/\"><strong>The Big Ol' List of Rules</strong></a></p>\n\n<ul>\n<li><a href=\"http://flake8.pycqa.org/en/latest/index.html\">Flake8</a> is a popular code linter that combines pyflakes, pycodestyle, and mccabe.\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/pycodestyle\">pycodestyle</a> is the new pep8 to enforce <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a> suggestions. These are mostly style guide items, and not actual bugs.</li>\n<li><a href=\"https://pypi.python.org/pypi/pyflakes\">pyflakes</a> is more like a traditional linter in that it catches things that are probably oversight or bugs.</li>\n<li><a href=\"https://pypi.python.org/pypi/mccabe\">mccabe</a> is harder to explain, but it generally tells you if your code might be too complicated, using <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic Complexity</a>.</li>\n</ul></li>\n<li>Flake8 produces error codes if your code has problems\n<ul>\n<li>Ennn and Wnnn for pycodestyle errors and warnings</li>\n<li>Fnnn for pyflakes errors</li>\n<li>Cnnn for mccabe errors</li>\n</ul></li>\n<li>The <a href=\"https://lintlyci.github.io/Flake8Rules/\">The Big Ol' List of Rules</a> is a very nice breakdown of every error, what it means, and has links to other documents where they are defined.</li>\n<li>Very nice work from <a href=\"https://twitter.com/gmcconnaughey\">Grant McConnaughey</a></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/tonybaloney/requests-staticmock\"><strong>requests-staticmock</strong></a></p>\n\n<ul>\n<li>via <a href=\"https://twitter.com/anthonypjshaw\">Anthony Shaw</a></li>\n<li>The Session object allows you to persist certain parameters across requests. It also persists cookies across all requests made from the Session instance, and will use <code>urllib3</code>'s <a href=\"http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool\">connection pooling</a>. So if you're making several requests to the same host, the underlying TCP connection will be reused, which can result in a significant performance increase</li>\n<li>A Session object has all the methods of the main Requests API.</li>\n<li><a href=\"https://github.com/tonybaloney/requests-staticmock\"><strong>requests-staticmock</strong></a> is a static HTTP mock interface for testing classes that leverage Python requests with <strong>no</strong> monkey patching!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.python.org/dev/peps/pep-0557/\"><strong>PEP 557 -- Data Classes</strong></a> <strong>have been approved</strong></p>\n\n<ul>\n<li>You can play with them now if you want, with the <a href=\"https://www.python.org/downloads/release/python-370a3/\">3.7.0a3 developer build</a>.</li>\n<li>However, <a href=\"https://www.python.org/dev/peps/pep-0537/\">3.7 isn\u2019t scheduled for release until June 2018</a>.</li>\n</ul>\n\n<p>Very short Example lifted directly from PEP 557 doc.</p>\n\n<pre><code>@dataclass\nclass C:\n    a: int       # 'a' has no default value\n    b: int = 0   # assign a default value for 'b'\n</code></pre>\n\n<p>In this example, both a and b will be included in the added __init__ method, which will be defined as:</p>\n\n<pre><code>def __init__(self, a: int, b: int = 0):\n    pass\n</code></pre>\n\n<ul>\n<li>Why not just use <a href=\"http://www.attrs.org/en/stable/\">attrs</a>? (Also lifted from the pep doc)\n<ul>\n<li>attrs moves faster than could be accommodated if it were moved in to the standard library.</li>\n<li>attrs supports additional features not being proposed here: validators, converters, metadata, etc. Data Classes makes a tradeoff to achieve simplicity by not implementing these features.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/3x-faster-than-flask-8e89bfbe8e4f\"><strong>Quart: 3x faster Flask</strong></a></p>\n\n<ul>\n<li>Python has evolved since <a href=\"https://github.com/pallets/flask\">Flask</a> was first released around 8 years ago, particularly with the introduction of asyncio. </li>\n<li>Asyncio has allowed for the development of libraries such as <a href=\"https://github.com/MagicStack/uvloop\">uvloop</a> and <a href=\"https://github.com/magicstack/asyncpg\">asyncpg</a> that are reported (<a href=\"https://magic.io/blog/uvloop-blazing-fast-python-networking/\">here</a>, and <a href=\"https://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/\">here</a>) to improve performance far beyond what was previously possible. </li>\n<li>Quart provides the easiest transition for Flask apps to use asyncio as it shares the Flask-API.</li>\n<li><strong>tl;dr:</strong> Upgrading <a href=\"https://github.com/pgjones/faster_than_flask_article/commit/253538aa8cd65a3ed48563c2ea4594d998286293\">this</a> Flask-pyscopg2 app to a Quart-asyncpg app gives a performance speedup of 3x without requiring a major rewrite or adjustment of the code</li>\n<li>View methods become async / await methods</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael:</p>\n\n<ul>\n<li>Pythonic staff of enlightnement\n<ul>\n<li>I have already encountered the Pythonic Staff of Enlightenment, see <a href=\"https://twitter.com/anthonypjshaw/status/866430414537216000\">the photo that Anthony tweeted of you guys brandishing it at PyCon US</a>.</li>\n<li>Now so can you: <a href=\"https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/\">https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/</a></li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean: <a href=\"http://digitalocean.com\">http://digitalocean.com</a></p>\n\n<p><strong>Brian #1</strong> <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\"><strong>The Flask Mega-Tutorial</strong></a><strong>, reborn</strong></p>\n\n<ul>\n<li>This very popular tutorial, written in 2012, has been rewritten.</li>\n<li><a href=\"https://twitter.com/miguelgrinberg\">Miguel Grinberg</a> has rewritten it with the help of a kickstarter campaign.</li>\n<li><a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">Part 1 of the tutorial</a> is up, and he\u2019s releasing 1 part per week.</li>\n<li>Want it faster, you can get it all in an <a href=\"https://learn.miguelgrinberg.com/\">eBook</a> right now.</li>\n<li>A video version is coming in January.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/\"><strong>Django 2.0 Released</strong></a></p>\n\n<ul>\n<li>This release starts Django\u2019s use of a <a href=\"https://docs.djangoproject.com/en/stable/internals/release-process/#internal-release-cadence\">loose form of semantic versioning</a></li>\n<li>Features\n<ul>\n<li>A <a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#simplified-url-routing-syntax\">simplified URL routing syntax</a> that allows writing routes without regular expressions.</li>\n<li>A responsive, <a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#mobile-friendly-contrib-admin\">mobile-friendly contrib.admin</a>.</li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/releases/2.0/#window-expressions\">Window expressions</a> to allow adding an OVER clause to querysets.</li>\n</ul></li>\n<li>Python 3 only</li>\n<li>django.contrib.auth\n<ul>\n<li>The default iteration count for the PBKDF2 password hasher is increased from 36,000 to 100,000.</li>\n</ul></li>\n<li>Lots more changes</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://lintlyci.github.io/Flake8Rules/\"><strong>The Big Ol' List of Rules</strong></a></p>\n\n<ul>\n<li><a href=\"http://flake8.pycqa.org/en/latest/index.html\">Flake8</a> is a popular code linter that combines pyflakes, pycodestyle, and mccabe.\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/pycodestyle\">pycodestyle</a> is the new pep8 to enforce <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a> suggestions. These are mostly style guide items, and not actual bugs.</li>\n<li><a href=\"https://pypi.python.org/pypi/pyflakes\">pyflakes</a> is more like a traditional linter in that it catches things that are probably oversight or bugs.</li>\n<li><a href=\"https://pypi.python.org/pypi/mccabe\">mccabe</a> is harder to explain, but it generally tells you if your code might be too complicated, using <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic Complexity</a>.</li>\n</ul></li>\n<li>Flake8 produces error codes if your code has problems\n<ul>\n<li>Ennn and Wnnn for pycodestyle errors and warnings</li>\n<li>Fnnn for pyflakes errors</li>\n<li>Cnnn for mccabe errors</li>\n</ul></li>\n<li>The <a href=\"https://lintlyci.github.io/Flake8Rules/\">The Big Ol' List of Rules</a> is a very nice breakdown of every error, what it means, and has links to other documents where they are defined.</li>\n<li>Very nice work from <a href=\"https://twitter.com/gmcconnaughey\">Grant McConnaughey</a></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/tonybaloney/requests-staticmock\"><strong>requests-staticmock</strong></a></p>\n\n<ul>\n<li>via <a href=\"https://twitter.com/anthonypjshaw\">Anthony Shaw</a></li>\n<li>The Session object allows you to persist certain parameters across requests. It also persists cookies across all requests made from the Session instance, and will use <code>urllib3</code>'s <a href=\"http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool\">connection pooling</a>. So if you're making several requests to the same host, the underlying TCP connection will be reused, which can result in a significant performance increase</li>\n<li>A Session object has all the methods of the main Requests API.</li>\n<li><a href=\"https://github.com/tonybaloney/requests-staticmock\"><strong>requests-staticmock</strong></a> is a static HTTP mock interface for testing classes that leverage Python requests with <strong>no</strong> monkey patching!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://www.python.org/dev/peps/pep-0557/\"><strong>PEP 557 -- Data Classes</strong></a> <strong>have been approved</strong></p>\n\n<ul>\n<li>You can play with them now if you want, with the <a href=\"https://www.python.org/downloads/release/python-370a3/\">3.7.0a3 developer build</a>.</li>\n<li>However, <a href=\"https://www.python.org/dev/peps/pep-0537/\">3.7 isn\u2019t scheduled for release until June 2018</a>.</li>\n</ul>\n\n<p>Very short Example lifted directly from PEP 557 doc.</p>\n\n<pre><code>@dataclass\nclass C:\n    a: int       # 'a' has no default value\n    b: int = 0   # assign a default value for 'b'\n</code></pre>\n\n<p>In this example, both a and b will be included in the added __init__ method, which will be defined as:</p>\n\n<pre><code>def __init__(self, a: int, b: int = 0):\n    pass\n</code></pre>\n\n<ul>\n<li>Why not just use <a href=\"http://www.attrs.org/en/stable/\">attrs</a>? (Also lifted from the pep doc)\n<ul>\n<li>attrs moves faster than could be accommodated if it were moved in to the standard library.</li>\n<li>attrs supports additional features not being proposed here: validators, converters, metadata, etc. Data Classes makes a tradeoff to achieve simplicity by not implementing these features.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://hackernoon.com/3x-faster-than-flask-8e89bfbe8e4f\"><strong>Quart: 3x faster Flask</strong></a></p>\n\n<ul>\n<li>Python has evolved since <a href=\"https://github.com/pallets/flask\">Flask</a> was first released around 8 years ago, particularly with the introduction of asyncio. </li>\n<li>Asyncio has allowed for the development of libraries such as <a href=\"https://github.com/MagicStack/uvloop\">uvloop</a> and <a href=\"https://github.com/magicstack/asyncpg\">asyncpg</a> that are reported (<a href=\"https://magic.io/blog/uvloop-blazing-fast-python-networking/\">here</a>, and <a href=\"https://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/\">here</a>) to improve performance far beyond what was previously possible. </li>\n<li>Quart provides the easiest transition for Flask apps to use asyncio as it shares the Flask-API.</li>\n<li><strong>tl;dr:</strong> Upgrading <a href=\"https://github.com/pgjones/faster_than_flask_article/commit/253538aa8cd65a3ed48563c2ea4594d998286293\">this</a> Flask-pyscopg2 app to a Quart-asyncpg app gives a performance speedup of 3x without requiring a major rewrite or adjustment of the code</li>\n<li>View methods become async / await methods</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael:</p>\n\n<ul>\n<li>Pythonic staff of enlightnement\n<ul>\n<li>I have already encountered the Pythonic Staff of Enlightenment, see <a href=\"https://twitter.com/anthonypjshaw/status/866430414537216000\">the photo that Anthony tweeted of you guys brandishing it at PyCon US</a>.</li>\n<li>Now so can you: <a href=\"https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/\">https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/</a></li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 07 Dec 2017 00:00:00 -0800", "published_parsed": [2017, 12, 7, 8, 0, 0, 3, 341, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Flask, Flask, Flask, 3x Flask", "itunes_episode": "55", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:20:18"}}, "#54 PyAnnotate your way to the future": {"info": {"title": "#54 PyAnnotate your way to the future", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#54 PyAnnotate your way to the future"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future"}, {"length": "15649796", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/54/pyannotate-your-way-to-the-future.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future", "id": "https://pythonbytes.fm/episodes/590d718c-7af8-4759-8973-cb5a1e3ad58b", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"http://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pyfound.blogspot.com/2017/11/the-psf-awarded-moss-grant-pypi.html?m=1\"><strong>The PSF awarded $170,000 grant from Mozilla Open Source Program to improve sustainability of PyPI</strong></a></p>\n\n<ul>\n<li>Situation\n<ul>\n<li>The Python Packaging Index (PyPI) is the principal repository of software packages for the Python programming language.</li>\n<li>There are over 100 million Python packages are downloaded from PyPI every week.</li>\n<li>The Python community depends on PyPI for the ongoing functioning of the entire Python ecosystem.</li>\n<li>There are no paid staff at the PSF who work on PyPI, and there are only a handful of people who contribute regularly.</li>\n<li>This leads to a situation where we have to depend on volunteers to be on-call for outages and respond to critical security vulnerabilities in core Python Infrastructure.</li>\n</ul></li>\n<li>Next steps\n<ul>\n<li>The first milestone for Warehouse is redirecting portions of the production pypi.python.org to Warehouse including traffic for the simple index and package downloads. At that milestone Warehouse will be the main entryway to Python packages for all but a small fraction of the interactions PyPI sees.</li>\n<li>The bulk of the work will be bringing Warehouse to feature parity with the administrative capabilities users need from the Package Index. We'll keep you posted as we figure out when you can expect that to be true.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/gvanrossum/status/930906528042827776\"><strong>Dropbox releases PyAnnotate</strong></a></p>\n\n<ul>\n<li>Mypy is an experimental optional static type checker for Python that aims to combine the benefits of dynamic (or \"duck\") typing and static typing</li>\n<li>You can develop programs with dynamic typing and add static typing after your code has matured, or migrate existing Python code to static typing.</li>\n<li><a href=\"http://www.mypy-lang.org/\">mypy</a> is great, but it only works after you have added type annotations to your codebase.</li>\n<li>To easy the pain of adding type annotations to existing code, we\u2019ve developed a tool, <a href=\"https://github.com/dropbox/pyannotate\">PyAnnotate</a>, that observes what types are actually used at runtime, and inserts annotations into your source code based on those observations. We\u2019ve now open-sourced the tool.</li>\n<li>run your code with a special <a href=\"https://docs.python.org/3.6/library/sys.html#sys.setprofile\">profiling hook</a> enabled. </li>\n<li>This observes all call arguments and return values and records the observed types in memory. At the end of a run the data is dumped to a file in JSON format. </li>\n<li>A separate command-line utility can then read this JSON file and use it to add inline annotations to your source code.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.kensho.com/pytest-annotate-is-now-open-source-5dd6f6d51d0f\"><strong>pytest-annotate is now open-source!</strong></a></p>\n\n<h2>- Use pyannotate without a driver file:</h2>\n\n<pre><code>    pip install pytest-annotate\n\n    # to run code while collecting types\n    pytest --annotate-output=./annotate.json\n\n    # to see what will change with type hint comments\n    pyannotate --type-info ./annotate.json &lt;path_to_code&gt;\n\n    # to modify code\n    pyannotate -w --type-info ./annotate.json &lt;path_to_code&gt;\n</code></pre>\n\n<p><strong>Michael #4:</strong> <a href=\"https://gist.github.com/ewenchou/be496b2b73be801fd85267ef5471458c\"><strong>Run Python script as systemd service</strong></a></p>\n\n<ul>\n<li>Great for making your own \u201cservices\u201d on Linux</li>\n<li>Incredibly easy, just follow the gist linked above</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.3.0 released</a></strong></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">changelog</a> includes 12 new features</li>\n<li>Most excited about:\n<ul>\n<li>Now pytest displays the total progress percentage while running tests. </li>\n<li>Now captures and displays output from the standard logging module.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://blog.bordum.dk/fast-empty-sequences-in-python.html\"><strong>Why d = {} is faster than d = dict()</strong></a> </p>\n\n<ul>\n<li>It turns out that using <code>str()</code>, <code>list()</code>, <code>dict()</code> and <code>tuple()</code> for creating empty sequences isn't as fast as their shorthand counterparts (<code>''</code>, <code>[]</code>, <code>{}</code>, <code>()</code>).</li>\n<li>We can inspect what happens with the dis module\u2026</li>\n</ul>\n\n<p><strong>Extras</strong></p>\n\n<ul>\n<li>F1 eSports now more exciting than real F1: <a href=\"https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/\">https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"http://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pyfound.blogspot.com/2017/11/the-psf-awarded-moss-grant-pypi.html?m=1\"><strong>The PSF awarded $170,000 grant from Mozilla Open Source Program to improve sustainability of PyPI</strong></a></p>\n\n<ul>\n<li>Situation\n<ul>\n<li>The Python Packaging Index (PyPI) is the principal repository of software packages for the Python programming language.</li>\n<li>There are over 100 million Python packages are downloaded from PyPI every week.</li>\n<li>The Python community depends on PyPI for the ongoing functioning of the entire Python ecosystem.</li>\n<li>There are no paid staff at the PSF who work on PyPI, and there are only a handful of people who contribute regularly.</li>\n<li>This leads to a situation where we have to depend on volunteers to be on-call for outages and respond to critical security vulnerabilities in core Python Infrastructure.</li>\n</ul></li>\n<li>Next steps\n<ul>\n<li>The first milestone for Warehouse is redirecting portions of the production pypi.python.org to Warehouse including traffic for the simple index and package downloads. At that milestone Warehouse will be the main entryway to Python packages for all but a small fraction of the interactions PyPI sees.</li>\n<li>The bulk of the work will be bringing Warehouse to feature parity with the administrative capabilities users need from the Package Index. We'll keep you posted as we figure out when you can expect that to be true.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/gvanrossum/status/930906528042827776\"><strong>Dropbox releases PyAnnotate</strong></a></p>\n\n<ul>\n<li>Mypy is an experimental optional static type checker for Python that aims to combine the benefits of dynamic (or \"duck\") typing and static typing</li>\n<li>You can develop programs with dynamic typing and add static typing after your code has matured, or migrate existing Python code to static typing.</li>\n<li><a href=\"http://www.mypy-lang.org/\">mypy</a> is great, but it only works after you have added type annotations to your codebase.</li>\n<li>To easy the pain of adding type annotations to existing code, we\u2019ve developed a tool, <a href=\"https://github.com/dropbox/pyannotate\">PyAnnotate</a>, that observes what types are actually used at runtime, and inserts annotations into your source code based on those observations. We\u2019ve now open-sourced the tool.</li>\n<li>run your code with a special <a href=\"https://docs.python.org/3.6/library/sys.html#sys.setprofile\">profiling hook</a> enabled. </li>\n<li>This observes all call arguments and return values and records the observed types in memory. At the end of a run the data is dumped to a file in JSON format. </li>\n<li>A separate command-line utility can then read this JSON file and use it to add inline annotations to your source code.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.kensho.com/pytest-annotate-is-now-open-source-5dd6f6d51d0f\"><strong>pytest-annotate is now open-source!</strong></a></p>\n\n<h2>- Use pyannotate without a driver file:</h2>\n\n<pre><code>    pip install pytest-annotate\n\n    # to run code while collecting types\n    pytest --annotate-output=./annotate.json\n\n    # to see what will change with type hint comments\n    pyannotate --type-info ./annotate.json &lt;path_to_code&gt;\n\n    # to modify code\n    pyannotate -w --type-info ./annotate.json &lt;path_to_code&gt;\n</code></pre>\n\n<p><strong>Michael #4:</strong> <a href=\"https://gist.github.com/ewenchou/be496b2b73be801fd85267ef5471458c\"><strong>Run Python script as systemd service</strong></a></p>\n\n<ul>\n<li>Great for making your own \u201cservices\u201d on Linux</li>\n<li>Incredibly easy, just follow the gist linked above</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.3.0 released</a></strong></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">changelog</a> includes 12 new features</li>\n<li>Most excited about:\n<ul>\n<li>Now pytest displays the total progress percentage while running tests. </li>\n<li>Now captures and displays output from the standard logging module.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://blog.bordum.dk/fast-empty-sequences-in-python.html\"><strong>Why d = {} is faster than d = dict()</strong></a> </p>\n\n<ul>\n<li>It turns out that using <code>str()</code>, <code>list()</code>, <code>dict()</code> and <code>tuple()</code> for creating empty sequences isn't as fast as their shorthand counterparts (<code>''</code>, <code>[]</code>, <code>{}</code>, <code>()</code>).</li>\n<li>We can inspect what happens with the dis module\u2026</li>\n</ul>\n\n<p><strong>Extras</strong></p>\n\n<ul>\n<li>F1 eSports now more exciting than real F1: <a href=\"https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/\">https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 29 Nov 2017 00:00:00 -0800", "published_parsed": [2017, 11, 29, 8, 0, 0, 2, 333, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "PyAnnotate your way to the future", "itunes_episode": "54", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:18:51"}}, "#53 Getting started with devpi and Git Virtual FS": {"info": {"title": "#53 Getting started with devpi and Git Virtual FS", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#53 Getting started with devpi and Git Virtual FS"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/53/getting-started-with-devpi-and-git-virtual-fs"}, {"length": "16269844", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/53/getting-started-with-devpi-and-git-virtual-fs.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/53/getting-started-with-devpi-and-git-virtual-fs", "id": "https://pythonbytes.fm/episodes/7aac6745-10d0-4fc1-8ae0-d7768c556dda", "guidislink": false, "summary": "<p>Sponsored by Rollbar! Get the bootstrap plan at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://jakevdp.github.io/blog/2017/11/09/exploring-line-lengths-in-python-packages/\"><strong>Exploring Line Lengths in Python Packages</strong></a></p>\n\n<ul>\n<li>Jake VanderPlas <a href=\"https://twitter.com/jakevdp\"><strong>@</strong></a><a href=\"https://twitter.com/jakevdp\">jakevdp</a></li>\n<li>PEP8 recommends 79 character line lengths.</li>\n<li>This article looks at line lenghts used in NumPy, SciPy, Pandas, ScikitLearn, Matplotlib, and AstroPy</li>\n<li>In the form of a Jupyter notebook so you can follow along with all the code and graphs.</li>\n<li>Fitting the graphs to distributions.</li>\n<li>Closing questions from Jake:\n<ul>\n<li>Where do other Python packages fit on the mode/spread graph?</li>\n<li>Has the coding style in these packages, reflected in line length, evolved over time?</li>\n<li>How do individual contributors behave? Do they tend to have similar habits across packages?</li>\n<li>What do these distributions look like for code written in other languages?</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/numpy/numpy/blob/master/doc/neps/dropping-python2.7-proposal.rst\"><strong>NumPy: Plan for dropping Python 2.7 support</strong></a></p>\n\n<ul>\n<li>The Python core team plans to stop supporting Python 2 in 2020. </li>\n<li>We found that supporting Python 2 is an increasing burden on our limited resources; thus, we plan to eventually drop Python 2.</li>\n<li>Our current plan is as follows.\n<ul>\n<li>Until <strong>December 31, 2018</strong>, all NumPy releases will fully support both Python2 and Python3.</li>\n<li>Starting on <strong>January 1, 2019</strong>, any new feature releases will support only Python3.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://towardsdatascience.com/how-to-learn-pandas-108905ab4955\"><strong>How to Learn Pandas</strong></a></p>\n\n<ul>\n<li>Ted Petrou <a href=\"https://twitter.com/TedPetrou\">@TedPetrou</a></li>\n<li>Alternating between reading documentation and using it for small projects.</li>\n<li>Getting the most out of documentation</li>\n<li>Using Jupyter Notebook</li>\n<li>Using Kaggle kernels, which are datasets in the form of Jupyter notebooks.</li>\n<li>Creating your own kernels</li>\n<li>Try answering questions on SO to test your knowledge</li>\n<li>Set up some projects.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/\">Microsoft and GitHub team up to take Git virtual file system to macOS, Linux</a></p>\n\n<ul>\n<li>Watch the <a href=\"https://channel9.msdn.com/Events/Connect/2017/T179\">10 min Microsoft presentation</a> to understand this quickly.</li>\n<li>Git doesn\u2019t work that well for larger projects\n<ul>\n<li>Yes, it was built for Linux (640 MB) </li>\n<li>But there are larger projects\n<ul>\n<li>Visual Studio and related tools: 3,000 MB (5x)</li>\n<li>Windows: 270 GB (421x), 4,000 people committing per day.</li>\n</ul></li>\n<li>solution was to develop Git Virtual File System (GVFS)</li>\n</ul></li>\n<li>Before virtual:\n<ul>\n<li>12 hours to clone</li>\n<li>3 hours to checkout</li>\n<li>8 min for <code>git status</code></li>\n<li>30 min to commit</li>\n</ul></li>\n<li>After virtual:\n<ul>\n<li>90 sec clone</li>\n<li>30 sec checkout</li>\n<li>3 sec <code>git status</code></li>\n<li>8 sec commit</li>\n</ul></li>\n<li>Microsoft says that, so far, about half of its modifications have been accepted upstream, with upstream Git developers broadly approving of the approach the company has taken to improve the software's scaling.</li>\n<li>GitHub is interested in this for the paid, enterprise side</li>\n<li>Currently Windows only but Microsoft and GitHub are also working to bring similar capabilities to other platforms, with macOS coming first, and later Linux.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/\"><strong>Getting started with devpi</strong></a></p>\n\n<ul>\n<li>Stefan Scherfke <a href=\"https://twitter.com/sscherfke\"><strong>@</strong></a><a href=\"https://twitter.com/sscherfke\">sscherfke</a></li>\n<li>A walkthrough of setting up and using <a href=\"https://docs.devpi.net/\">devpi</a> , a local mirror/cache/local store PyPI server.</li>\n<li>Setting up the server</li>\n<li>User management</li>\n<li>Working with package indexes</li>\n<li>Uploading packages</li>\n<li>Using it to point your pip at</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/LisaDziuba/Marketing-for-Engineers\">Marketing-for-Engineers</a></p>\n\n<ul>\n<li>A curated list of marketing tools and resources to grow your product</li>\n<li>such as:\n<ul>\n<li>finding beta testers</li>\n<li>growing first user base</li>\n<li>advertising project without a budget</li>\n<li>scaling marketing activities for building constant revenue streams.</li>\n</ul></li>\n<li>What is the hardest part of creating a successful product / web app? (hint: it\u2019s not programming or having the idea)</li>\n</ul>\n\n<p><strong>Extras</strong></p>\n\n<ul>\n<li>Black Friday Sale for <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\"><strong>Python Testing with pytest</strong></a> &amp; all other pragmatic eBooks.\n<ul>\n<li>From 11/22 through Friday 12/1, all ebooks at <a href=\"http://pragprog.com/\">pragprog.com</a> are 40% off.</li>\n<li>That makes the pytest book about $14</li>\n<li>Use coupon code <strong>turkeysale2017</strong> to get the discount.</li>\n</ul></li>\n<li><a href=\"https://www.pycon.co/\"><strong>PyCon Columbia</strong></a>, <a href=\"https://twitter.com/pyconcolombia\"><strong>@</strong></a><a href=\"https://twitter.com/pyconcolombia\">pyconcolombia</a>, is February 9, 10 and 11 - 2018 and tickets are available now. (Recommended by Oscar Arbelaez)</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar! Get the bootstrap plan at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://jakevdp.github.io/blog/2017/11/09/exploring-line-lengths-in-python-packages/\"><strong>Exploring Line Lengths in Python Packages</strong></a></p>\n\n<ul>\n<li>Jake VanderPlas <a href=\"https://twitter.com/jakevdp\"><strong>@</strong></a><a href=\"https://twitter.com/jakevdp\">jakevdp</a></li>\n<li>PEP8 recommends 79 character line lengths.</li>\n<li>This article looks at line lenghts used in NumPy, SciPy, Pandas, ScikitLearn, Matplotlib, and AstroPy</li>\n<li>In the form of a Jupyter notebook so you can follow along with all the code and graphs.</li>\n<li>Fitting the graphs to distributions.</li>\n<li>Closing questions from Jake:\n<ul>\n<li>Where do other Python packages fit on the mode/spread graph?</li>\n<li>Has the coding style in these packages, reflected in line length, evolved over time?</li>\n<li>How do individual contributors behave? Do they tend to have similar habits across packages?</li>\n<li>What do these distributions look like for code written in other languages?</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/numpy/numpy/blob/master/doc/neps/dropping-python2.7-proposal.rst\"><strong>NumPy: Plan for dropping Python 2.7 support</strong></a></p>\n\n<ul>\n<li>The Python core team plans to stop supporting Python 2 in 2020. </li>\n<li>We found that supporting Python 2 is an increasing burden on our limited resources; thus, we plan to eventually drop Python 2.</li>\n<li>Our current plan is as follows.\n<ul>\n<li>Until <strong>December 31, 2018</strong>, all NumPy releases will fully support both Python2 and Python3.</li>\n<li>Starting on <strong>January 1, 2019</strong>, any new feature releases will support only Python3.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://towardsdatascience.com/how-to-learn-pandas-108905ab4955\"><strong>How to Learn Pandas</strong></a></p>\n\n<ul>\n<li>Ted Petrou <a href=\"https://twitter.com/TedPetrou\">@TedPetrou</a></li>\n<li>Alternating between reading documentation and using it for small projects.</li>\n<li>Getting the most out of documentation</li>\n<li>Using Jupyter Notebook</li>\n<li>Using Kaggle kernels, which are datasets in the form of Jupyter notebooks.</li>\n<li>Creating your own kernels</li>\n<li>Try answering questions on SO to test your knowledge</li>\n<li>Set up some projects.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/\">Microsoft and GitHub team up to take Git virtual file system to macOS, Linux</a></p>\n\n<ul>\n<li>Watch the <a href=\"https://channel9.msdn.com/Events/Connect/2017/T179\">10 min Microsoft presentation</a> to understand this quickly.</li>\n<li>Git doesn\u2019t work that well for larger projects\n<ul>\n<li>Yes, it was built for Linux (640 MB) </li>\n<li>But there are larger projects\n<ul>\n<li>Visual Studio and related tools: 3,000 MB (5x)</li>\n<li>Windows: 270 GB (421x), 4,000 people committing per day.</li>\n</ul></li>\n<li>solution was to develop Git Virtual File System (GVFS)</li>\n</ul></li>\n<li>Before virtual:\n<ul>\n<li>12 hours to clone</li>\n<li>3 hours to checkout</li>\n<li>8 min for <code>git status</code></li>\n<li>30 min to commit</li>\n</ul></li>\n<li>After virtual:\n<ul>\n<li>90 sec clone</li>\n<li>30 sec checkout</li>\n<li>3 sec <code>git status</code></li>\n<li>8 sec commit</li>\n</ul></li>\n<li>Microsoft says that, so far, about half of its modifications have been accepted upstream, with upstream Git developers broadly approving of the approach the company has taken to improve the software's scaling.</li>\n<li>GitHub is interested in this for the paid, enterprise side</li>\n<li>Currently Windows only but Microsoft and GitHub are also working to bring similar capabilities to other platforms, with macOS coming first, and later Linux.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/\"><strong>Getting started with devpi</strong></a></p>\n\n<ul>\n<li>Stefan Scherfke <a href=\"https://twitter.com/sscherfke\"><strong>@</strong></a><a href=\"https://twitter.com/sscherfke\">sscherfke</a></li>\n<li>A walkthrough of setting up and using <a href=\"https://docs.devpi.net/\">devpi</a> , a local mirror/cache/local store PyPI server.</li>\n<li>Setting up the server</li>\n<li>User management</li>\n<li>Working with package indexes</li>\n<li>Uploading packages</li>\n<li>Using it to point your pip at</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/LisaDziuba/Marketing-for-Engineers\">Marketing-for-Engineers</a></p>\n\n<ul>\n<li>A curated list of marketing tools and resources to grow your product</li>\n<li>such as:\n<ul>\n<li>finding beta testers</li>\n<li>growing first user base</li>\n<li>advertising project without a budget</li>\n<li>scaling marketing activities for building constant revenue streams.</li>\n</ul></li>\n<li>What is the hardest part of creating a successful product / web app? (hint: it\u2019s not programming or having the idea)</li>\n</ul>\n\n<p><strong>Extras</strong></p>\n\n<ul>\n<li>Black Friday Sale for <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\"><strong>Python Testing with pytest</strong></a> &amp; all other pragmatic eBooks.\n<ul>\n<li>From 11/22 through Friday 12/1, all ebooks at <a href=\"http://pragprog.com/\">pragprog.com</a> are 40% off.</li>\n<li>That makes the pytest book about $14</li>\n<li>Use coupon code <strong>turkeysale2017</strong> to get the discount.</li>\n</ul></li>\n<li><a href=\"https://www.pycon.co/\"><strong>PyCon Columbia</strong></a>, <a href=\"https://twitter.com/pyconcolombia\"><strong>@</strong></a><a href=\"https://twitter.com/pyconcolombia\">pyconcolombia</a>, is February 9, 10 and 11 - 2018 and tickets are available now. (Recommended by Oscar Arbelaez)</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 22 Nov 2017 00:00:00 -0800", "published_parsed": [2017, 11, 22, 8, 0, 0, 2, 326, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Getting started with devpi and Git Virtual FS", "itunes_episode": "53", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:10"}}, "#52 Call your APIs with uplink and test them in the tavern": {"info": {"title": "#52 Call your APIs with uplink and test them in the tavern", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#52 Call your APIs with uplink and test them in the tavern"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/52/call-your-apis-with-uplink-and-test-them-in-the-tavern"}, {"length": "19187703", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/52/call-your-apis-with-uplink-and-test-them-in-the-tavern.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/52/call-your-apis-with-uplink-and-test-them-in-the-tavern", "id": "https://pythonbytes.fm/episodes/71e6029d-feb3-4f3f-bda2-e34dff6cc482", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://taverntesting.github.io/\"><strong>Restful API testing</strong></a> <a href=\"https://taverntesting.github.io/\"><strong>with Tavern</strong></a></p>\n\n<p><strong>Michael #2:</strong> <a href=\"https://uplink.readthedocs.io/en/latest/\"><strong>Uplink</strong></a></p>\n\n<ul>\n<li>RESTful client API via decorators</li>\n<li>Create a class to represent the API</li>\n<li>Add methods with arguments, map to API calls.</li>\n<li>e.g.  </li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"nd\">@get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/users/{username}&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n       <span class=\"sd\">&quot;&quot;&quot;Get a single user.&quot;&quot;&quot;</span>        \n</code></pre></div>\n\n<ul>\n<li>Uplink includes support for concurrent requests with asyncio (for Python 3.4+) </li>\n<li>Twisted (for all supported Python versions)</li>\n<li>Not production ready, but very exciting.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://engineering.ticketea.com/using-json-schema-for-rest-api-endpoint-tests/\"><strong>Using json-schema for REST API endpoint tests</strong></a></p>\n\n<p><strong>Sponsor DIGITAL OCEAN SPACES</strong>\nGet started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://twitter.com/watty62/status/923945051616698369\"><strong>Live coding to music!</strong></a></p>\n\n<ul>\n<li>via Ian Watt</li>\n<li>Talk at PyCon UK by Ryan Kirkbride called \u201cProgramming Music for Performance: Live coding with FoxDot\u201d</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://www.weeklypython.chat/\"><strong>Weekly Python Chat</strong></a></p>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://py.checkio.org/blog/10-common-beginner-mistakes-in-python/\"><strong>10 common beginner mistakes in Python</strong></a></p>\n\n<ul>\n<li>Via checkIO:  https://py.checkio.org/</li>\n</ul>\n\n<ol>\n<li>Incorrect indentation, tabs and spaces</li>\n<li>Using a Mutable Value as a Default Value</li>\n<li>Write a lot of comments and docstrings</li>\n<li>Scoping</li>\n<li>Edge cases first (let\u2019s go easy on the indents)</li>\n<li>Copying</li>\n<li>Creating count-by-one errors on loops (range is half closed)</li>\n<li>Wrong capitalization</li>\n<li>Using class variables incorrectly</li>\n</ol>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael: </p>\n\n<ul>\n<li>Flash briefing?</li>\n<li>Firefox Quantum!</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://taverntesting.github.io/\"><strong>Restful API testing</strong></a> <a href=\"https://taverntesting.github.io/\"><strong>with Tavern</strong></a></p>\n\n<p><strong>Michael #2:</strong> <a href=\"https://uplink.readthedocs.io/en/latest/\"><strong>Uplink</strong></a></p>\n\n<ul>\n<li>RESTful client API via decorators</li>\n<li>Create a class to represent the API</li>\n<li>Add methods with arguments, map to API calls.</li>\n<li>e.g.  </li>\n</ul>\n\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"nd\">@get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/users/{username}&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">):</span>\n       <span class=\"sd\">&quot;&quot;&quot;Get a single user.&quot;&quot;&quot;</span>        \n</code></pre></div>\n\n<ul>\n<li>Uplink includes support for concurrent requests with asyncio (for Python 3.4+) </li>\n<li>Twisted (for all supported Python versions)</li>\n<li>Not production ready, but very exciting.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://engineering.ticketea.com/using-json-schema-for-rest-api-endpoint-tests/\"><strong>Using json-schema for REST API endpoint tests</strong></a></p>\n\n<p><strong>Sponsor DIGITAL OCEAN SPACES</strong>\nGet started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://twitter.com/watty62/status/923945051616698369\"><strong>Live coding to music!</strong></a></p>\n\n<ul>\n<li>via Ian Watt</li>\n<li>Talk at PyCon UK by Ryan Kirkbride called \u201cProgramming Music for Performance: Live coding with FoxDot\u201d</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://www.weeklypython.chat/\"><strong>Weekly Python Chat</strong></a></p>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://py.checkio.org/blog/10-common-beginner-mistakes-in-python/\"><strong>10 common beginner mistakes in Python</strong></a></p>\n\n<ul>\n<li>Via checkIO:  https://py.checkio.org/</li>\n</ul>\n\n<ol>\n<li>Incorrect indentation, tabs and spaces</li>\n<li>Using a Mutable Value as a Default Value</li>\n<li>Write a lot of comments and docstrings</li>\n<li>Scoping</li>\n<li>Edge cases first (let\u2019s go easy on the indents)</li>\n<li>Copying</li>\n<li>Creating count-by-one errors on loops (range is half closed)</li>\n<li>Wrong capitalization</li>\n<li>Using class variables incorrectly</li>\n</ol>\n\n<p><strong>Our news</strong></p>\n\n<p>Michael: </p>\n\n<ul>\n<li>Flash briefing?</li>\n<li>Firefox Quantum!</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 16 Nov 2017 00:00:00 -0800", "published_parsed": [2017, 11, 16, 8, 0, 0, 3, 320, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Call your APIs with uplink and test them in the tavern", "itunes_episode": "52", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:40"}}, "#51 How to make your code 80 times faster": {"info": {"title": "#51 How to make your code 80 times faster", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#51 How to make your code 80 times faster"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/51/how-to-make-your-code-80-times-faster"}, {"length": "19153476", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/51/how-to-make-your-code-80-times-faster.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/51/how-to-make-your-code-80-times-faster", "id": "https://pythonbytes.fm/episodes/12d927f4-8d7f-40b3-b108-d1b6cbea2cf4", "guidislink": false, "summary": "<p>This episode is brought to you by Datadog: <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://blog.patricktriest.com/police-data-python/\"><strong>Exploring United States Policing Data with Python</strong></a></p>\n\n<ul>\n<li>How to take a publicly available data set and, using jupyter, ipython, matplotlib, numpy, pandas, and scipy:\n<ul>\n<li>ask questions of the data and get answers</li>\n<li>visualize results with plots</li>\n<li>fill in and/or remove blank data</li>\n</ul></li>\n<li>The example is interesting, and easy to follow. It doesn\u2019t explain all the code, just shows it. You can go look that stuff up later.</li>\n<li>A few notes as I worked through half of the example:\n<ul>\n<li>pip install scipy</li>\n<li>step 1.7 plt.show()</li>\n<li>end of 2.3, don't need <code>.to_html().replace('\\n','')</code></li>\n<li>Use shift-enter to run a cell</li>\n</ul></li>\n<li>I\u2019m concerned with the validity of the results due to the dropping of rows with missing data. Some columns aren\u2019t used for some questions, so for those purposes, the data shouldn\u2019t be abandoned.</li>\n<li>Still a very nice tutorial.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://morepypy.blogspot.it/2017/10/how-to-make-your-code-80-times-faster.html\"><strong>How to make your code 80 times faster</strong></a></p>\n\n<ul>\n<li>Often hear people who are happy because PyPy makes their code 2 times faster or so. Here is a short personal story which shows PyPy can go well beyond that.</li>\n<li>Evolutionary algorithms: the ambitious plan was to automatically evolve a logic which could control a (simulated) quadcopter</li>\n<li>To drive the quadcopter, a Creature has a run_step method which runs at each delta_t\n<ul>\n<li>inputs is a numpy array containing the desired setpoint and the current position on the Z axis;</li>\n<li>outputs is a numpy array containing the thrust to give to the motors. To start easy, all the 4 motors are constrained to have the same thrust</li>\n</ul></li>\n<li>run_step is called at 100Hz</li>\n<li>simply tried to run this code on CPython: ~6.15 seconds/generation</li>\n<li>Then tried with PyPy 5.9: Ouch! We are ~5.5x slower than CPython. This was kind of expected: numpy is based on cpyext, which is infamously slow</li>\n<li>first obvious step is to use numpypy instead of numpy: PyPy+numpy, and more than 2x faster than the original CPython</li>\n<li>So, let's try to do better. As usual, the first thing to do is to profile and see where we spend most of the time. </li>\n<li>we know that the matrix is small, and always of the same shape. So, let's unroll the loop manually</li>\n<li><strong>Tada</strong>: This is around 80 (eighty) times faster than the original CPython+numpy implementation, and around 35-40x faster than the naive PyPy+numpypy one</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.wired.com/story/giving-open-source-projects-life-after-a-developers-death/amp\"><strong>Giving Open-Source Projects Life After a Developer's Death</strong></a></p>\n\n<p><strong>Michael #4:</strong> <a href=\"http://www.movingelectrons.net/blog/2017/10/18/solar-powered-internet-connected-lawn-sprinkler.html\"><strong>Solar Powered Internet Connected Lawn Sprinkler Project</strong></a></p>\n\n<ul>\n<li>via listener suggestion / written: Lenin</li>\n<li>a little project with Adafruit\u2019s Feather HUZZAH board and MicroPython</li>\n<li>Combines with Home Assistant</li>\n<li>Mostly based on AdaFruit, they have a detailed list of the hardware used.</li>\n<li>based on the <a href=\"http://mqtt.org/\"><strong>MQTT protocol</strong></a>, which is a Client-Server <em>Internet of Things</em> connectivity protocol, comes with micropython</li>\n<li>Nice references back to AdaFruit tutorials</li>\n<li>Talk Python #108: MicroPython and Open Source Hardware at Adafruit: <strong><a href=\"https://talkpython.fm/108\">https://talkpython.fm/108</a></strong></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Some New Python Books</strong></p>\n\n<ul>\n<li><a href=\"http://amzn.to/2zEkfO7\">Python Tricks: A Buffet of Awesome Python Features</a>\n<ul>\n<li>by Dan Bader</li>\n</ul></li>\n<li><a href=\"http://amzn.to/2yfE61T\">Illustrated Guide to Python 3</a>\n<ul>\n<li>by Matt Harrison</li>\n</ul></li>\n<li>While we\u2019re at it, there are some older Python books that could use some review love. If you\u2019ve read these, please leave a review. It helps more than you may realize.\n<ul>\n<li><a href=\"http://amzn.to/2zrQZcv\">Python Testing with pytest</a>, by Brian Okken</li>\n<li><a href=\"http://amzn.to/2zqJcf5\">Test-Driven Development with Python</a>, by Harry Percival</li>\n<li><a href=\"http://amzn.to/2zpBWxP\">Two Scoops of Django</a>, Daniel &amp; Audrey Roy Greenfield</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.anaconda.com/blog/developer-blog/announcing-the-release-of-anaconda-distribution-5-0/\"><strong>Anaconda Distribution 5.0 released</strong></a></p>\n\n<ul>\n<li>Over 100 packages have been updated or added to the distribution. JupyterLab alpha preview 0.27.0 is now included, and MKL has been updated to 2018.0.0.</li>\n<li>The new version features all new compilers on macOS and Linux, providing substantial security and performance improvements.</li>\n<li>Where possible, all build recipes are now using conda-forge as a base, via https://github.com/AnacondaRecipes.</li>\n<li>A new channel, pkgs/main, has been added to defaults. The new channel is given top priority within defaults and holds packages built with the new compiler stack.</li>\n<li>The new version of Anaconda Distribution now features more flexible dependency pinning.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This episode is brought to you by Datadog: <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://blog.patricktriest.com/police-data-python/\"><strong>Exploring United States Policing Data with Python</strong></a></p>\n\n<ul>\n<li>How to take a publicly available data set and, using jupyter, ipython, matplotlib, numpy, pandas, and scipy:\n<ul>\n<li>ask questions of the data and get answers</li>\n<li>visualize results with plots</li>\n<li>fill in and/or remove blank data</li>\n</ul></li>\n<li>The example is interesting, and easy to follow. It doesn\u2019t explain all the code, just shows it. You can go look that stuff up later.</li>\n<li>A few notes as I worked through half of the example:\n<ul>\n<li>pip install scipy</li>\n<li>step 1.7 plt.show()</li>\n<li>end of 2.3, don't need <code>.to_html().replace('\\n','')</code></li>\n<li>Use shift-enter to run a cell</li>\n</ul></li>\n<li>I\u2019m concerned with the validity of the results due to the dropping of rows with missing data. Some columns aren\u2019t used for some questions, so for those purposes, the data shouldn\u2019t be abandoned.</li>\n<li>Still a very nice tutorial.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://morepypy.blogspot.it/2017/10/how-to-make-your-code-80-times-faster.html\"><strong>How to make your code 80 times faster</strong></a></p>\n\n<ul>\n<li>Often hear people who are happy because PyPy makes their code 2 times faster or so. Here is a short personal story which shows PyPy can go well beyond that.</li>\n<li>Evolutionary algorithms: the ambitious plan was to automatically evolve a logic which could control a (simulated) quadcopter</li>\n<li>To drive the quadcopter, a Creature has a run_step method which runs at each delta_t\n<ul>\n<li>inputs is a numpy array containing the desired setpoint and the current position on the Z axis;</li>\n<li>outputs is a numpy array containing the thrust to give to the motors. To start easy, all the 4 motors are constrained to have the same thrust</li>\n</ul></li>\n<li>run_step is called at 100Hz</li>\n<li>simply tried to run this code on CPython: ~6.15 seconds/generation</li>\n<li>Then tried with PyPy 5.9: Ouch! We are ~5.5x slower than CPython. This was kind of expected: numpy is based on cpyext, which is infamously slow</li>\n<li>first obvious step is to use numpypy instead of numpy: PyPy+numpy, and more than 2x faster than the original CPython</li>\n<li>So, let's try to do better. As usual, the first thing to do is to profile and see where we spend most of the time. </li>\n<li>we know that the matrix is small, and always of the same shape. So, let's unroll the loop manually</li>\n<li><strong>Tada</strong>: This is around 80 (eighty) times faster than the original CPython+numpy implementation, and around 35-40x faster than the naive PyPy+numpypy one</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.wired.com/story/giving-open-source-projects-life-after-a-developers-death/amp\"><strong>Giving Open-Source Projects Life After a Developer's Death</strong></a></p>\n\n<p><strong>Michael #4:</strong> <a href=\"http://www.movingelectrons.net/blog/2017/10/18/solar-powered-internet-connected-lawn-sprinkler.html\"><strong>Solar Powered Internet Connected Lawn Sprinkler Project</strong></a></p>\n\n<ul>\n<li>via listener suggestion / written: Lenin</li>\n<li>a little project with Adafruit\u2019s Feather HUZZAH board and MicroPython</li>\n<li>Combines with Home Assistant</li>\n<li>Mostly based on AdaFruit, they have a detailed list of the hardware used.</li>\n<li>based on the <a href=\"http://mqtt.org/\"><strong>MQTT protocol</strong></a>, which is a Client-Server <em>Internet of Things</em> connectivity protocol, comes with micropython</li>\n<li>Nice references back to AdaFruit tutorials</li>\n<li>Talk Python #108: MicroPython and Open Source Hardware at Adafruit: <strong><a href=\"https://talkpython.fm/108\">https://talkpython.fm/108</a></strong></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Some New Python Books</strong></p>\n\n<ul>\n<li><a href=\"http://amzn.to/2zEkfO7\">Python Tricks: A Buffet of Awesome Python Features</a>\n<ul>\n<li>by Dan Bader</li>\n</ul></li>\n<li><a href=\"http://amzn.to/2yfE61T\">Illustrated Guide to Python 3</a>\n<ul>\n<li>by Matt Harrison</li>\n</ul></li>\n<li>While we\u2019re at it, there are some older Python books that could use some review love. If you\u2019ve read these, please leave a review. It helps more than you may realize.\n<ul>\n<li><a href=\"http://amzn.to/2zrQZcv\">Python Testing with pytest</a>, by Brian Okken</li>\n<li><a href=\"http://amzn.to/2zqJcf5\">Test-Driven Development with Python</a>, by Harry Percival</li>\n<li><a href=\"http://amzn.to/2zpBWxP\">Two Scoops of Django</a>, Daniel &amp; Audrey Roy Greenfield</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.anaconda.com/blog/developer-blog/announcing-the-release-of-anaconda-distribution-5-0/\"><strong>Anaconda Distribution 5.0 released</strong></a></p>\n\n<ul>\n<li>Over 100 packages have been updated or added to the distribution. JupyterLab alpha preview 0.27.0 is now included, and MKL has been updated to 2018.0.0.</li>\n<li>The new version features all new compilers on macOS and Linux, providing substantial security and performance improvements.</li>\n<li>Where possible, all build recipes are now using conda-forge as a base, via https://github.com/AnacondaRecipes.</li>\n<li>A new channel, pkgs/main, has been added to defaults. The new channel is given top priority within defaults and holds packages built with the new compiler stack.</li>\n<li>The new version of Anaconda Distribution now features more flexible dependency pinning.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 09 Nov 2017 00:00:00 -0800", "published_parsed": [2017, 11, 9, 8, 0, 0, 3, 313, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "How to make your code 80 times faster", "itunes_episode": "51", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:33"}}, "#50 Bundling , shipping, and protecting Python applications": {"info": {"title": "#50 Bundling , shipping, and protecting Python applications", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#50 Bundling , shipping, and protecting Python applications"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/50/bundling-shipping-and-protecting-python-applications"}, {"length": "17157778", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/50/bundling-shipping-and-protecting-python-applications.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/50/bundling-shipping-and-protecting-python-applications", "id": "https://pythonbytes.fm/episodes/35705492-4df6-44e6-b4b4-cf2ac929b752", "guidislink": false, "summary": "<h1>Python Bytes 50</h1>\n\n<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.youtube.com/watch?v=HmT6d-ho5J8&amp;list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ&amp;index=2\"><strong>Think Like a Pythonista</strong></a></p>\n\n<ul>\n<li>2017, by <a href=\"https://twitter.com/standupdev\">@standupdev</a> Luciano Ramalho</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ\">The PyBay2017 playlist</a></li>\n<li>Covered in \u201cThink Lika a Pythonista\u201d\n<ul>\n<li>Creating a container type, a Deck of Cards.</li>\n<li>Luciano shows how to utilize duck typing, builtin types, and operator overloading while creating a type without inheritance.</li>\n<li>Uses a <a href=\"http://jupyter.org/\">Jupyter notebook</a> to work with the code.</li>\n<li>Describes and shows monkeypatching to implement shuffle.</li>\n<li>Watch until the end, he takes feedback from the audience to optimize some code.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/Python/comments/71uwob/serpentai_game_agent_framework_turn_any_video/\"><strong>Serpent.AI - Game Agent Framework</strong></a></p>\n\n<ul>\n<li>Turn ANY video game in a sandbox environment for AI &amp; Bot programming with Python.</li>\n<li>goal with Serpent.AI is to lower the barriers to entry when it comes to using games as sandboxes for code experiments. </li>\n<li>It unlocks your entire existing game library (Steam, DRM-Free etc.) to be used as potential game agent environments and it does so natively</li>\n<li>It also doesn't try to dictate how you solve your problems. Your game agent is your canvas!</li>\n<li>Even a twitch channel with live PyCharm + Jupyter + Game. Here\u2019s a cool example: <a href=\"https://go.twitch.tv/videos/173580782\">https://go.twitch.tv/videos/173580782</a></li>\n<li>Provides some useful conventions but is absolutely NOT opinionated about what you put in your agents: \n<ul>\n<li>Want to use the latest, cutting-edge deep reinforcement learning algorithm? ALLOWED. </li>\n<li>Want to use computer vision techniques, image processing and trigonometry? ALLOWED. </li>\n<li>Want to randomly press the Left or Right buttons? <em>sigh</em> ALLOWED. </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://www.mkdocs.org/\"><strong>MkDocs</strong></a></p>\n\n<ul>\n<li>I\u2019ve been creating pytest plugins using the <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\">pytest-plugin cookiecutter</a>.</li>\n<li>One option is to start the documentation using mkdocs, so I thought I\u2019d try it out.</li>\n<li>For the most part, you have a yaml file to configure things, and a directory with markdown files in it. Then you call <code>mkdocs build</code> and blammo, your documentation is built. I like markdown, so I\u2019m going to try working with mkdocs more.</li>\n<li>Also want to try:\n<ul>\n<li>Generating documentation from source code using <a href=\"https://twitter.com/tryexceptpass\">Christian Medina</a>\u2019s <a href=\"https://medium.com/python-pandemonium/python-introspection-with-the-inspect-module-2c85d5aa5a48\">How to write your own Python documentation generator</a> article and the code in a snippet, <a href=\"https://gist.github.com/dvirsky/30ffbd3c7d8f37d4831b30671b681c24#file-gendocs-py\">gendocs.py</a>.</li>\n<li>I know about <a href=\"http://www.sphinx-doc.org/en/stable/\">Sphinx</a>, but I\u2019m not a fan of reStructured text.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong>  <a href=\"https://github.com/pyinstaller/pyinstaller/releases/tag/v3.3\"><strong>PyInstaller 3.3 released</strong></a></p>\n\n<ul>\n<li>PyInstaller is a program that freezes (packages) Python programs into stand-alone executables, under Windows, Linux, Mac OS X, FreeBSD, Solaris and AIX.</li>\n<li>The main goal of PyInstaller is to be <strong>compatible with 3rd-party packages out-of-the-box</strong>.</li>\n<li><strong>Libraries like PyQt, Django or matplotlib are fully supported</strong>, without having to handle plugins or external data files manually. </li>\n<li>The #1 thing that stands out to me in this release: Python 3.6 support!</li>\n<li>PyInstaller can produce single immutable self contained dependency free portable exe files using the --one-file option.</li>\n<li>Consider the --noconsole option too</li>\n<li>cx_freeze vs pyinstaller? I can tell you that pyinstaller does a much better job of actually detecting and including dependencies. I recently tried both for freezing a multi-threaded, scipy based application and cx_freeze was a real hassle to get functional. Pyinstaller more or less just magically worked in my case whereas cx_freeze took hours of debugging.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/pantsbuild/pex\"><strong>PEX:</strong></a> <a href=\"https://github.com/pantsbuild/pex\"><strong>A library and tool for generating .pex (Python EXecutable) files</strong></a></p>\n\n<ul>\n<li>Developed by twitter. Originally part of the twitter.commons package.</li>\n<li><code>pex</code> is a tool to create PEX files, which are \u201cfiles are self-contained executable Python virtual environments.\u201d, from <a href=\"https://pex.readthedocs.io/en/stable/whatispex.html#whatispex\">pex.readthedocs.io</a>.</li>\n<li>Python can import from zip files. You can add instructions at the beginning of a zip file to make it look like a python script. <code>pex</code> allows you to do that.</li>\n<li>Watch <a href=\"https://www.youtube.com/watch?v=NmpnGhRwsu0\">WTF is PEX?</a>, a 16 min video describing how it works. Brian Wickman</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://bucharjan.cz/blog/using-cython-to-protect-a-python-codebase.html\"><strong>Using Cython to protect a Python codebase</strong></a></p>\n\n<ul>\n<li>A Python project that required the whole codebase to be protected</li>\n<li>They used Cython</li>\n<li>By following this guide, you should be able to cythonize a Python codebase with non-trivial package/module structure, thus making it difficult for evil hackers to reverse engineer it and steal your programming know-how.</li>\n<li>Although protecting Python sources from reverse engineering seems like a futile task at first, cythonizing all the code leads to a reasonable amount of security</li>\n<li>This was a Flask project!</li>\n<li>The current standard for Python archives is the wheel format (.whl), which aims to replace the .egg format. So, let's try to create a wheel with <code>python setup.py bdist_wheel</code>!</li>\n<li>Apparently, the archive contains not only compiled code, but also the sources.</li>\n<li>There is a way to fix this, however it is counter-intuitive.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li>Python for Windows developers: A survey \u2192 <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform\">https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform</a>-</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 50</h1>\n\n<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.youtube.com/watch?v=HmT6d-ho5J8&amp;list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ&amp;index=2\"><strong>Think Like a Pythonista</strong></a></p>\n\n<ul>\n<li>2017, by <a href=\"https://twitter.com/standupdev\">@standupdev</a> Luciano Ramalho</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ\">The PyBay2017 playlist</a></li>\n<li>Covered in \u201cThink Lika a Pythonista\u201d\n<ul>\n<li>Creating a container type, a Deck of Cards.</li>\n<li>Luciano shows how to utilize duck typing, builtin types, and operator overloading while creating a type without inheritance.</li>\n<li>Uses a <a href=\"http://jupyter.org/\">Jupyter notebook</a> to work with the code.</li>\n<li>Describes and shows monkeypatching to implement shuffle.</li>\n<li>Watch until the end, he takes feedback from the audience to optimize some code.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/Python/comments/71uwob/serpentai_game_agent_framework_turn_any_video/\"><strong>Serpent.AI - Game Agent Framework</strong></a></p>\n\n<ul>\n<li>Turn ANY video game in a sandbox environment for AI &amp; Bot programming with Python.</li>\n<li>goal with Serpent.AI is to lower the barriers to entry when it comes to using games as sandboxes for code experiments. </li>\n<li>It unlocks your entire existing game library (Steam, DRM-Free etc.) to be used as potential game agent environments and it does so natively</li>\n<li>It also doesn't try to dictate how you solve your problems. Your game agent is your canvas!</li>\n<li>Even a twitch channel with live PyCharm + Jupyter + Game. Here\u2019s a cool example: <a href=\"https://go.twitch.tv/videos/173580782\">https://go.twitch.tv/videos/173580782</a></li>\n<li>Provides some useful conventions but is absolutely NOT opinionated about what you put in your agents: \n<ul>\n<li>Want to use the latest, cutting-edge deep reinforcement learning algorithm? ALLOWED. </li>\n<li>Want to use computer vision techniques, image processing and trigonometry? ALLOWED. </li>\n<li>Want to randomly press the Left or Right buttons? <em>sigh</em> ALLOWED. </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://www.mkdocs.org/\"><strong>MkDocs</strong></a></p>\n\n<ul>\n<li>I\u2019ve been creating pytest plugins using the <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\">pytest-plugin cookiecutter</a>.</li>\n<li>One option is to start the documentation using mkdocs, so I thought I\u2019d try it out.</li>\n<li>For the most part, you have a yaml file to configure things, and a directory with markdown files in it. Then you call <code>mkdocs build</code> and blammo, your documentation is built. I like markdown, so I\u2019m going to try working with mkdocs more.</li>\n<li>Also want to try:\n<ul>\n<li>Generating documentation from source code using <a href=\"https://twitter.com/tryexceptpass\">Christian Medina</a>\u2019s <a href=\"https://medium.com/python-pandemonium/python-introspection-with-the-inspect-module-2c85d5aa5a48\">How to write your own Python documentation generator</a> article and the code in a snippet, <a href=\"https://gist.github.com/dvirsky/30ffbd3c7d8f37d4831b30671b681c24#file-gendocs-py\">gendocs.py</a>.</li>\n<li>I know about <a href=\"http://www.sphinx-doc.org/en/stable/\">Sphinx</a>, but I\u2019m not a fan of reStructured text.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong>  <a href=\"https://github.com/pyinstaller/pyinstaller/releases/tag/v3.3\"><strong>PyInstaller 3.3 released</strong></a></p>\n\n<ul>\n<li>PyInstaller is a program that freezes (packages) Python programs into stand-alone executables, under Windows, Linux, Mac OS X, FreeBSD, Solaris and AIX.</li>\n<li>The main goal of PyInstaller is to be <strong>compatible with 3rd-party packages out-of-the-box</strong>.</li>\n<li><strong>Libraries like PyQt, Django or matplotlib are fully supported</strong>, without having to handle plugins or external data files manually. </li>\n<li>The #1 thing that stands out to me in this release: Python 3.6 support!</li>\n<li>PyInstaller can produce single immutable self contained dependency free portable exe files using the --one-file option.</li>\n<li>Consider the --noconsole option too</li>\n<li>cx_freeze vs pyinstaller? I can tell you that pyinstaller does a much better job of actually detecting and including dependencies. I recently tried both for freezing a multi-threaded, scipy based application and cx_freeze was a real hassle to get functional. Pyinstaller more or less just magically worked in my case whereas cx_freeze took hours of debugging.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/pantsbuild/pex\"><strong>PEX:</strong></a> <a href=\"https://github.com/pantsbuild/pex\"><strong>A library and tool for generating .pex (Python EXecutable) files</strong></a></p>\n\n<ul>\n<li>Developed by twitter. Originally part of the twitter.commons package.</li>\n<li><code>pex</code> is a tool to create PEX files, which are \u201cfiles are self-contained executable Python virtual environments.\u201d, from <a href=\"https://pex.readthedocs.io/en/stable/whatispex.html#whatispex\">pex.readthedocs.io</a>.</li>\n<li>Python can import from zip files. You can add instructions at the beginning of a zip file to make it look like a python script. <code>pex</code> allows you to do that.</li>\n<li>Watch <a href=\"https://www.youtube.com/watch?v=NmpnGhRwsu0\">WTF is PEX?</a>, a 16 min video describing how it works. Brian Wickman</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://bucharjan.cz/blog/using-cython-to-protect-a-python-codebase.html\"><strong>Using Cython to protect a Python codebase</strong></a></p>\n\n<ul>\n<li>A Python project that required the whole codebase to be protected</li>\n<li>They used Cython</li>\n<li>By following this guide, you should be able to cythonize a Python codebase with non-trivial package/module structure, thus making it difficult for evil hackers to reverse engineer it and steal your programming know-how.</li>\n<li>Although protecting Python sources from reverse engineering seems like a futile task at first, cythonizing all the code leads to a reasonable amount of security</li>\n<li>This was a Flask project!</li>\n<li>The current standard for Python archives is the wheel format (.whl), which aims to replace the .egg format. So, let's try to create a wheel with <code>python setup.py bdist_wheel</code>!</li>\n<li>Apparently, the archive contains not only compiled code, but also the sources.</li>\n<li>There is a way to fix this, however it is counter-intuitive.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li>Python for Windows developers: A survey \u2192 <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform\">https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform</a>-</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 02 Nov 2017 00:00:00 -0800", "published_parsed": [2017, 11, 2, 8, 0, 0, 3, 306, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Bundling , shipping, and protecting Python applications", "itunes_episode": "50", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:17"}}, "#49 Your technical skills are obsolete: now what?": {"info": {"title": "#49 Your technical skills are obsolete: now what?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#49 Your technical skills are obsolete: now what?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/49/your-technical-skills-are-obsolete-now-what"}, {"length": "23110463", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/49/your-technical-skills-are-obsolete-now-what.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/49/your-technical-skills-are-obsolete-now-what", "id": "https://pythonbytes.fm/episodes/49933aa7-f8a2-4bec-a453-8b5a3eaf3dbb", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1: Conference videos for DjangoCon 2017 and PyGotham 2017</strong></p>\n\n<ul>\n<li><a href=\"http://pyvideo.org/events/pygotham-2017.html\">PyGotham 2017 videos on pyvideo</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ujGCN9MOrRk&amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T\">DjangoCon 2017 on YouTube</a></li>\n<li>One I\u2019ve watched so far: \n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=UY2JMZjQspY&amp;index=31&amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T\">DjangoCon US 2017 - Django vs Flask by David &quot;DB&quot; Baumgold</a></li>\n<li><a href=\"http://bit.ly/djangocon-flask\">slides</a></li>\n<li>Very good introduction to Flask while comparing some of the features of Django to Flask and what the current frequent practices are for doing things in Flask like:</li>\n<li>Data modeling with SQLAlchemy, MongoEngine, or Peewee</li>\n<li>User admin with Flask-Security, which wraps Flask-Login, Flask-Permissions, and other commonly used together packages.</li>\n<li>Blueprints in Flask solve a similar problem as apps in Django.</li>\n<li>Flask-Marshmallow for APIs</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2: <a href=\"https://twitter.com/llanga/status/916460954128285696\">Python 3.6.3 released on Tue. All machines at FB are already running it</a> (3 days)</strong></p>\n\n<ul>\n<li>Tweet: Did you hear that 3.6.3 was released on Tue? How about that all machines at FB are already running it? Over 36.3% of our Python apps are 3.6 via <a href=\"https://twitter.com/llanga/status/916460954128285696\">@llanga</a></li>\n<li>See Jason Fried\u2019s presentation on culture: <a href=\"https://www.youtube.com/watch?v=nRtp9NgtXiA\">Rules for Radicals: Changing the Culture of Python at Facebook</a></li>\n<li>More Python 3 news\n<ul>\n<li>Ubuntu 17.10: <em>\u201cPython 2 is no longer installed by default. Python 3 has been updated to 3.6.\u201d</em></li>\n<li>PSA: Python 3.3 is end-of-life in 2 days. Are you prepared?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://codewithoutrules.com/2017/10/23/obsolete-skills/\"><strong>Your technical skills are obsolete: now what?</strong></a></p>\n\n<ul>\n<li>by Itamar Turner-Trauring</li>\n<li>We\u2019re big proponents of keeping your skills current, of learning new techniques and technologies. But how does that fit in with life and work.</li>\n<li>This article is an opinion of how to work on new skills while at work, do it quickly, and look good to your manager.</li>\n<li>It starts with a good discussion of real business reasons why some projects use older technology. Basically, cost vs benefit of change.</li>\n<li>Steps to be part of the solution:\n<ul>\n<li>Identify obsolete and problematic technologies.</li>\n<li>Identify potential replacements.</li>\n<li>Get management buy in to get resources (you) to do a pilot project exploring new technology.</li>\n</ul></li>\n<li>This process will help you be better at identifying problems, even if you don\u2019t get approval to fix it.</li>\n<li>He ends with a comment that if you don\u2019t get approval, all is not lost, you have skills to apply to a new job.</li>\n<li>I\u2019d like to make sue you do a few more steps before giving up and looking for a new job. Before you consider a move to a new team or company, I think\u2026\n<ul>\n<li>You should give your manager the benefit of the doubt and use this to start a conversation. Make sure you understand their reasons for saying no.</li>\n<li>Make sure you are not proposing too much time taken away from your primary role in the company.</li>\n<li>State that you want to improve your skills by providing value for the team and the company. </li>\n<li>Is the \u201cno\u201d due to just bad timing? Is there a higher priority problem to work on? </li>\n<li>You\u2019ve just shown that you are someone interested in keeping your skills sharp and helping the company by expanding your role. If you\u2019re still stuck at this point, then consider a move but also, \u2026</li>\n</ul></li>\n<li>Read this:\n<ul>\n<li><a href=\"http://amzn.to/2xjDBmI\">Team Geek: A Software Developer's Guide to Working Well with Others</a> - Brian Fitzpatrick</li>\n<li>Especially:\n    - pg 117 : \u201cOffensive vs Defensive work\u201d. 50-70% of your time at work needs to be focused on creating new value for your company or your customers. No more than 30-50% on repaying technical debt. (Okken: Limit your process improvement / new technology exploration to no more than 10-20%, but try to never drop it below 5% of your time)\n    - pg 113 : \u201cIt\u2019s easier to ask for forgiveness than permission.\u201d This is a fine line between doing the right thing and doing something you can get reprimanded for. Use good judgement. \n    - Forgotten page number: A big part of your job is making your boss\u2019s job easier and making your boss and your team look good.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/\"><strong>Visualizing Garbage Collection Algorithms</strong></a></p>\n\n<ul>\n<li>By Ken Fox</li>\n<li>Follow up from the excellent deep dive article in GC from Brian</li>\n<li>Most developers take automatic garbage collection for granted.</li>\n<li>It\u2019s very difficult to see how GCs actually work.</li>\n<li><strong>GCs visualized</strong> (click on each image):\n<ul>\n<li><strong>Cleanup At The End: aka No GC</strong> (e.g. Apache web server creates a small pool of memory per request and throws the entire pool away when the request completes)</li>\n<li><strong>Reference Counting Collector</strong> (e.g. Python\u2019s first pass GC, Microsoft COM, C++ Smart Pointers. Memory fragmentation is interesting)\n<ul>\n<li>The red flashes indicate reference counting activity. A very useful property of reference counting is that garbage is detected as soon as possible \u2014 you can sometimes see a flash of red immediately followed by the area turning black.</li>\n</ul></li>\n<li><strong>Mark-Sweep Collector</strong> (e.g. is this Python\u2019s secondary collector? Probably is my guess)\n<ul>\n<li>Mark-sweep eliminates some of the problems of reference count. It can easily handle cyclic structures and it has lower overhead since it doesn\u2019t need to maintain counts.</li>\n</ul></li>\n<li><strong>Mark-Compact Collector</strong> (Oracle\u2019s Hotspot JVM\u2019s tenured object space uses mark-compact)\n<ul>\n<li>Mark-compact disposes of memory, not by just marking it free, but by moving objects down into the free space</li>\n<li>The crazy idea of moving objects means that new objects can always just be created at the end of used memory. This is called a \u201cbump\u201d allocator and is as cheap as stack allocation, but without the limitations of stack size.</li>\n</ul></li>\n<li><strong>Copying Collector, aka Generational GC</strong>\n<ul>\n<li>The foundation of most high-performance garbage collection systems</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://pymotw.com/3/pathlib/\"><strong>pathlib \u2014 Filesystem Paths as Objects</strong></a></p>\n\n<ul>\n<li>from Doug Hellman\u2019s PyMOTW-3</li>\n<li>pathlib was introduced with Python 3.4</li>\n<li>If you need to work with the file system in Python, you should be using pathlib.</li>\n<li>Doug\u2019s article is a really good overview.</li>\n<li>Features\n<ul>\n<li>Building paths with overloaded / operator</li>\n<li>Parsing paths with <code>.parts</code>, <code>.parents</code>, <code>.suffix</code>, <code>.stem</code></li>\n<li>Concrete paths such as <code>Path.home()</code>, <code>Path.cwd()</code></li>\n<li>Getting directory contents with <code>.iterdir()</code></li>\n<li>Pattern matching with <code>.glob()</code> and <code>.rglob()</code></li>\n<li>Reading and writing files with path objects.</li>\n<li>Working with directories and symbolic links</li>\n<li>File properties, permissions</li>\n<li>Deleting files and directories</li>\n</ul></li>\n<li>see also\n<ul>\n<li><a href=\"https://docs.python.org/3/library/pathlib.html\">https://docs.python.org/3/library/pathlib.html</a></li>\n<li>The official docs are pretty good too</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://luminoth.ai/\"><strong>LUMINOTH: Open source Computer Vision toolkit</strong></a></p>\n\n<ul>\n<li>Deep Learning toolkit for Computer Vision</li>\n<li>Supports object detection and image classification, but are aiming for much more.</li>\n<li>It is built in Python, using <a href=\"https://www.tensorflow.org/\">TensorFlow</a> and <a href=\"https://github.com/deepmind/sonnet\">Sonnet</a> (Google\u2019s Deep Learning framework and DeepMind\u2019s graph library)</li>\n<li>Easily train neural networks to detect and classify objects with custom data. </li>\n<li>Use state of the art models such as Faster R-CNN (Region-based Convolutional Neural Networks)</li>\n<li>Comes with GPGPU support</li>\n<li>Simple training\n<ul>\n<li>Train your model by just typing lumi train. Do it locally or using Luminoth's built-in Google Cloud Platform support to train in the cloud.</li>\n<li>Once training is done, you can use our Tensorboard integration to visualize progress and intermediate results. </li>\n</ul></li>\n<li>Are also working on providing <strong>pre-trained checkpoints</strong> on popular datasets such as <a href=\"http://host.robots.ox.ac.uk:8080/pascal/VOC/voc2012/index.html\">Pascal VOC2012</a></li>\n</ul>\n\n<p><strong>Bonus article:</strong></p>\n\n<p><a href=\"https://blog.daftcode.pl/the-cleaning-hand-of-pytest-28f434f4b684\">The Cleaning Hand of Pytest - My experiences with different approaches to testing</a></p>\n\n<ul>\n<li>by Wiktor \u017burawik</li>\n<li>Two case studies of having to use unittest after using pytest</li>\n<li>Be sure to check out the \u201cuseful links\u201d at the end of the article.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li><a href=\"https://www.pytennessee.org/\">PyTennessee 2018</a></li>\n<li>Movie: All work, all play (available on netflix, here\u2019s the <a href=\"https://www.youtube.com/watch?v=fjoCwM1xMuM\">trailer</a>)</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1: Conference videos for DjangoCon 2017 and PyGotham 2017</strong></p>\n\n<ul>\n<li><a href=\"http://pyvideo.org/events/pygotham-2017.html\">PyGotham 2017 videos on pyvideo</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ujGCN9MOrRk&amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T\">DjangoCon 2017 on YouTube</a></li>\n<li>One I\u2019ve watched so far: \n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=UY2JMZjQspY&amp;index=31&amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T\">DjangoCon US 2017 - Django vs Flask by David &quot;DB&quot; Baumgold</a></li>\n<li><a href=\"http://bit.ly/djangocon-flask\">slides</a></li>\n<li>Very good introduction to Flask while comparing some of the features of Django to Flask and what the current frequent practices are for doing things in Flask like:</li>\n<li>Data modeling with SQLAlchemy, MongoEngine, or Peewee</li>\n<li>User admin with Flask-Security, which wraps Flask-Login, Flask-Permissions, and other commonly used together packages.</li>\n<li>Blueprints in Flask solve a similar problem as apps in Django.</li>\n<li>Flask-Marshmallow for APIs</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2: <a href=\"https://twitter.com/llanga/status/916460954128285696\">Python 3.6.3 released on Tue. All machines at FB are already running it</a> (3 days)</strong></p>\n\n<ul>\n<li>Tweet: Did you hear that 3.6.3 was released on Tue? How about that all machines at FB are already running it? Over 36.3% of our Python apps are 3.6 via <a href=\"https://twitter.com/llanga/status/916460954128285696\">@llanga</a></li>\n<li>See Jason Fried\u2019s presentation on culture: <a href=\"https://www.youtube.com/watch?v=nRtp9NgtXiA\">Rules for Radicals: Changing the Culture of Python at Facebook</a></li>\n<li>More Python 3 news\n<ul>\n<li>Ubuntu 17.10: <em>\u201cPython 2 is no longer installed by default. Python 3 has been updated to 3.6.\u201d</em></li>\n<li>PSA: Python 3.3 is end-of-life in 2 days. Are you prepared?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://codewithoutrules.com/2017/10/23/obsolete-skills/\"><strong>Your technical skills are obsolete: now what?</strong></a></p>\n\n<ul>\n<li>by Itamar Turner-Trauring</li>\n<li>We\u2019re big proponents of keeping your skills current, of learning new techniques and technologies. But how does that fit in with life and work.</li>\n<li>This article is an opinion of how to work on new skills while at work, do it quickly, and look good to your manager.</li>\n<li>It starts with a good discussion of real business reasons why some projects use older technology. Basically, cost vs benefit of change.</li>\n<li>Steps to be part of the solution:\n<ul>\n<li>Identify obsolete and problematic technologies.</li>\n<li>Identify potential replacements.</li>\n<li>Get management buy in to get resources (you) to do a pilot project exploring new technology.</li>\n</ul></li>\n<li>This process will help you be better at identifying problems, even if you don\u2019t get approval to fix it.</li>\n<li>He ends with a comment that if you don\u2019t get approval, all is not lost, you have skills to apply to a new job.</li>\n<li>I\u2019d like to make sue you do a few more steps before giving up and looking for a new job. Before you consider a move to a new team or company, I think\u2026\n<ul>\n<li>You should give your manager the benefit of the doubt and use this to start a conversation. Make sure you understand their reasons for saying no.</li>\n<li>Make sure you are not proposing too much time taken away from your primary role in the company.</li>\n<li>State that you want to improve your skills by providing value for the team and the company. </li>\n<li>Is the \u201cno\u201d due to just bad timing? Is there a higher priority problem to work on? </li>\n<li>You\u2019ve just shown that you are someone interested in keeping your skills sharp and helping the company by expanding your role. If you\u2019re still stuck at this point, then consider a move but also, \u2026</li>\n</ul></li>\n<li>Read this:\n<ul>\n<li><a href=\"http://amzn.to/2xjDBmI\">Team Geek: A Software Developer's Guide to Working Well with Others</a> - Brian Fitzpatrick</li>\n<li>Especially:\n    - pg 117 : \u201cOffensive vs Defensive work\u201d. 50-70% of your time at work needs to be focused on creating new value for your company or your customers. No more than 30-50% on repaying technical debt. (Okken: Limit your process improvement / new technology exploration to no more than 10-20%, but try to never drop it below 5% of your time)\n    - pg 113 : \u201cIt\u2019s easier to ask for forgiveness than permission.\u201d This is a fine line between doing the right thing and doing something you can get reprimanded for. Use good judgement. \n    - Forgotten page number: A big part of your job is making your boss\u2019s job easier and making your boss and your team look good.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/\"><strong>Visualizing Garbage Collection Algorithms</strong></a></p>\n\n<ul>\n<li>By Ken Fox</li>\n<li>Follow up from the excellent deep dive article in GC from Brian</li>\n<li>Most developers take automatic garbage collection for granted.</li>\n<li>It\u2019s very difficult to see how GCs actually work.</li>\n<li><strong>GCs visualized</strong> (click on each image):\n<ul>\n<li><strong>Cleanup At The End: aka No GC</strong> (e.g. Apache web server creates a small pool of memory per request and throws the entire pool away when the request completes)</li>\n<li><strong>Reference Counting Collector</strong> (e.g. Python\u2019s first pass GC, Microsoft COM, C++ Smart Pointers. Memory fragmentation is interesting)\n<ul>\n<li>The red flashes indicate reference counting activity. A very useful property of reference counting is that garbage is detected as soon as possible \u2014 you can sometimes see a flash of red immediately followed by the area turning black.</li>\n</ul></li>\n<li><strong>Mark-Sweep Collector</strong> (e.g. is this Python\u2019s secondary collector? Probably is my guess)\n<ul>\n<li>Mark-sweep eliminates some of the problems of reference count. It can easily handle cyclic structures and it has lower overhead since it doesn\u2019t need to maintain counts.</li>\n</ul></li>\n<li><strong>Mark-Compact Collector</strong> (Oracle\u2019s Hotspot JVM\u2019s tenured object space uses mark-compact)\n<ul>\n<li>Mark-compact disposes of memory, not by just marking it free, but by moving objects down into the free space</li>\n<li>The crazy idea of moving objects means that new objects can always just be created at the end of used memory. This is called a \u201cbump\u201d allocator and is as cheap as stack allocation, but without the limitations of stack size.</li>\n</ul></li>\n<li><strong>Copying Collector, aka Generational GC</strong>\n<ul>\n<li>The foundation of most high-performance garbage collection systems</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://pymotw.com/3/pathlib/\"><strong>pathlib \u2014 Filesystem Paths as Objects</strong></a></p>\n\n<ul>\n<li>from Doug Hellman\u2019s PyMOTW-3</li>\n<li>pathlib was introduced with Python 3.4</li>\n<li>If you need to work with the file system in Python, you should be using pathlib.</li>\n<li>Doug\u2019s article is a really good overview.</li>\n<li>Features\n<ul>\n<li>Building paths with overloaded / operator</li>\n<li>Parsing paths with <code>.parts</code>, <code>.parents</code>, <code>.suffix</code>, <code>.stem</code></li>\n<li>Concrete paths such as <code>Path.home()</code>, <code>Path.cwd()</code></li>\n<li>Getting directory contents with <code>.iterdir()</code></li>\n<li>Pattern matching with <code>.glob()</code> and <code>.rglob()</code></li>\n<li>Reading and writing files with path objects.</li>\n<li>Working with directories and symbolic links</li>\n<li>File properties, permissions</li>\n<li>Deleting files and directories</li>\n</ul></li>\n<li>see also\n<ul>\n<li><a href=\"https://docs.python.org/3/library/pathlib.html\">https://docs.python.org/3/library/pathlib.html</a></li>\n<li>The official docs are pretty good too</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://luminoth.ai/\"><strong>LUMINOTH: Open source Computer Vision toolkit</strong></a></p>\n\n<ul>\n<li>Deep Learning toolkit for Computer Vision</li>\n<li>Supports object detection and image classification, but are aiming for much more.</li>\n<li>It is built in Python, using <a href=\"https://www.tensorflow.org/\">TensorFlow</a> and <a href=\"https://github.com/deepmind/sonnet\">Sonnet</a> (Google\u2019s Deep Learning framework and DeepMind\u2019s graph library)</li>\n<li>Easily train neural networks to detect and classify objects with custom data. </li>\n<li>Use state of the art models such as Faster R-CNN (Region-based Convolutional Neural Networks)</li>\n<li>Comes with GPGPU support</li>\n<li>Simple training\n<ul>\n<li>Train your model by just typing lumi train. Do it locally or using Luminoth's built-in Google Cloud Platform support to train in the cloud.</li>\n<li>Once training is done, you can use our Tensorboard integration to visualize progress and intermediate results. </li>\n</ul></li>\n<li>Are also working on providing <strong>pre-trained checkpoints</strong> on popular datasets such as <a href=\"http://host.robots.ox.ac.uk:8080/pascal/VOC/voc2012/index.html\">Pascal VOC2012</a></li>\n</ul>\n\n<p><strong>Bonus article:</strong></p>\n\n<p><a href=\"https://blog.daftcode.pl/the-cleaning-hand-of-pytest-28f434f4b684\">The Cleaning Hand of Pytest - My experiences with different approaches to testing</a></p>\n\n<ul>\n<li>by Wiktor \u017burawik</li>\n<li>Two case studies of having to use unittest after using pytest</li>\n<li>Be sure to check out the \u201cuseful links\u201d at the end of the article.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li><a href=\"https://www.pytennessee.org/\">PyTennessee 2018</a></li>\n<li>Movie: All work, all play (available on netflix, here\u2019s the <a href=\"https://www.youtube.com/watch?v=fjoCwM1xMuM\">trailer</a>)</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 25 Oct 2017 00:00:00 -0800", "published_parsed": [2017, 10, 25, 8, 0, 0, 2, 298, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Your technical skills are obsolete: now what?", "itunes_episode": "49", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:25:57"}}, "#48 Garbage collection and memory management in Python": {"info": {"title": "#48 Garbage collection and memory management in Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#48 Garbage collection and memory management in Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/48/garbage-collection-and-memory-management-in-python"}, {"length": "14766856", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/48/garbage-collection-and-memory-management-in-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/48/garbage-collection-and-memory-management-in-python", "id": "https://pythonbytes.fm/episodes/d24c4837-23bf-4927-af3a-6abd0632108a", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong>  <a href=\"https://python-graph-gallery.com/\"><strong>The Python Graph Gallery</strong></a></p>\n\n<ul>\n<li>\u201ccool graphs\u201d x \u201chead explodes with options\u201d</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/ticketea/pynesis\"><strong>pynesis</strong></a></p>\n\n<ul>\n<li>High level python library for using kinesis streams</li>\n<li><p>What are Kinesis streams? <a href=\"http://Amazon Kinesis Streams\">AWS Kinesis streams</a></p>\n\n<ul>\n<li>Enables you to build custom applications that process or analyze <a href=\"https://aws.amazon.com/streaming-data/\">streaming data</a> for specialized needs.</li>\n<li>Continuously capture and store terabytes of data per hour from hundreds of thousands of sources such as website clickstreams, financial transactions, social media feeds, IT logs, and location-tracking events.</li>\n</ul></li>\n<li><p>High level kinesis client. Support python 2.7 and 3.6, and has helpers for using it within Django.</p></li>\n<li>Some features:\n<ul>\n<li>Supports python 2 &amp; 3</li>\n<li>Django helpers included</li>\n<li>Automatically detects shard count changes</li>\n<li>Checkpoints/sequences persistence can be customized</li>\n<li>Provided Checkpointer implementations for memory, django model and redis</li>\n<li>Provided Dummy kinesis implementation for development/testing</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong>  <a href=\"https://rushter.com/blog/python-garbage-collector/\"><strong>Things you need to know about garbage collection in Python</strong></a></p>\n\n<p><strong>Michael #4: WSGI Is Not Enough Anymore,</strong> <a href=\"https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-i-bc9713a79841\"><strong>part 1</strong></a> <strong>and</strong> <a href=\"https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-ii-b78b4cfdd09\"><strong>part 2</strong></a></p>\n\n<ul>\n<li>Explores the factors that make WSGI a less attractive option for developing web applications with Python.</li>\n<li>Most major web frameworks use WSGI (Pyramid, Flask, Django, Bottle, etc.)</li>\n<li>This has been a major benefit / breakthrough</li>\n<li>The Web Server Gateway Interface (WSGI) is a <a href=\"https://www.python.org/dev/peps/pep-3333/\">specification</a> which was first developed in 2003, and then revised in 2010, in order to create a standard for Python web frameworks to interact with web servers.</li>\n<li>The bad news is that WSGI comes with two major drawbacks:\n<ul>\n<li>WSGI compatible servers are synchronous</li>\n<li>WSGI compatible servers only supports the HTTP protocol</li>\n</ul></li>\n<li>Problem 1:  Concurrency\n<ul>\n<li>By design, a WSGI server is synchronous. This means it blocks each request until a response arrives from the application.</li>\n<li>Scaling is done necessarily via threads (with GIL limitations), web gardens (multiple processes per server), and web farms (multiple servers)</li>\n</ul></li>\n<li>Problem 2: HTTP is the only protocol\n<ul>\n<li>HTML5 introduced, among other things, web sockets, which create a bi-directional communication layer between servers and clients.</li>\n<li>But they are not supported, so polling (yuck) is the only option</li>\n<li>Python frameworks which rely on WSGI do not implement web socket communication and must rely on 3rd party solutions and extra components and resources.</li>\n</ul></li>\n<li>Part 2 discusses solutions via event driven programming</li>\n<li>Part 3 (pending) talks about libraries for solving the concurrent problem in Python</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"https://dbader.org/blog/queues-in-python\"><strong>Queues in Python</strong></a></p>\n\n<ul>\n<li>Dan Bader</li>\n<li>I was in search of a LIFO queue and ran across this article by Dan.</li>\n<li>For LIFO:</li>\n</ul>\n\n<pre><code>    ### collections.deque as LIFO queue\n    q = collections.deque()\n\n    # insert elements\n    q.appendleft(item)\n\n    #iterate\n    for item in q:\n        print(item)\n\n    ### queue.LifoQueue\n    q = queue.LifoQueue()\n\n    # insert elements\n    q.put(item)\n\n    #iterate\n    while not q.empty():\n        item = q.get()\n        print(item)\n\n    ### list as LIFO queue\n    q = []\n\n    # insert elements\n    q.append(item)\n\n    #iterate\n    for item in q[::-1]:\n        print(item)\n</code></pre>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.podsheets.com/p/using-reflection/#/\"><strong>Using Reflection: A Podcast About Humans Engineering</strong></a></p>\n\n<ul>\n<li>by Mark Weiss</li>\n<li>Check out Jesse Davis\u2019s <a href=\"https://www.podsheets.com/p/using-reflection/#/episode/A.-Jesse-Jiryu-Davis\">episode for a starter</a>.</li>\n<li>Engineering journey, what they value about engineering and skills they have come to recognize in themselves.</li>\n<li>Dig into what makes teams successful, and how we help them succeed.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li>Michael: Free MongoDB course has had over 5,000 signups in the first few days. Check it out <strong><a href=\"http://freemongodbcourse.com\">http://freemongodbcourse.com</a></strong></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong>  <a href=\"https://python-graph-gallery.com/\"><strong>The Python Graph Gallery</strong></a></p>\n\n<ul>\n<li>\u201ccool graphs\u201d x \u201chead explodes with options\u201d</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/ticketea/pynesis\"><strong>pynesis</strong></a></p>\n\n<ul>\n<li>High level python library for using kinesis streams</li>\n<li><p>What are Kinesis streams? <a href=\"http://Amazon Kinesis Streams\">AWS Kinesis streams</a></p>\n\n<ul>\n<li>Enables you to build custom applications that process or analyze <a href=\"https://aws.amazon.com/streaming-data/\">streaming data</a> for specialized needs.</li>\n<li>Continuously capture and store terabytes of data per hour from hundreds of thousands of sources such as website clickstreams, financial transactions, social media feeds, IT logs, and location-tracking events.</li>\n</ul></li>\n<li><p>High level kinesis client. Support python 2.7 and 3.6, and has helpers for using it within Django.</p></li>\n<li>Some features:\n<ul>\n<li>Supports python 2 &amp; 3</li>\n<li>Django helpers included</li>\n<li>Automatically detects shard count changes</li>\n<li>Checkpoints/sequences persistence can be customized</li>\n<li>Provided Checkpointer implementations for memory, django model and redis</li>\n<li>Provided Dummy kinesis implementation for development/testing</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong>  <a href=\"https://rushter.com/blog/python-garbage-collector/\"><strong>Things you need to know about garbage collection in Python</strong></a></p>\n\n<p><strong>Michael #4: WSGI Is Not Enough Anymore,</strong> <a href=\"https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-i-bc9713a79841\"><strong>part 1</strong></a> <strong>and</strong> <a href=\"https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-ii-b78b4cfdd09\"><strong>part 2</strong></a></p>\n\n<ul>\n<li>Explores the factors that make WSGI a less attractive option for developing web applications with Python.</li>\n<li>Most major web frameworks use WSGI (Pyramid, Flask, Django, Bottle, etc.)</li>\n<li>This has been a major benefit / breakthrough</li>\n<li>The Web Server Gateway Interface (WSGI) is a <a href=\"https://www.python.org/dev/peps/pep-3333/\">specification</a> which was first developed in 2003, and then revised in 2010, in order to create a standard for Python web frameworks to interact with web servers.</li>\n<li>The bad news is that WSGI comes with two major drawbacks:\n<ul>\n<li>WSGI compatible servers are synchronous</li>\n<li>WSGI compatible servers only supports the HTTP protocol</li>\n</ul></li>\n<li>Problem 1:  Concurrency\n<ul>\n<li>By design, a WSGI server is synchronous. This means it blocks each request until a response arrives from the application.</li>\n<li>Scaling is done necessarily via threads (with GIL limitations), web gardens (multiple processes per server), and web farms (multiple servers)</li>\n</ul></li>\n<li>Problem 2: HTTP is the only protocol\n<ul>\n<li>HTML5 introduced, among other things, web sockets, which create a bi-directional communication layer between servers and clients.</li>\n<li>But they are not supported, so polling (yuck) is the only option</li>\n<li>Python frameworks which rely on WSGI do not implement web socket communication and must rely on 3rd party solutions and extra components and resources.</li>\n</ul></li>\n<li>Part 2 discusses solutions via event driven programming</li>\n<li>Part 3 (pending) talks about libraries for solving the concurrent problem in Python</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"https://dbader.org/blog/queues-in-python\"><strong>Queues in Python</strong></a></p>\n\n<ul>\n<li>Dan Bader</li>\n<li>I was in search of a LIFO queue and ran across this article by Dan.</li>\n<li>For LIFO:</li>\n</ul>\n\n<pre><code>    ### collections.deque as LIFO queue\n    q = collections.deque()\n\n    # insert elements\n    q.appendleft(item)\n\n    #iterate\n    for item in q:\n        print(item)\n\n    ### queue.LifoQueue\n    q = queue.LifoQueue()\n\n    # insert elements\n    q.put(item)\n\n    #iterate\n    while not q.empty():\n        item = q.get()\n        print(item)\n\n    ### list as LIFO queue\n    q = []\n\n    # insert elements\n    q.append(item)\n\n    #iterate\n    for item in q[::-1]:\n        print(item)\n</code></pre>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.podsheets.com/p/using-reflection/#/\"><strong>Using Reflection: A Podcast About Humans Engineering</strong></a></p>\n\n<ul>\n<li>by Mark Weiss</li>\n<li>Check out Jesse Davis\u2019s <a href=\"https://www.podsheets.com/p/using-reflection/#/episode/A.-Jesse-Jiryu-Davis\">episode for a starter</a>.</li>\n<li>Engineering journey, what they value about engineering and skills they have come to recognize in themselves.</li>\n<li>Dig into what makes teams successful, and how we help them succeed.</li>\n</ul>\n\n<h2>Our news</h2>\n\n<ul>\n<li>Michael: Free MongoDB course has had over 5,000 signups in the first few days. Check it out <strong><a href=\"http://freemongodbcourse.com\">http://freemongodbcourse.com</a></strong></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 19 Oct 2017 00:00:00 -0800", "published_parsed": [2017, 10, 19, 8, 0, 0, 3, 292, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Garbage collection and memory management in Python", "itunes_episode": "48", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:17:50"}}, "#47 PyPy now works with way more C-extensions and parking your package safely": {"info": {"title": "#47 PyPy now works with way more C-extensions and parking your package safely", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#47 PyPy now works with way more C-extensions and parking your package safely"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely"}, {"length": "14913279", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely", "id": "https://pythonbytes.fm/episodes/1f5d6bdd-658f-480b-8b3d-6977e8935063", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1</strong>: <a href=\"https://morepypy.blogspot.com/2017/10/pypy-v59-released-now-supports-pandas.html\"><strong>PyPy v5.9 Released, Now Supports Pandas, NumPy</strong></a></p>\n\n<ul>\n<li>NumPy and Pandas work on PyPy2.7 v5.9</li>\n<li>Cython 0.27.1 (released very recently) supports more projects with PyPy, both on PyPy2.7 and PyPy3.5 beta</li>\n<li>Optimized JSON parser for both memory and speed.</li>\n<li>CFFI updated</li>\n<li>Nice to see continued improvements and work on PyPy</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md\"><strong>WTF Python?</strong></a></p>\n\n<ul>\n<li>Python, being awesome by design high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. </li>\n<li>But sometimes, the outcomes of a Python snippet may not seem obvious to a regular user at first sight.</li>\n<li>Here is a fun project attempting to collect such classic and tricky examples of unexpected behaviors in Python and discuss what exactly is happening under the hood!</li>\n<li>Examples:\n<ul>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#skipping-lines\"><strong>Skipping lines?</strong></a></li>\n<li><strong>\u200b\u200b</strong><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#modifying-a-dictionary-while-iterating-over-it\"><strong>Modifying a dictionary while iterating over it</strong></a></li>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#backslashes-at-the-end-of-string\"><strong>Backslashes at the end of string</strong></a></li>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#is-is-not-what-it-is\"><strong>is is not what it is!</strong></a></li>\n</ul></li>\n<li>I\u2019m thinking of doing some fun follow on projects with this. More on that later.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.ynonperek.com/2017/09/21/python-exercises/amp/\"><strong>Python Exercises</strong></a></p>\n\n<ul>\n<li>\u201c\u2026 focus on the language itself and the standard library.\u201d</li>\n<li>Some non-obvious Python exercises to help hone your Python skills, and possibly use in coding exercises of a job interview or maybe pre-interview screen.</li>\n<li>Topics\n<ul>\n<li>Basic syntax</li>\n<li>Text Processing</li>\n<li>OS Integration</li>\n<li>Functions</li>\n<li>Decorators &amp; Generators</li>\n<li>Classes, Modules, </li>\n<li>Exceptions, Lists, Dictionaries, Multiprocessing</li>\n<li>&amp; Testing! always including testing when ~~interviewing someone~~ practicing your coding.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.nelhage.com/2011/03/exploiting-pickle/\"><strong>Exploiting misuse of Python's &quot;pickle&quot;</strong></a></p>\n\n<ul>\n<li>If you program in Python, you\u2019re probably familiar with the pickle serialization library, which provides for efficient binary serialization and loading of Python datatypes.</li>\n<li>Hopefully, you\u2019re also familiar with the warning printed prominently near the start of pickle\u2019s documentation:</li>\n</ul>\n\n<p><em>Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</em></p>\n\n<ul>\n<li>this blog post will describe exactly how trivial it is to exploit such a service, using a simplified version of the code I recently encountered as an example. </li>\n<li>Executing Code: So, what can we do with a vulnerable service? Well, pickle is supposed to allow us to represent arbitrary objects. An obvious target is Python\u2019s <code>subprocess.Popen</code> objects!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/\"><strong>A Complete Beginner's Guide to Django</strong></a></p>\n\n<ul>\n<li>Lots of Django tutorials already, but this may appeal to folks with a more academic bent.</li>\n<li>Complete with wireframes, UML class hierarchies and use case diagrams.</li>\n<li>Series with 6 parts done, a 7th part planned, which will be the last part.</li>\n<li>Some fun comic like drawings, and lots of screenshots.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/mattsb42/pypi-parker\"><strong>pypi-parker</strong></a></p>\n\n<ul>\n<li>Helper tooling for parking PyPI namespaces to combat typosquatting.</li>\n<li>pypi-parker lets you easily park package names on PyPI to protect users of your packages from typosquatting.</li>\n<li>Typosquatting is a problem: in general, but also on PyPI. </li>\n<li>There are efforts being taken by pypa to protect core library names, but this does not (and really cannot and probably should not attempt to) help individual package owners.</li>\n<li>For example, <code>reqeusts</code> rather than <code>requests</code>, or <code>crytpography</code> rather than <code>cryptography</code>.</li>\n<li>Why? Self-serve is a good thing. Let's not try and get rid of that. Work with it instead.</li>\n<li>What? pypi-parker provides a custom distutils command park that interprets a provided config file to generate empty Python package source distributables. These packages will always throw an ImportError when someone tries to install them. You can customize the ImportError message to help guide users to the correct package.</li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael: </p>\n\n<ul>\n<li>Just launched <a href=\"http://freemongodbcourse.com\"><strong>freemongodbcourse.com</strong></a> Come and sign up to learn MongoDB and some Python</li>\n<li><a href=\"https://twitter.com/dstufft/status/917703274966536192?t=1&amp;cn=ZmxleGlibGVfcmVjc18y&amp;refsrc=email&amp;iid=94524f9448ff4f01905c15700bf2cc1c&amp;uid=3098427092&amp;nid=244+272699400\"><strong>Python3 usage has doubled in the past year</strong></a> (thanks Donald Stufft)</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1</strong>: <a href=\"https://morepypy.blogspot.com/2017/10/pypy-v59-released-now-supports-pandas.html\"><strong>PyPy v5.9 Released, Now Supports Pandas, NumPy</strong></a></p>\n\n<ul>\n<li>NumPy and Pandas work on PyPy2.7 v5.9</li>\n<li>Cython 0.27.1 (released very recently) supports more projects with PyPy, both on PyPy2.7 and PyPy3.5 beta</li>\n<li>Optimized JSON parser for both memory and speed.</li>\n<li>CFFI updated</li>\n<li>Nice to see continued improvements and work on PyPy</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md\"><strong>WTF Python?</strong></a></p>\n\n<ul>\n<li>Python, being awesome by design high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. </li>\n<li>But sometimes, the outcomes of a Python snippet may not seem obvious to a regular user at first sight.</li>\n<li>Here is a fun project attempting to collect such classic and tricky examples of unexpected behaviors in Python and discuss what exactly is happening under the hood!</li>\n<li>Examples:\n<ul>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#skipping-lines\"><strong>Skipping lines?</strong></a></li>\n<li><strong>\u200b\u200b</strong><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#modifying-a-dictionary-while-iterating-over-it\"><strong>Modifying a dictionary while iterating over it</strong></a></li>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#backslashes-at-the-end-of-string\"><strong>Backslashes at the end of string</strong></a></li>\n<li><a href=\"https://github.com/satwikkansal/wtfpython/blob/master/README.md#is-is-not-what-it-is\"><strong>is is not what it is!</strong></a></li>\n</ul></li>\n<li>I\u2019m thinking of doing some fun follow on projects with this. More on that later.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.ynonperek.com/2017/09/21/python-exercises/amp/\"><strong>Python Exercises</strong></a></p>\n\n<ul>\n<li>\u201c\u2026 focus on the language itself and the standard library.\u201d</li>\n<li>Some non-obvious Python exercises to help hone your Python skills, and possibly use in coding exercises of a job interview or maybe pre-interview screen.</li>\n<li>Topics\n<ul>\n<li>Basic syntax</li>\n<li>Text Processing</li>\n<li>OS Integration</li>\n<li>Functions</li>\n<li>Decorators &amp; Generators</li>\n<li>Classes, Modules, </li>\n<li>Exceptions, Lists, Dictionaries, Multiprocessing</li>\n<li>&amp; Testing! always including testing when ~~interviewing someone~~ practicing your coding.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.nelhage.com/2011/03/exploiting-pickle/\"><strong>Exploiting misuse of Python's &quot;pickle&quot;</strong></a></p>\n\n<ul>\n<li>If you program in Python, you\u2019re probably familiar with the pickle serialization library, which provides for efficient binary serialization and loading of Python datatypes.</li>\n<li>Hopefully, you\u2019re also familiar with the warning printed prominently near the start of pickle\u2019s documentation:</li>\n</ul>\n\n<p><em>Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</em></p>\n\n<ul>\n<li>this blog post will describe exactly how trivial it is to exploit such a service, using a simplified version of the code I recently encountered as an example. </li>\n<li>Executing Code: So, what can we do with a vulnerable service? Well, pickle is supposed to allow us to represent arbitrary objects. An obvious target is Python\u2019s <code>subprocess.Popen</code> objects!</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/\"><strong>A Complete Beginner's Guide to Django</strong></a></p>\n\n<ul>\n<li>Lots of Django tutorials already, but this may appeal to folks with a more academic bent.</li>\n<li>Complete with wireframes, UML class hierarchies and use case diagrams.</li>\n<li>Series with 6 parts done, a 7th part planned, which will be the last part.</li>\n<li>Some fun comic like drawings, and lots of screenshots.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/mattsb42/pypi-parker\"><strong>pypi-parker</strong></a></p>\n\n<ul>\n<li>Helper tooling for parking PyPI namespaces to combat typosquatting.</li>\n<li>pypi-parker lets you easily park package names on PyPI to protect users of your packages from typosquatting.</li>\n<li>Typosquatting is a problem: in general, but also on PyPI. </li>\n<li>There are efforts being taken by pypa to protect core library names, but this does not (and really cannot and probably should not attempt to) help individual package owners.</li>\n<li>For example, <code>reqeusts</code> rather than <code>requests</code>, or <code>crytpography</code> rather than <code>cryptography</code>.</li>\n<li>Why? Self-serve is a good thing. Let's not try and get rid of that. Work with it instead.</li>\n<li>What? pypi-parker provides a custom distutils command park that interprets a provided config file to generate empty Python package source distributables. These packages will always throw an ImportError when someone tries to install them. You can customize the ImportError message to help guide users to the correct package.</li>\n</ul>\n\n<p>Our news</p>\n\n<p>Michael: </p>\n\n<ul>\n<li>Just launched <a href=\"http://freemongodbcourse.com\"><strong>freemongodbcourse.com</strong></a> Come and sign up to learn MongoDB and some Python</li>\n<li><a href=\"https://twitter.com/dstufft/status/917703274966536192?t=1&amp;cn=ZmxleGlibGVfcmVjc18y&amp;refsrc=email&amp;iid=94524f9448ff4f01905c15700bf2cc1c&amp;uid=3098427092&amp;nid=244+272699400\"><strong>Python3 usage has doubled in the past year</strong></a> (thanks Donald Stufft)</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 12 Oct 2017 00:00:00 -0800", "published_parsed": [2017, 10, 12, 8, 0, 0, 3, 285, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "PyPy now works with way more C-extensions and parking your package safely", "itunes_episode": "47", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:16:44"}}, "#46 Spicy lecture notes and unicorn console spinners": {"info": {"title": "#46 Spicy lecture notes and unicorn console spinners", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#46 Spicy lecture notes and unicorn console spinners"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/46/spicy-lecture-notes-and-unicorn-console-spinners"}, {"length": "14706542", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/46/spicy-lecture-notes-and-unicorn-console-spinners.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/46/spicy-lecture-notes-and-unicorn-console-spinners", "id": "https://pythonbytes.fm/episodes/f792f14f-7fda-4957-adcd-40e6d9578202", "guidislink": false, "summary": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://www.scipy-lectures.org/\"><strong>Scipy lecture notes</strong></a></p>\n\n<ul>\n<li>\u201cOne document to learn numerics, science, and data with Python\u201d</li>\n<li>Topics\n<ul>\n<li>Python language tutorial</li>\n<li>NumPy, Matplotlib, scipy</li>\n<li>Debugging, optimizing, image manipulation</li>\n<li>Statistics, scikit-image, scikit learn</li>\n<li>3D plotting</li>\n</ul></li>\n<li>Nice table of contents layout that makes it easy to jump right to whatever you need to learn.</li>\n<li>Just in time learning for scientific Python.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.codementor.io/dushyantbgs/building-a-desktop-notification-tool-using-python-bcpya9cwh\"><strong>Building a desktop notification tool for Linux using python</strong></a></p>\n\n<ul>\n<li>The term desktop notifications refer to a graphical control element that communicates certain events to the user without forcing them to react to this notification immediately.</li>\n<li>Example: we are going to build a notification tool which displays the current rate of bitcoins in INR.</li>\n<li>Based on <a href=\"https://notify2.readthedocs.io/en/latest/\">notify2</a> package</li>\n</ul>\n\n<p><strong>Brian #3<em>*</strong>:</em>* <a href=\"https://pypi.python.org/pypi/pytest-benchmark\"><strong>pytest-benchmark</strong></a></p>\n\n<ul>\n<li>Easily wrap some time constraints around some code to make sure certain parts of your system don\u2019t slow down.</li>\n<li>Good table or graph based preliminary times with statistics</li>\n<li>Can generate golden sets of numbers, then compare against those and fail based on changes in particular stats like min, mean, etc.</li>\n<li>Can have max and min times for benchmarks even without previous training.</li>\n<li>Lots of fun flags and utilities.</li>\n<li>good integration with pytest</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://veekaybee.github.io/2017/09/26/python-packaging/\"><strong>Alice in Python projectland</strong></a></p>\n\n<ul>\n<li>via Vicki Boykis</li>\n<li>Python project structure and packaging standardization is still not a solved problem</li>\n<li>In the JVM, as long as you have your path structured correctly, build tools will understand it and create a package for you into an executable JAR.</li>\n<li>But, when I started looking for the same standardization in Python, it wasn\u2019t as straightforward. Some questions I had as I worked: \n<ul>\n<li>Should I be using virtualenvs? </li>\n<li>Pipenvs? </li>\n<li>Setuptools? </li>\n<li>Should I have a setup.cfg? </li>\n<li>What are wheels, or eggs, for that matter? </li>\n<li>Does each folder need an __init__.py? </li>\n<li>What does that file even do? </li>\n<li>How do I reference modules along the same PYTHONPATH?</li>\n</ul></li>\n<li>Hat tip to <a href=\"https://github.com/bndr/pipreqs\">pipreqs</a></li>\n<li>Conclusion: Python project structure and packaging can be intimidating, but, if you take it step by step, it doesn\u2019t have to be.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://jvns.ca/teach-tech-with-cartoons/\"><strong>How to teach technical concepts with cartoons</strong></a></p>\n\n<ul>\n<li>Just draw more pictures.</li>\n<li>You don\u2019t have to be a good artist for drawings to help with retention when you are trying to teach technical concepts.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/ManrajGrover/halo\"><strong>Halo: Beautiful terminal spinners in Python</strong></a></p>\n\n<ul>\n<li>We\u2019ve talk about progressbars: tqdm: https://github.com/tqdm/tqdm</li>\n<li>doesn\u2019t have to be.</li>\n<li>Cool methods like</li>\n<li><code>spinner.start([text])</code></li>\n<li><code>spinner.succeed([text])</code></li>\n<li><code>spinner.fail([text])</code></li>\n<li>Windows File Progress Dialog Author: https://xkcd.com/612/</li>\n</ul>\n\n<h2>Extras</h2>\n\n<ul>\n<li>releases: stay current. go upgrade\n<ul>\n<li><a href=\"https://www.python.org/downloads/release/python-363/\">Python 3.6.3 released</a></li>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.2.3 released</a></li>\n</ul></li>\n<li>New Test &amp; Code episodes \n<ul>\n<li><a href=\"http://testandcode.com/31\">31: I'm so sick of the testing pyramid</a></li>\n<li><a href=\"http://testandcode.com/32\">32: David Hussman - Agile vs Agility, Dude's Law, and more</a></li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to <a href=\"https://do.co/python\"><strong>do.co/python</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://www.scipy-lectures.org/\"><strong>Scipy lecture notes</strong></a></p>\n\n<ul>\n<li>\u201cOne document to learn numerics, science, and data with Python\u201d</li>\n<li>Topics\n<ul>\n<li>Python language tutorial</li>\n<li>NumPy, Matplotlib, scipy</li>\n<li>Debugging, optimizing, image manipulation</li>\n<li>Statistics, scikit-image, scikit learn</li>\n<li>3D plotting</li>\n</ul></li>\n<li>Nice table of contents layout that makes it easy to jump right to whatever you need to learn.</li>\n<li>Just in time learning for scientific Python.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.codementor.io/dushyantbgs/building-a-desktop-notification-tool-using-python-bcpya9cwh\"><strong>Building a desktop notification tool for Linux using python</strong></a></p>\n\n<ul>\n<li>The term desktop notifications refer to a graphical control element that communicates certain events to the user without forcing them to react to this notification immediately.</li>\n<li>Example: we are going to build a notification tool which displays the current rate of bitcoins in INR.</li>\n<li>Based on <a href=\"https://notify2.readthedocs.io/en/latest/\">notify2</a> package</li>\n</ul>\n\n<p><strong>Brian #3<em>*</strong>:</em>* <a href=\"https://pypi.python.org/pypi/pytest-benchmark\"><strong>pytest-benchmark</strong></a></p>\n\n<ul>\n<li>Easily wrap some time constraints around some code to make sure certain parts of your system don\u2019t slow down.</li>\n<li>Good table or graph based preliminary times with statistics</li>\n<li>Can generate golden sets of numbers, then compare against those and fail based on changes in particular stats like min, mean, etc.</li>\n<li>Can have max and min times for benchmarks even without previous training.</li>\n<li>Lots of fun flags and utilities.</li>\n<li>good integration with pytest</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://veekaybee.github.io/2017/09/26/python-packaging/\"><strong>Alice in Python projectland</strong></a></p>\n\n<ul>\n<li>via Vicki Boykis</li>\n<li>Python project structure and packaging standardization is still not a solved problem</li>\n<li>In the JVM, as long as you have your path structured correctly, build tools will understand it and create a package for you into an executable JAR.</li>\n<li>But, when I started looking for the same standardization in Python, it wasn\u2019t as straightforward. Some questions I had as I worked: \n<ul>\n<li>Should I be using virtualenvs? </li>\n<li>Pipenvs? </li>\n<li>Setuptools? </li>\n<li>Should I have a setup.cfg? </li>\n<li>What are wheels, or eggs, for that matter? </li>\n<li>Does each folder need an __init__.py? </li>\n<li>What does that file even do? </li>\n<li>How do I reference modules along the same PYTHONPATH?</li>\n</ul></li>\n<li>Hat tip to <a href=\"https://github.com/bndr/pipreqs\">pipreqs</a></li>\n<li>Conclusion: Python project structure and packaging can be intimidating, but, if you take it step by step, it doesn\u2019t have to be.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://jvns.ca/teach-tech-with-cartoons/\"><strong>How to teach technical concepts with cartoons</strong></a></p>\n\n<ul>\n<li>Just draw more pictures.</li>\n<li>You don\u2019t have to be a good artist for drawings to help with retention when you are trying to teach technical concepts.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/ManrajGrover/halo\"><strong>Halo: Beautiful terminal spinners in Python</strong></a></p>\n\n<ul>\n<li>We\u2019ve talk about progressbars: tqdm: https://github.com/tqdm/tqdm</li>\n<li>doesn\u2019t have to be.</li>\n<li>Cool methods like</li>\n<li><code>spinner.start([text])</code></li>\n<li><code>spinner.succeed([text])</code></li>\n<li><code>spinner.fail([text])</code></li>\n<li>Windows File Progress Dialog Author: https://xkcd.com/612/</li>\n</ul>\n\n<h2>Extras</h2>\n\n<ul>\n<li>releases: stay current. go upgrade\n<ul>\n<li><a href=\"https://www.python.org/downloads/release/python-363/\">Python 3.6.3 released</a></li>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.2.3 released</a></li>\n</ul></li>\n<li>New Test &amp; Code episodes \n<ul>\n<li><a href=\"http://testandcode.com/31\">31: I'm so sick of the testing pyramid</a></li>\n<li><a href=\"http://testandcode.com/32\">32: David Hussman - Agile vs Agility, Dude's Law, and more</a></li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 05 Oct 2017 00:00:00 -0800", "published_parsed": [2017, 10, 5, 8, 0, 0, 3, 278, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Spicy lecture notes and unicorn console spinners", "itunes_episode": "46", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:16:51"}}, "#45 A really small web API and OS-level machine learning": {"info": {"title": "#45 A really small web API and OS-level machine learning", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#45 A really small web API and OS-level machine learning"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/45/a-really-small-web-api-and-os-level-machine-learning"}, {"length": "15354788", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/45/a-really-small-web-api-and-os-level-machine-learning.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/45/a-really-small-web-api-and-os-level-machine-learning", "id": "https://pythonbytes.fm/episodes/9a901b6c-5407-4fdd-953b-aca32d9b5c67", "guidislink": false, "summary": "<p>This episode is brought to you by Rollbar: <a href=\"http://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pico.readthedocs.io/\"><strong>pico</strong></a> </p>\n\n<ul>\n<li>\"a very small web application framework for Python\" </li>\n<li>Recommended by Ivan Peji\u0107</li>\n<li><a href=\"https://www.youtube.com/watch?v=wyhAzM6TIrw&amp;feature=youtu.be&amp;t=5h54m44s\">lightning talk from EuroPython 2017</a></li>\n<li>This would be a good web framework for building internal services and tools that non-web developers need to interact with and modify.</li>\n<li>Very simple.</li>\n<li>Not REST, but not confusing either.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/8/#h5\"><strong>High Sierra ships, first major OS with machine learning built in?</strong></a></p>\n\n<ul>\n<li>September 26th <a href=\"https://www.apple.com/macos/high-sierra/\"><strong>macOS High Sierra</strong></a> was released (yay)</li>\n<li>Mostly a foundational release with barely visible changes but awesome things like APFS replacing HFS+, etc.</li>\n<li>Comes with <strong>CoreML</strong>\n<ul>\n<li>Apple\u2019s intent with the new CoreML framework is to package up prebuilt ML models and execution engines and make them possible for third-party apps to use. </li>\n<li>Developers can take a trained machine learning algorithm, package it up as an MLModel, and integrate it into their apps. </li>\n<li>Apple offers a few default machine learning models that developers can download and use too</li>\n</ul></li>\n<li>Rather than sharing your data with a central server, grouping it together with a lot of other people's data, and improving machine learning models that way, Apple stresses that everything CoreML does is happening on the device.</li>\n<li>On Macs that support Metal\u2014generally, Macs from 2012 and later\u2014CoreML uses a mix of CPU processing and GPGPU processing, depending on the task.</li>\n<li>Add on the fact that High Sierra has <a href=\"https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/7/#h2\"><strong>external GPU support</strong></a> now and you have a sweet combo.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://opensource.com/article/17/9/python-logging\"><strong>A guide to logging in Python</strong></a></p>\n\n<ul>\n<li>Simply put, the best logging introduction I've read so far.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.chrisbarra.xyz/posts/let-me-introduce-slots/\"><strong>Let me introduce: slots</strong></a></p>\n\n<ul>\n<li>So what are slots? __slots__ are a different way to define the attributes storage for classes in Python.</li>\n<li>for normal Python classes, a dict is used to store the instance's attributes.</li>\n<li>With <code>__slots__</code> we don't have an attribute called <code>__dict__</code> inside our instance. But we have a new attribute called <code>__slots__</code>.</li>\n<li>But why would you need to use slots when you have a dict? Well the answer is that __slots__ are a lot lighter and slightly faster.</li>\n<li>Outcome:\n<ul>\n<li>~57% less memory usage thanks to just one line of code.</li>\n<li>__slots__ are also slightly faster.</li>\n</ul></li>\n<li>Covered in depth in my <a href=\"https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer\">Write Pythonic Code Like a Seasoned Developer</a> course.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://docs.pipenv.org/\"><strong>pipenv revisited</strong></a></p>\n\n<ul>\n<li>Covered in <a href=\"https://pythonbytes.fm/\">episode 11</a>. However, there are some notable changes since then.</li>\n<li>Reminder:\n<ul>\n<li><code>pepenv</code> handles virtualenv and pip interaction for you</li>\n<li><code>pipenv install</code> creates a virtualenv (if one doesn't exist) and installs stuff into a virtualenv.</li>\n<li><code>pipenv shell</code> uses the virtualenv</li>\n<li><code>exit</code> allows you to get out of the virtualenv</li>\n<li><code>pipenv lock -r</code> will generate a requirements.txt file for you, so you can use it even if you need a requirements.txt file.</li>\n</ul></li>\n<li>Notable changes:\n<ul>\n<li>New <a href=\"https://vimeo.com/233134524\">4 minute screencast</a> with Kenneth demonstrating how to use it. Watching him use it makes it very simple to understand. </li>\n<li>Specify multiple package indexes, and even specify a particular index for particular packages. So you can combine both pypi with a company index and a group index and maybe one for your project.</li>\n<li>pipenv check will tell you about any known security vulnerabilities in your installed packages</li>\n<li>9 months old with 192 releases, so keep an eye on it for new features all the time.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/\"><strong>Stack Overflow gives an even closer look at developer salaries</strong></a></p>\n\n<ul>\n<li>Tabs and spaces aren't the only things that influence developer pay\u2026</li>\n<li>Some of the broad trends are no big surprise; for example, the chosen cities tend to pay more than their respective nations do, for example.</li>\n<li>DevOps specialists and data scientists both earn well. </li>\n<li>Other aspects of the data are a little more surprising. Graphics programmers, for example, aren't particularly well paid, in spite of having a relatively specialized, complex niche.</li>\n<li>And while earnings in four of the countries are surprisingly similar, those in America are substantially higher, regardless of experience; in fact, the median salary of a developer in the US is comparable to that of someone with 20 years of experience in Canada or Germany and markedly higher than 20-year veterans in France and the UK. Even after taking into account the US' higher healthcare costs, America is the place to be if you're a programmer.</li>\n<li>Comments\n<ul>\n<li>I do have to wonder how much Silicon Valley skews that salary chart, as the Web 2.0 companies pay HUGE comparatively [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009615\">ref</a>]</li>\n<li>I asked Stack Overflow's data scientist that question, and she said not much; even without its outlier cities, the US pays much more than the rest of the world. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009667\">ref</a>]</li>\n<li>Healthcare cost are only part of it. I got paid about $600/month 9 months a year by my government to study in university. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009803\">ref</a>]</li>\n<li>I feel like a lot of IT people lack soft skills, and it caps their salary at a lower end. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009925\">ref</a>]</li>\n</ul></li>\n</ul>\n\n<p>Our news:</p>\n\n<ul>\n<li>Hardcopies of <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> now <a href=\"http://amzn.to/2fUZJxi\">shipping on Amazon</a>, as well as <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Pragmatic</a>.\n<ul>\n<li>When you get your copy, let me know. Send a pic to <a href=\"https://twitter.com/brianokken\">@brianokken</a></li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This episode is brought to you by Rollbar: <a href=\"http://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://pico.readthedocs.io/\"><strong>pico</strong></a> </p>\n\n<ul>\n<li>\"a very small web application framework for Python\" </li>\n<li>Recommended by Ivan Peji\u0107</li>\n<li><a href=\"https://www.youtube.com/watch?v=wyhAzM6TIrw&amp;feature=youtu.be&amp;t=5h54m44s\">lightning talk from EuroPython 2017</a></li>\n<li>This would be a good web framework for building internal services and tools that non-web developers need to interact with and modify.</li>\n<li>Very simple.</li>\n<li>Not REST, but not confusing either.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/8/#h5\"><strong>High Sierra ships, first major OS with machine learning built in?</strong></a></p>\n\n<ul>\n<li>September 26th <a href=\"https://www.apple.com/macos/high-sierra/\"><strong>macOS High Sierra</strong></a> was released (yay)</li>\n<li>Mostly a foundational release with barely visible changes but awesome things like APFS replacing HFS+, etc.</li>\n<li>Comes with <strong>CoreML</strong>\n<ul>\n<li>Apple\u2019s intent with the new CoreML framework is to package up prebuilt ML models and execution engines and make them possible for third-party apps to use. </li>\n<li>Developers can take a trained machine learning algorithm, package it up as an MLModel, and integrate it into their apps. </li>\n<li>Apple offers a few default machine learning models that developers can download and use too</li>\n</ul></li>\n<li>Rather than sharing your data with a central server, grouping it together with a lot of other people's data, and improving machine learning models that way, Apple stresses that everything CoreML does is happening on the device.</li>\n<li>On Macs that support Metal\u2014generally, Macs from 2012 and later\u2014CoreML uses a mix of CPU processing and GPGPU processing, depending on the task.</li>\n<li>Add on the fact that High Sierra has <a href=\"https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/7/#h2\"><strong>external GPU support</strong></a> now and you have a sweet combo.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://opensource.com/article/17/9/python-logging\"><strong>A guide to logging in Python</strong></a></p>\n\n<ul>\n<li>Simply put, the best logging introduction I've read so far.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.chrisbarra.xyz/posts/let-me-introduce-slots/\"><strong>Let me introduce: slots</strong></a></p>\n\n<ul>\n<li>So what are slots? __slots__ are a different way to define the attributes storage for classes in Python.</li>\n<li>for normal Python classes, a dict is used to store the instance's attributes.</li>\n<li>With <code>__slots__</code> we don't have an attribute called <code>__dict__</code> inside our instance. But we have a new attribute called <code>__slots__</code>.</li>\n<li>But why would you need to use slots when you have a dict? Well the answer is that __slots__ are a lot lighter and slightly faster.</li>\n<li>Outcome:\n<ul>\n<li>~57% less memory usage thanks to just one line of code.</li>\n<li>__slots__ are also slightly faster.</li>\n</ul></li>\n<li>Covered in depth in my <a href=\"https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer\">Write Pythonic Code Like a Seasoned Developer</a> course.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://docs.pipenv.org/\"><strong>pipenv revisited</strong></a></p>\n\n<ul>\n<li>Covered in <a href=\"https://pythonbytes.fm/\">episode 11</a>. However, there are some notable changes since then.</li>\n<li>Reminder:\n<ul>\n<li><code>pepenv</code> handles virtualenv and pip interaction for you</li>\n<li><code>pipenv install</code> creates a virtualenv (if one doesn't exist) and installs stuff into a virtualenv.</li>\n<li><code>pipenv shell</code> uses the virtualenv</li>\n<li><code>exit</code> allows you to get out of the virtualenv</li>\n<li><code>pipenv lock -r</code> will generate a requirements.txt file for you, so you can use it even if you need a requirements.txt file.</li>\n</ul></li>\n<li>Notable changes:\n<ul>\n<li>New <a href=\"https://vimeo.com/233134524\">4 minute screencast</a> with Kenneth demonstrating how to use it. Watching him use it makes it very simple to understand. </li>\n<li>Specify multiple package indexes, and even specify a particular index for particular packages. So you can combine both pypi with a company index and a group index and maybe one for your project.</li>\n<li>pipenv check will tell you about any known security vulnerabilities in your installed packages</li>\n<li>9 months old with 192 releases, so keep an eye on it for new features all the time.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/\"><strong>Stack Overflow gives an even closer look at developer salaries</strong></a></p>\n\n<ul>\n<li>Tabs and spaces aren't the only things that influence developer pay\u2026</li>\n<li>Some of the broad trends are no big surprise; for example, the chosen cities tend to pay more than their respective nations do, for example.</li>\n<li>DevOps specialists and data scientists both earn well. </li>\n<li>Other aspects of the data are a little more surprising. Graphics programmers, for example, aren't particularly well paid, in spite of having a relatively specialized, complex niche.</li>\n<li>And while earnings in four of the countries are surprisingly similar, those in America are substantially higher, regardless of experience; in fact, the median salary of a developer in the US is comparable to that of someone with 20 years of experience in Canada or Germany and markedly higher than 20-year veterans in France and the UK. Even after taking into account the US' higher healthcare costs, America is the place to be if you're a programmer.</li>\n<li>Comments\n<ul>\n<li>I do have to wonder how much Silicon Valley skews that salary chart, as the Web 2.0 companies pay HUGE comparatively [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009615\">ref</a>]</li>\n<li>I asked Stack Overflow's data scientist that question, and she said not much; even without its outlier cities, the US pays much more than the rest of the world. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009667\">ref</a>]</li>\n<li>Healthcare cost are only part of it. I got paid about $600/month 9 months a year by my government to study in university. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009803\">ref</a>]</li>\n<li>I feel like a lot of IT people lack soft skills, and it caps their salary at a lower end. [<a href=\"https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;post=34009925\">ref</a>]</li>\n</ul></li>\n</ul>\n\n<p>Our news:</p>\n\n<ul>\n<li>Hardcopies of <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> now <a href=\"http://amzn.to/2fUZJxi\">shipping on Amazon</a>, as well as <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Pragmatic</a>.\n<ul>\n<li>When you get your copy, let me know. Send a pic to <a href=\"https://twitter.com/brianokken\">@brianokken</a></li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 29 Sep 2017 00:00:00 -0800", "published_parsed": [2017, 9, 29, 8, 0, 0, 4, 272, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "A really small web API and OS-level machine learning", "itunes_episode": "45", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:33"}}, "#44 pip install malicious-code": {"info": {"title": "#44 pip install malicious-code", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#44 pip install malicious-code"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/44/pip-install-malicious-code"}, {"length": "22562126", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/44/pip-install-malicious-code.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/44/pip-install-malicious-code", "id": "https://pythonbytes.fm/episodes/138c2e08-9b3c-44e5-bf75-e36313adb957", "guidislink": false, "summary": "<p>This episode is brought to you by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.fm/datadog</strong></a></p>\n\n<p><strong>Michael #1:</strong> <a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/\"><strong>Ten Malicious Libraries Found on PyPI</strong></a></p>\n\n<ul>\n<li>Code packages available in PyPI contained modified installation scripts.</li>\n<li>Vulnerabilities were introduced into the setup.py execution of packages for approximately 20 packages on PyPI</li>\n<li>Package names that closely resembled those used for packages found in the standard Python library (e.g. <code>urlib</code> vs <code>urllib</code>)</li>\n<li>The packages contained the exact same code as the upstream libraries except for an installation script.</li>\n<li>Officials with the Slovak authority said they recently notified PyPI administrators of the activity, and all identified packages were taken down immediately. Removal of the infected libraries, however, does nothing to purge them from servers that installed them.</li>\n<li>From PSF: <em>Unlike some language package management systems, PyPI does not have any full time staff devoted to it. It is a volunteer run project with only two active administrators. As such, it doesn't currently have resources for some of the proposed solutions such as actively monitoring or approving every new project published to PyPI. Historically and by necessity we've relied on a reactive strategy of taking down potentially malicious projects as we've become aware of them.</em></li>\n<li>Comments\n<ul>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33997861\">pip gets more paranoid in the install process</a></li>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=34000031\">Downloads were not super bad</a></li>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33999957\">Stestagg is sitting on lots of misspellings</a>\n-<a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33999819\">Undergrad thesis compromised Ruby and NodeJS too</a></li>\n</ul></li>\n<li>related: \n<ul>\n<li>original warning: <a href=\"http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/\">http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/</a></li>\n<li>stdlib names no longer allowed: <a href=\"https://github.com/pypa/warehouse/pull/2409\">https://github.com/pypa/warehouse/pull/2409</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #2: PyPI migration to Warehouse is in progress</strong></p>\n\n<ul>\n<li>Thanks to Jonas Neubert for researching this topic and writing a blog post titled <a href=\"https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/\">Publishing your First PyPI Package by/for the Absolute Beginner</a></li>\n<li>The steps to publish to PyPI have changed with the move to warehouse and pypi.org.</li>\n<li><a href=\"http://pypi.org/\">pypi.org</a> is no longer in read-only mode, it is where you publish packages</li>\n<li>The old APIs at <a href=\"http://pypi.python.org/pypi\">pypi.python.org/pypi</a> are disabled, if you have a .pypirc file you'll have to update the URLs</li>\n<li>You no longer need to register package names before first uploading, the project gets created on the fly during the first upload of the package.</li>\n<li>The best way to update anything in a package is to change your local package and upload it again, see <a href=\"https://github.com/pypa/warehouse/issues/2170\">https://github.com/pypa/warehouse/issues/2170</a>. \n<ul>\n<li>This includes even just changes to the description.</li>\n<li>Manual file upload is gone.</li>\n</ul></li>\n<li>As of right now it looks like you still need to register through pypi.python.org, then do the rest of the interactions with pypi.org. See <a href=\"https://github.com/pypa/warehouse/issues/2065\">https://github.com/pypa/warehouse/issues/2065</a></li>\n<li>Markdown support for package descriptions, like README.md seems to be coming: <a href=\"https://packaging.python.org/specifications/#description-content-type\">https://packaging.python.org/specifications/#description-content-type</a></li>\n<li>Jonas\u2019 <a href=\"https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/\">blog post</a> is from 13 Sep 2017, so it might be the most up to date tutorial on all the steps to get a package onto PyPI.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Live coding in a presentation</strong></p>\n\n<ul>\n<li>Last week\u2019s discussion of <a href=\"https://www.youtube.com/watch?v=js_0wjzuMfc\">David Beazley\u2019s Fun of Reinvention talk</a> got me thinking about doing live coding during a presentation since he did it so well.</li>\n<li>Several links regarding how to do various levels of live coding:\n<ul>\n<li>Advice for live coding: <a href=\"https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217\">https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217</a></li>\n<li>Not quite live coding: <a href=\"https://vanslaars.io/post/not-quite-live-coding/\">https://vanslaars.io/post/not-quite-live-coding/</a></li>\n<li>Avoiding live coding: <a href=\"https://codeplanet.io/techniques-avoid-live-coding-part/\">https://codeplanet.io/techniques-avoid-live-coding-part/</a></li>\n</ul></li>\n<li>Live coding:\n<ul>\n<li>practice, have a backup plan, don\u2019t forget to talk, plan content</li>\n</ul></li>\n<li>not quite: \n<ul>\n<li>use git tags</li>\n</ul></li>\n<li>avoiding it:\n<ul>\n<li>My favorite effect is fade-in slideshows where part of the code is shown at a time so you can talk about it and people know which bit to look at</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4: Notable REST / Web Frameworks</strong></p>\n\n<ul>\n<li><p><strong>Falcon: <a href=\"https://falconframework.org/\">https://falconframework.org/</a></strong></p>\n\n<ul>\n<li>Unburdening APIs for over 4.70 x 10-2 centuries. (4.7 years)</li>\n<li>Falcon is a bare-metal Python web API framework for building very fast app backends and microservices.</li>\n<li><strong>Complementary:</strong> Falcon complements more general Python web frameworks by providing bare-metal performance and flexibility wherever you need it.</li>\n<li><strong>Compatible</strong>: Thanks to WSGI, Falcon runs on a large variety of web servers and platforms. Falcon works great with CPython 2.6, 2.7, and 3.3+. Try PyPy for an extra speed boost.</li>\n</ul></li>\n<li><p><strong>Hug: <a href=\"http://hug.rest\">http://hug.rest</a></strong></p>\n\n<ul>\n<li>Drastically simplify API development over multiple interfaces. </li>\n<li>With hug, design and develop your API once, then expose it however your clients need to consume it. Be it locally, over HTTP, or through the command line.</li>\n<li>Built-in documentation</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>tox</strong></p>\n\n<ul>\n<li>\u201cThe name of the <a href=\"https://pypi.python.org/pypi/tox\">tox automation project</a> derives from \"testing out of the box\". It aims to \"automate and standardize testing in Python\". Conceptually it is one level above pytest and serves as a command line frontend for running tests and automate all kinds of tasks around the project. It also acts as a frontend for <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">Continuous Integration Systems</a> to unify what you do locally and what happens in e.g. Jenkins or Travis CI.\u201d - Oliver Bestwalter</li>\n<li>a small tox.ini file:</li>\n</ul>\n\n<pre><code>    [tox]\n    envlist = py27,py35, py36\n    [testenv]\n    deps=pytest \n    commands=pytest\n</code></pre>\n\n<ul>\n<li>You place this in your package source directory and then run tox, which will:\n<ul>\n<li>Use setup.py to create a sdist</li>\n<li>create a virtual environment for each environment in envlist</li>\n<li>Install dependencies in the environments</li>\n<li>Install your package into the environment</li>\n<li>Run the tests</li>\n<li>Do this for multiple environments, so multiple Python versions (as an example)</li>\n</ul></li>\n<li>Much more powerful than that, but that\u2019s how many people use it.</li>\n<li>Further Reading:\n<ul>\n<li><a href=\"http://tox.readthedocs.io/en/latest/index.html\">http://tox.readthedocs.io/en/latest/index.html</a></li>\n<li><a href=\"http://tox.readthedocs.io/en/latest/example/basic.html\">http://tox.readthedocs.io/en/latest/example/basic.html</a> </li>\n<li><a href=\"https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/\">https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: flake8-tidy-imports</strong> <a href=\"https://pypi.python.org/pypi/flake8-tidy-imports#options\"><strong>deprecated imports</strong></a></p>\n\n<ul>\n<li>You can declare {python2to3} as a banned-module import, and it will check against a long list of import moves and removals between python 2 and python 3, suggesting relevant replacements if available. </li>\n<li>I meticulously compiled this list by reading release notes from Python 3.0-3.6 as well as testing in a large legacy python codebase, but I presumably missed a few.</li>\n<li>Example:</li>\n</ul>\n\n<pre><code>    flake8 file.py\n    file.py:1:1: I201 Banned import 'mock' used - use unittest.mock instead.\n</code></pre>\n\n<p><strong>Michael #7 (bonus!):</strong> <a href=\"https://emptysqua.re/blog/coaching-for-first-time-pygotham-speakers/\"><strong>Help Me Offer Coaching to First-Time PyGotham Speakers</strong></a></p>\n\n<ul>\n<li>Via A. Jesse Jiru Davis</li>\n<li>I want to raise $1200 for public-speaking coaching for first-time speakers at PyGotham, the New York City Python conference. Will you chip in?</li>\n<li>Jesse is a PyGotham conference organizer, but I\u2019m launching this fundraiser independently of PyGotham.</li>\n<li>As of September 19, I have raised my goal. Thanks to everyone who donated!\n<h2>Our news</h2></li>\n</ul>\n\n<p><strong>Michael</strong>: </p>\n\n<ul>\n<li>Finished writing my <strong>free MongoDB course</strong> (subscribe to get notified of release at <strong><a href=\"https://training.talkpython.fm/getnotified\">https://training.talkpython.fm/getnotified</a></strong> )</li>\n<li><a href=\"https://github.com/mikeckennedy/python-switch\"><strong>python-switch</strong></a> kind of went off the hook (see <a href=\"https://github.com/mikeckennedy/python-switch\">this</a> and <a href=\"https://www.reddit.com/r/Python/comments/70413x/adding_a_switch_statement_to_python/\">that</a>)</li>\n</ul>\n\n<p><strong>Brian</strong>: </p>\n\n<ul>\n<li>Book is shipping: <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This episode is brought to you by Datadog: <a href=\"https://pythonbytes.fm/datadog\"><strong>pythonbytes.fm/datadog</strong></a></p>\n\n<p><strong>Michael #1:</strong> <a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/\"><strong>Ten Malicious Libraries Found on PyPI</strong></a></p>\n\n<ul>\n<li>Code packages available in PyPI contained modified installation scripts.</li>\n<li>Vulnerabilities were introduced into the setup.py execution of packages for approximately 20 packages on PyPI</li>\n<li>Package names that closely resembled those used for packages found in the standard Python library (e.g. <code>urlib</code> vs <code>urllib</code>)</li>\n<li>The packages contained the exact same code as the upstream libraries except for an installation script.</li>\n<li>Officials with the Slovak authority said they recently notified PyPI administrators of the activity, and all identified packages were taken down immediately. Removal of the infected libraries, however, does nothing to purge them from servers that installed them.</li>\n<li>From PSF: <em>Unlike some language package management systems, PyPI does not have any full time staff devoted to it. It is a volunteer run project with only two active administrators. As such, it doesn't currently have resources for some of the proposed solutions such as actively monitoring or approving every new project published to PyPI. Historically and by necessity we've relied on a reactive strategy of taking down potentially malicious projects as we've become aware of them.</em></li>\n<li>Comments\n<ul>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33997861\">pip gets more paranoid in the install process</a></li>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=34000031\">Downloads were not super bad</a></li>\n<li><a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33999957\">Stestagg is sitting on lots of misspellings</a>\n-<a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;post=33999819\">Undergrad thesis compromised Ruby and NodeJS too</a></li>\n</ul></li>\n<li>related: \n<ul>\n<li>original warning: <a href=\"http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/\">http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/</a></li>\n<li>stdlib names no longer allowed: <a href=\"https://github.com/pypa/warehouse/pull/2409\">https://github.com/pypa/warehouse/pull/2409</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #2: PyPI migration to Warehouse is in progress</strong></p>\n\n<ul>\n<li>Thanks to Jonas Neubert for researching this topic and writing a blog post titled <a href=\"https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/\">Publishing your First PyPI Package by/for the Absolute Beginner</a></li>\n<li>The steps to publish to PyPI have changed with the move to warehouse and pypi.org.</li>\n<li><a href=\"http://pypi.org/\">pypi.org</a> is no longer in read-only mode, it is where you publish packages</li>\n<li>The old APIs at <a href=\"http://pypi.python.org/pypi\">pypi.python.org/pypi</a> are disabled, if you have a .pypirc file you'll have to update the URLs</li>\n<li>You no longer need to register package names before first uploading, the project gets created on the fly during the first upload of the package.</li>\n<li>The best way to update anything in a package is to change your local package and upload it again, see <a href=\"https://github.com/pypa/warehouse/issues/2170\">https://github.com/pypa/warehouse/issues/2170</a>. \n<ul>\n<li>This includes even just changes to the description.</li>\n<li>Manual file upload is gone.</li>\n</ul></li>\n<li>As of right now it looks like you still need to register through pypi.python.org, then do the rest of the interactions with pypi.org. See <a href=\"https://github.com/pypa/warehouse/issues/2065\">https://github.com/pypa/warehouse/issues/2065</a></li>\n<li>Markdown support for package descriptions, like README.md seems to be coming: <a href=\"https://packaging.python.org/specifications/#description-content-type\">https://packaging.python.org/specifications/#description-content-type</a></li>\n<li>Jonas\u2019 <a href=\"https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/\">blog post</a> is from 13 Sep 2017, so it might be the most up to date tutorial on all the steps to get a package onto PyPI.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Live coding in a presentation</strong></p>\n\n<ul>\n<li>Last week\u2019s discussion of <a href=\"https://www.youtube.com/watch?v=js_0wjzuMfc\">David Beazley\u2019s Fun of Reinvention talk</a> got me thinking about doing live coding during a presentation since he did it so well.</li>\n<li>Several links regarding how to do various levels of live coding:\n<ul>\n<li>Advice for live coding: <a href=\"https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217\">https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217</a></li>\n<li>Not quite live coding: <a href=\"https://vanslaars.io/post/not-quite-live-coding/\">https://vanslaars.io/post/not-quite-live-coding/</a></li>\n<li>Avoiding live coding: <a href=\"https://codeplanet.io/techniques-avoid-live-coding-part/\">https://codeplanet.io/techniques-avoid-live-coding-part/</a></li>\n</ul></li>\n<li>Live coding:\n<ul>\n<li>practice, have a backup plan, don\u2019t forget to talk, plan content</li>\n</ul></li>\n<li>not quite: \n<ul>\n<li>use git tags</li>\n</ul></li>\n<li>avoiding it:\n<ul>\n<li>My favorite effect is fade-in slideshows where part of the code is shown at a time so you can talk about it and people know which bit to look at</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4: Notable REST / Web Frameworks</strong></p>\n\n<ul>\n<li><p><strong>Falcon: <a href=\"https://falconframework.org/\">https://falconframework.org/</a></strong></p>\n\n<ul>\n<li>Unburdening APIs for over 4.70 x 10-2 centuries. (4.7 years)</li>\n<li>Falcon is a bare-metal Python web API framework for building very fast app backends and microservices.</li>\n<li><strong>Complementary:</strong> Falcon complements more general Python web frameworks by providing bare-metal performance and flexibility wherever you need it.</li>\n<li><strong>Compatible</strong>: Thanks to WSGI, Falcon runs on a large variety of web servers and platforms. Falcon works great with CPython 2.6, 2.7, and 3.3+. Try PyPy for an extra speed boost.</li>\n</ul></li>\n<li><p><strong>Hug: <a href=\"http://hug.rest\">http://hug.rest</a></strong></p>\n\n<ul>\n<li>Drastically simplify API development over multiple interfaces. </li>\n<li>With hug, design and develop your API once, then expose it however your clients need to consume it. Be it locally, over HTTP, or through the command line.</li>\n<li>Built-in documentation</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>tox</strong></p>\n\n<ul>\n<li>\u201cThe name of the <a href=\"https://pypi.python.org/pypi/tox\">tox automation project</a> derives from \"testing out of the box\". It aims to \"automate and standardize testing in Python\". Conceptually it is one level above pytest and serves as a command line frontend for running tests and automate all kinds of tasks around the project. It also acts as a frontend for <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">Continuous Integration Systems</a> to unify what you do locally and what happens in e.g. Jenkins or Travis CI.\u201d - Oliver Bestwalter</li>\n<li>a small tox.ini file:</li>\n</ul>\n\n<pre><code>    [tox]\n    envlist = py27,py35, py36\n    [testenv]\n    deps=pytest \n    commands=pytest\n</code></pre>\n\n<ul>\n<li>You place this in your package source directory and then run tox, which will:\n<ul>\n<li>Use setup.py to create a sdist</li>\n<li>create a virtual environment for each environment in envlist</li>\n<li>Install dependencies in the environments</li>\n<li>Install your package into the environment</li>\n<li>Run the tests</li>\n<li>Do this for multiple environments, so multiple Python versions (as an example)</li>\n</ul></li>\n<li>Much more powerful than that, but that\u2019s how many people use it.</li>\n<li>Further Reading:\n<ul>\n<li><a href=\"http://tox.readthedocs.io/en/latest/index.html\">http://tox.readthedocs.io/en/latest/index.html</a></li>\n<li><a href=\"http://tox.readthedocs.io/en/latest/example/basic.html\">http://tox.readthedocs.io/en/latest/example/basic.html</a> </li>\n<li><a href=\"https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/\">https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6: flake8-tidy-imports</strong> <a href=\"https://pypi.python.org/pypi/flake8-tidy-imports#options\"><strong>deprecated imports</strong></a></p>\n\n<ul>\n<li>You can declare {python2to3} as a banned-module import, and it will check against a long list of import moves and removals between python 2 and python 3, suggesting relevant replacements if available. </li>\n<li>I meticulously compiled this list by reading release notes from Python 3.0-3.6 as well as testing in a large legacy python codebase, but I presumably missed a few.</li>\n<li>Example:</li>\n</ul>\n\n<pre><code>    flake8 file.py\n    file.py:1:1: I201 Banned import 'mock' used - use unittest.mock instead.\n</code></pre>\n\n<p><strong>Michael #7 (bonus!):</strong> <a href=\"https://emptysqua.re/blog/coaching-for-first-time-pygotham-speakers/\"><strong>Help Me Offer Coaching to First-Time PyGotham Speakers</strong></a></p>\n\n<ul>\n<li>Via A. Jesse Jiru Davis</li>\n<li>I want to raise $1200 for public-speaking coaching for first-time speakers at PyGotham, the New York City Python conference. Will you chip in?</li>\n<li>Jesse is a PyGotham conference organizer, but I\u2019m launching this fundraiser independently of PyGotham.</li>\n<li>As of September 19, I have raised my goal. Thanks to everyone who donated!\n<h2>Our news</h2></li>\n</ul>\n\n<p><strong>Michael</strong>: </p>\n\n<ul>\n<li>Finished writing my <strong>free MongoDB course</strong> (subscribe to get notified of release at <strong><a href=\"https://training.talkpython.fm/getnotified\">https://training.talkpython.fm/getnotified</a></strong> )</li>\n<li><a href=\"https://github.com/mikeckennedy/python-switch\"><strong>python-switch</strong></a> kind of went off the hook (see <a href=\"https://github.com/mikeckennedy/python-switch\">this</a> and <a href=\"https://www.reddit.com/r/Python/comments/70413x/adding_a_switch_statement_to_python/\">that</a>)</li>\n</ul>\n\n<p><strong>Brian</strong>: </p>\n\n<ul>\n<li>Book is shipping: <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 20 Sep 2017 00:00:00 -0800", "published_parsed": [2017, 9, 20, 8, 0, 0, 2, 263, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "pip install malicious-code", "itunes_episode": "44", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:26:35"}}, "#43 Python string theory, v2": {"info": {"title": "#43 Python string theory, v2", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#43 Python string theory, v2"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/43/python-string-theory-v2"}, {"length": "17336965", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/43/python-string-theory-v2.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/43/python-string-theory-v2", "id": "https://pythonbytes.fm/episodes/8ec9baee-6915-4274-b172-85530719f468", "guidislink": false, "summary": "<h1>Python Bytes 43</h1>\n\n<p>This episode is brought to you by Rollbar: <a href=\"https://pythonbytes.fm/rollbar\"><strong>pythonbytes.fm/rollbar</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/asottile/future-fstrings\"><strong>future-fstrings</strong></a></p>\n\n<ul>\n<li>A backport of fstrings to python &lt; 3.6</li>\n<li>Include an encoding string the top of your file (this replaces the utf-8 line if you already have it)</li>\n<li>And then write python3.6 fstring code as usual!</li>\n</ul>\n\n<pre><code>    # -*- coding: future_fstrings -*-\n    thing = 'world'\n    print(f'hello {thing}')\n</code></pre>\n\n<ul>\n<li>In action:</li>\n</ul>\n\n<pre><code>    $ python2.7 main.py\n    hello world\n</code></pre>\n\n<ul>\n<li>I\u2019m still undecided if I like this sort of monkeying with the language through the encoding mechanism back door. </li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.youtube.com/watch?v=js_0wjzuMfc\"><strong>The Fun of Reinvention</strong></a></p>\n\n<ul>\n<li>Keynote from PyCon Israel</li>\n<li>David Beazley rocks it again</li>\n<li>Let\u2019s take Python 3.6 features and see how far we can push them</li>\n<li>Builds an aspect-oriented constraint system using just 3.6 features</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://medium.com/@almeidneto/sound-pattern-recognition-with-python-9aff69edce5d\"><strong>Sound Pattern Recognition with Python</strong></a></p>\n\n<ul>\n<li>Using<code>scipy.io.wavfile.read</code> to read a .wav file.</li>\n<li>Looking for peaks (knocks).</li>\n<li>Using minimum values to classify peaks, and minimum distance between peaks.</li>\n<li>This is an interesting start into audio measurements using Python.</li>\n<li>Would be fun to extend to some basic scope measurements, like sampling with a resolution bandwidth, trigger thresholds, pre-trigger time guards, etc.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.python.org/dev/peps/pep-0550/\"><strong>PEP 550: Execution Context</strong></a></p>\n\n<ul>\n<li>From the guys at <a href=\"http://magic.io\"><strong>magic.io</strong></a></li>\n<li>Adds a new generic mechanism of ensuring consistent access to non-local state in the context of out-of-order execution, such as in Python generators and coroutines.</li>\n<li>Thread-local storage, such as <code>threading.local()</code>, is inadequate for programs that execute concurrently in the same OS thread. This PEP proposes a solution to this problem.</li>\n<li>A few examples of where Thread-local storage (TLS) is commonly relied upon:\n<ul>\n<li>Context managers like decimal contexts,<code>numpy.errstate</code>, and <code>warnings.catch_warnings</code>.</li>\n<li>Request-related data, such as security tokens and request data in web applications, language context for<code>gettext</code> etc.</li>\n<li>Profiling, tracing, and logging in large code bases.</li>\n</ul></li>\n<li>The motivation from <a href=\"https://github.com/magicstack/uvloop\"><strong>uvloop</strong></a> is obviously at work here.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b\"><strong>Intro to Threads and Processes in Python</strong></a></p>\n\n<ul>\n<li>Beginner\u2019s guide to parallel programming</li>\n<li>Threads and processes are both useful for different kinds of problems.</li>\n<li>This is a good quick explanation of when and where to use either. With pictures!</li>\n<li>Threads\n<ul>\n<li>Like mini processes that live inside one process.</li>\n<li>Share mem space with other threads.</li>\n<li>Cannot run simultaneously in Python (there are some workarounds), due to GIL.</li>\n<li>Good for tasks waiting on IO.</li>\n</ul></li>\n<li>Processes\n<ul>\n<li>Controlled by OS</li>\n<li>Can run simultaneously</li>\n<li>Good for CPU intensive work because you can use multiple cores.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.pyfilesystem.org/\"><strong>Alternative filesystems for Python</strong></a></p>\n\n<ul>\n<li>PyFilesystem: Filesystem Abstraction for Python. </li>\n<li>Work with files and directories in archives, memory, the cloud etc. as easily as your local drive.</li>\n<li>Uses\n<ul>\n<li>Write code now, decide later where the data will be stored</li>\n<li>unit test without writing real files</li>\n<li>upload files to the cloud without learning a new API</li>\n<li>sandbox your file writing code</li>\n</ul></li>\n<li>File system backends\n<ul>\n<li><a href=\"https://www.pyfilesystem.org/page/appfs/\">AppFS</a> Filesystems for application data.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/s3fs/\">S3FS</a> Amazon S3 Filesystem.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/ftpfs/\">FTPFS</a> File Transfer Protocol.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/memoryfs/\">MemoryFS</a> An in-memory filesystem.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/mountfs/\">MountFS</a> A virtual filesystem that can <em>mount</em> other filesystems.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/multifs/\">MultiFS</a> A virtual filesystem that combines other filesystems.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/osfs/\">OSFS</a> OS Filesystem (hard-drive).</li>\n<li><a href=\"https://www.pyfilesystem.org/page/tarfs/\">TarFS</a> Read and write compressed Tar archives.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/tempfs/\">TempFS</a> Contains temporary data.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/zipfs/\">ZipFS</a> Read and write Zip files.</li>\n<li>and more</li>\n</ul></li>\n</ul>\n\n<h2>Our news</h2>\n\n<p>Michael: switch statement extension to Python: <a href=\"https://github.com/mikeckennedy/python-switch\"><strong>github.com/mikeckennedy/python-switch</strong></a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 43</h1>\n\n<p>This episode is brought to you by Rollbar: <a href=\"https://pythonbytes.fm/rollbar\"><strong>pythonbytes.fm/rollbar</strong></a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/asottile/future-fstrings\"><strong>future-fstrings</strong></a></p>\n\n<ul>\n<li>A backport of fstrings to python &lt; 3.6</li>\n<li>Include an encoding string the top of your file (this replaces the utf-8 line if you already have it)</li>\n<li>And then write python3.6 fstring code as usual!</li>\n</ul>\n\n<pre><code>    # -*- coding: future_fstrings -*-\n    thing = 'world'\n    print(f'hello {thing}')\n</code></pre>\n\n<ul>\n<li>In action:</li>\n</ul>\n\n<pre><code>    $ python2.7 main.py\n    hello world\n</code></pre>\n\n<ul>\n<li>I\u2019m still undecided if I like this sort of monkeying with the language through the encoding mechanism back door. </li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.youtube.com/watch?v=js_0wjzuMfc\"><strong>The Fun of Reinvention</strong></a></p>\n\n<ul>\n<li>Keynote from PyCon Israel</li>\n<li>David Beazley rocks it again</li>\n<li>Let\u2019s take Python 3.6 features and see how far we can push them</li>\n<li>Builds an aspect-oriented constraint system using just 3.6 features</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://medium.com/@almeidneto/sound-pattern-recognition-with-python-9aff69edce5d\"><strong>Sound Pattern Recognition with Python</strong></a></p>\n\n<ul>\n<li>Using<code>scipy.io.wavfile.read</code> to read a .wav file.</li>\n<li>Looking for peaks (knocks).</li>\n<li>Using minimum values to classify peaks, and minimum distance between peaks.</li>\n<li>This is an interesting start into audio measurements using Python.</li>\n<li>Would be fun to extend to some basic scope measurements, like sampling with a resolution bandwidth, trigger thresholds, pre-trigger time guards, etc.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.python.org/dev/peps/pep-0550/\"><strong>PEP 550: Execution Context</strong></a></p>\n\n<ul>\n<li>From the guys at <a href=\"http://magic.io\"><strong>magic.io</strong></a></li>\n<li>Adds a new generic mechanism of ensuring consistent access to non-local state in the context of out-of-order execution, such as in Python generators and coroutines.</li>\n<li>Thread-local storage, such as <code>threading.local()</code>, is inadequate for programs that execute concurrently in the same OS thread. This PEP proposes a solution to this problem.</li>\n<li>A few examples of where Thread-local storage (TLS) is commonly relied upon:\n<ul>\n<li>Context managers like decimal contexts,<code>numpy.errstate</code>, and <code>warnings.catch_warnings</code>.</li>\n<li>Request-related data, such as security tokens and request data in web applications, language context for<code>gettext</code> etc.</li>\n<li>Profiling, tracing, and logging in large code bases.</li>\n</ul></li>\n<li>The motivation from <a href=\"https://github.com/magicstack/uvloop\"><strong>uvloop</strong></a> is obviously at work here.</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b\"><strong>Intro to Threads and Processes in Python</strong></a></p>\n\n<ul>\n<li>Beginner\u2019s guide to parallel programming</li>\n<li>Threads and processes are both useful for different kinds of problems.</li>\n<li>This is a good quick explanation of when and where to use either. With pictures!</li>\n<li>Threads\n<ul>\n<li>Like mini processes that live inside one process.</li>\n<li>Share mem space with other threads.</li>\n<li>Cannot run simultaneously in Python (there are some workarounds), due to GIL.</li>\n<li>Good for tasks waiting on IO.</li>\n</ul></li>\n<li>Processes\n<ul>\n<li>Controlled by OS</li>\n<li>Can run simultaneously</li>\n<li>Good for CPU intensive work because you can use multiple cores.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.pyfilesystem.org/\"><strong>Alternative filesystems for Python</strong></a></p>\n\n<ul>\n<li>PyFilesystem: Filesystem Abstraction for Python. </li>\n<li>Work with files and directories in archives, memory, the cloud etc. as easily as your local drive.</li>\n<li>Uses\n<ul>\n<li>Write code now, decide later where the data will be stored</li>\n<li>unit test without writing real files</li>\n<li>upload files to the cloud without learning a new API</li>\n<li>sandbox your file writing code</li>\n</ul></li>\n<li>File system backends\n<ul>\n<li><a href=\"https://www.pyfilesystem.org/page/appfs/\">AppFS</a> Filesystems for application data.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/s3fs/\">S3FS</a> Amazon S3 Filesystem.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/ftpfs/\">FTPFS</a> File Transfer Protocol.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/memoryfs/\">MemoryFS</a> An in-memory filesystem.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/mountfs/\">MountFS</a> A virtual filesystem that can <em>mount</em> other filesystems.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/multifs/\">MultiFS</a> A virtual filesystem that combines other filesystems.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/osfs/\">OSFS</a> OS Filesystem (hard-drive).</li>\n<li><a href=\"https://www.pyfilesystem.org/page/tarfs/\">TarFS</a> Read and write compressed Tar archives.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/tempfs/\">TempFS</a> Contains temporary data.</li>\n<li><a href=\"https://www.pyfilesystem.org/page/zipfs/\">ZipFS</a> Read and write Zip files.</li>\n<li>and more</li>\n</ul></li>\n</ul>\n\n<h2>Our news</h2>\n\n<p>Michael: switch statement extension to Python: <a href=\"https://github.com/mikeckennedy/python-switch\"><strong>github.com/mikeckennedy/python-switch</strong></a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 14 Sep 2017 00:00:00 -0800", "published_parsed": [2017, 9, 14, 8, 0, 0, 3, 257, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python string theory, v2", "itunes_episode": "43", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:18:48"}}, "#42 Behold: The Python 2 death clock": {"info": {"title": "#42 Behold: The Python 2 death clock", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#42 Behold: The Python 2 death clock"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/42/behold-the-python-2-death-clock"}, {"length": "21838276", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/42/behold-the-python-2-death-clock.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/42/behold-the-python-2-death-clock", "id": "https://pythonbytes.fm/episodes/b68dd158-b08b-42be-83eb-58145ad2da12", "guidislink": false, "summary": "<p>Sponsored by DataDog! <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong>  <strong>What Kenneth Did Last Week (well, recently)</strong></p>\n\n<ul>\n<li><p>Kenneth Reitz</p>\n\n<ul>\n<li><p>Homebrew Python Tap</p>\n\n<ul>\n<li>Python 2.5 through 3.6 available through homebrew </li>\n<li><a href=\"https://github.com/kennethreitz/homebrew-pythons\">https://github.com/kennethreitz/homebrew-pythons</a></li>\n<li><pre><code>$ brew tap kennethreitz/pythons\n\n$ brew install python-2.5\n</code></pre></li>\n</ul></li>\n<li><a href=\"https://github.com/requests/requests-threads/\">https://github.com/requests/requests-threads/</a>\n<ul>\n<li>\u201c Twisted Deferred Thread backend for Requests.\u201d</li>\n<li>Can be used with async/await or with twisted.</li>\n</ul></li>\n<li><a href=\"https://github.com/kennethreitz/background\">https://github.com/kennethreitz/background</a>\n<ul>\n<li>\u201cRuns things in the background.\u201d</li>\n</ul></li>\n<li><a href=\"https://github.com/kennethreitz/setup.py\">https://github.com/kennethreitz/setup.py</a>\n<ul>\n<li>\u201csetup.py (for humans)\u201d</li>\n<li>\u201cThis repo exists to provide an example setup.py file, that can be used to bootstrap your next Python project. It includes some advanced patterns and best practices for setup.py, as well as some commented\u2013out nice\u2013to\u2013haves.\u201d</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://pythonclock.org/\"><strong>Python 2 Death Clock</strong></a></p>\n\n<ul>\n<li>Python 2.7 will not be maintained past 2020. </li>\n<li>No official date has been given, so this clock counts down until April 12th, 2020, which will be roughly the time of the 2020 PyCon.</li>\n<li>I am hereby suggesting we make PyCon 2020 the official end-of-life date, and we throw a massive party to celebrate all that Python 2 has done for us.</li>\n<li>Python 2, thank you for your years of faithful service.</li>\n<li>Python 3, your time is now.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://medium.com/@copyconstruct/small-functions-considered-harmful-91035d316c29\"><strong>Small Functions considered Harmful</strong></a></p>\n\n<ul>\n<li>Cindy Sridharan</li>\n<li>\"General programming advice doled out invariably seems to extoll the elegance and efficacy of small functions.\"</li>\n<li>This is sometimes pushed to the extreme of having one line functions that are only called from one place. Understand that doing this increases your code size by 4 lines every time you do it.\n<ul>\n<li>1 line for the function call isn't removed because you moved the guts into a function.</li>\n<li>2 lines for function definition and guts</li>\n<li>2 lines to properly space your new function around other functions.</li>\n</ul></li>\n<li>Supposed Benefit: Do one thing; a function should only ever do one thing and do it well.</li>\n<li>Problems:\n<ul>\n<li>\"Instead of a reasonably airtight abstraction that can be understood (and tested) as a single unit, we now end up with even smaller units that\u2019ve been carved out to delineate each and every component of \u201cthe one thing\u201d until it\u2019s fully modular and entirely DRY.\"        </li>\n<li>\"...pragmatism and reason are sacrificed at the altar of a dogmatic adherence to DRY, ...\"</li>\n<li>premature abstractions. breaking up the code into smaller functions before you really understand the problem space can make it harder to refactor later.</li>\n<li>micro-functions tend to have longer names because you need more names. Longer names aren't always a good thing when you have many long names on a page.</li>\n<li>loss of locality: One bit of functionality that used to be in one function is now spread across many functions and possibly moved far away from use.</li>\n<li>class pollution: class interfaces grow with smaller functions and hide the real intended interface.</li>\n<li>harder to read, especially for newcomers.</li>\n</ul></li>\n<li>There is still a place for small functions. But use it in moderation. Communicating with future developers clearly is more important than following dogmatic rules about function size.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://whypy3.com/\"><strong>Why Python 3</strong></a></p>\n\n<ul>\n<li>All the cool Python 3 features that'll make you switch today!</li>\n<li>Presented as a random code sample surprise</li>\n<li>Examples:\n<ul>\n<li>Annotations: <code>def my_add(a: int, b: int) -&gt; int</code></li>\n<li>Keyword only arguments: <code>def f(a, b, *args, option=True)</code></li>\n<li>Yield from: <code>yield from range(5)</code></li>\n<li>Enums: <code>class Color(Enum)</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>EANABs</strong></p>\n\n<ul>\n<li>Equally Attractive Non-Alcoholic Beverage</li>\n<li>There is drinking that happens often when you get a bunch of adults together. Often with work or tech gatherings. That\u2019s fine. But make sure you emphasize that drinking is not required. </li>\n<li><a href=\"https://twitter.com/treyhunner\">@treyhunner</a> <a href=\"https://twitter.com/treyhunner/status/896081298581635072\">brought it up recently</a> and suggested that all conferences and tech events should have this.\n<ul>\n<li>\"I sometimes feel excluded when events include nice alcohol but only cheap soda\"\n<ul>\n<li><a href=\"https://alcohol.stanford.edu/alcohol-drug-info/staying-safe/eanabs\">Stanford site</a> has a bunch of great recipes.</li>\n</ul></li>\n<li>\u201cEANABS are required at all Stanford parties, \u2026\u201d\n<ul>\n<li>If you have specialty local beers, try to find specialty local sodas.</li>\n<li>If you have nice spiked punch, have a NA version also.</li>\n<li>If you have cocktails, advertise your ability to serve mocktails. </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://stackoverflow.blog/2017/09/06/incredible-growth-python/\"><strong>The Incredible Growth of Python</strong></a></p>\n\n<ul>\n<li>via StackOverflow</li>\n<li>Recently explored how wealthy countries (those defined as high-income by the World Bank) tend to visit a different set of technologies than the rest of the world. </li>\n<li>Largest differences we saw was in the programming language Python. </li>\n<li>High-income countries, the growth of Python is even larger than it might appear from tools like Stack Overflow Trends, or in other rankings.</li>\n<li>[StackOverflow] makes the case that Python has a solid claim to being the fastest-growing major programming language.</li>\n<li>June 2017 was the first month that Python was the most visited tag on Stack Overflow within high-income nations. (Grown has grown by 2.5-fold since 2012)</li>\n<li><strong>Python compared to smaller, growing technologies</strong> graph is incredible.</li>\n<li>Also: <a href=\"http://www.kdnuggets.com/2017/08/python-overtakes-r-leader-analytics-data-science.html\"><strong>Python overtakes R, becomes the leader in Data Science, Machine Learning platforms</strong></a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by DataDog! <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a></p>\n\n<p><strong>Brian #1:</strong>  <strong>What Kenneth Did Last Week (well, recently)</strong></p>\n\n<ul>\n<li><p>Kenneth Reitz</p>\n\n<ul>\n<li><p>Homebrew Python Tap</p>\n\n<ul>\n<li>Python 2.5 through 3.6 available through homebrew </li>\n<li><a href=\"https://github.com/kennethreitz/homebrew-pythons\">https://github.com/kennethreitz/homebrew-pythons</a></li>\n<li><pre><code>$ brew tap kennethreitz/pythons\n\n$ brew install python-2.5\n</code></pre></li>\n</ul></li>\n<li><a href=\"https://github.com/requests/requests-threads/\">https://github.com/requests/requests-threads/</a>\n<ul>\n<li>\u201c Twisted Deferred Thread backend for Requests.\u201d</li>\n<li>Can be used with async/await or with twisted.</li>\n</ul></li>\n<li><a href=\"https://github.com/kennethreitz/background\">https://github.com/kennethreitz/background</a>\n<ul>\n<li>\u201cRuns things in the background.\u201d</li>\n</ul></li>\n<li><a href=\"https://github.com/kennethreitz/setup.py\">https://github.com/kennethreitz/setup.py</a>\n<ul>\n<li>\u201csetup.py (for humans)\u201d</li>\n<li>\u201cThis repo exists to provide an example setup.py file, that can be used to bootstrap your next Python project. It includes some advanced patterns and best practices for setup.py, as well as some commented\u2013out nice\u2013to\u2013haves.\u201d</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://pythonclock.org/\"><strong>Python 2 Death Clock</strong></a></p>\n\n<ul>\n<li>Python 2.7 will not be maintained past 2020. </li>\n<li>No official date has been given, so this clock counts down until April 12th, 2020, which will be roughly the time of the 2020 PyCon.</li>\n<li>I am hereby suggesting we make PyCon 2020 the official end-of-life date, and we throw a massive party to celebrate all that Python 2 has done for us.</li>\n<li>Python 2, thank you for your years of faithful service.</li>\n<li>Python 3, your time is now.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://medium.com/@copyconstruct/small-functions-considered-harmful-91035d316c29\"><strong>Small Functions considered Harmful</strong></a></p>\n\n<ul>\n<li>Cindy Sridharan</li>\n<li>\"General programming advice doled out invariably seems to extoll the elegance and efficacy of small functions.\"</li>\n<li>This is sometimes pushed to the extreme of having one line functions that are only called from one place. Understand that doing this increases your code size by 4 lines every time you do it.\n<ul>\n<li>1 line for the function call isn't removed because you moved the guts into a function.</li>\n<li>2 lines for function definition and guts</li>\n<li>2 lines to properly space your new function around other functions.</li>\n</ul></li>\n<li>Supposed Benefit: Do one thing; a function should only ever do one thing and do it well.</li>\n<li>Problems:\n<ul>\n<li>\"Instead of a reasonably airtight abstraction that can be understood (and tested) as a single unit, we now end up with even smaller units that\u2019ve been carved out to delineate each and every component of \u201cthe one thing\u201d until it\u2019s fully modular and entirely DRY.\"        </li>\n<li>\"...pragmatism and reason are sacrificed at the altar of a dogmatic adherence to DRY, ...\"</li>\n<li>premature abstractions. breaking up the code into smaller functions before you really understand the problem space can make it harder to refactor later.</li>\n<li>micro-functions tend to have longer names because you need more names. Longer names aren't always a good thing when you have many long names on a page.</li>\n<li>loss of locality: One bit of functionality that used to be in one function is now spread across many functions and possibly moved far away from use.</li>\n<li>class pollution: class interfaces grow with smaller functions and hide the real intended interface.</li>\n<li>harder to read, especially for newcomers.</li>\n</ul></li>\n<li>There is still a place for small functions. But use it in moderation. Communicating with future developers clearly is more important than following dogmatic rules about function size.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://whypy3.com/\"><strong>Why Python 3</strong></a></p>\n\n<ul>\n<li>All the cool Python 3 features that'll make you switch today!</li>\n<li>Presented as a random code sample surprise</li>\n<li>Examples:\n<ul>\n<li>Annotations: <code>def my_add(a: int, b: int) -&gt; int</code></li>\n<li>Keyword only arguments: <code>def f(a, b, *args, option=True)</code></li>\n<li>Yield from: <code>yield from range(5)</code></li>\n<li>Enums: <code>class Color(Enum)</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>EANABs</strong></p>\n\n<ul>\n<li>Equally Attractive Non-Alcoholic Beverage</li>\n<li>There is drinking that happens often when you get a bunch of adults together. Often with work or tech gatherings. That\u2019s fine. But make sure you emphasize that drinking is not required. </li>\n<li><a href=\"https://twitter.com/treyhunner\">@treyhunner</a> <a href=\"https://twitter.com/treyhunner/status/896081298581635072\">brought it up recently</a> and suggested that all conferences and tech events should have this.\n<ul>\n<li>\"I sometimes feel excluded when events include nice alcohol but only cheap soda\"\n<ul>\n<li><a href=\"https://alcohol.stanford.edu/alcohol-drug-info/staying-safe/eanabs\">Stanford site</a> has a bunch of great recipes.</li>\n</ul></li>\n<li>\u201cEANABS are required at all Stanford parties, \u2026\u201d\n<ul>\n<li>If you have specialty local beers, try to find specialty local sodas.</li>\n<li>If you have nice spiked punch, have a NA version also.</li>\n<li>If you have cocktails, advertise your ability to serve mocktails. </li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong>  <a href=\"https://stackoverflow.blog/2017/09/06/incredible-growth-python/\"><strong>The Incredible Growth of Python</strong></a></p>\n\n<ul>\n<li>via StackOverflow</li>\n<li>Recently explored how wealthy countries (those defined as high-income by the World Bank) tend to visit a different set of technologies than the rest of the world. </li>\n<li>Largest differences we saw was in the programming language Python. </li>\n<li>High-income countries, the growth of Python is even larger than it might appear from tools like Stack Overflow Trends, or in other rankings.</li>\n<li>[StackOverflow] makes the case that Python has a solid claim to being the fastest-growing major programming language.</li>\n<li>June 2017 was the first month that Python was the most visited tag on Stack Overflow within high-income nations. (Grown has grown by 2.5-fold since 2012)</li>\n<li><strong>Python compared to smaller, growing technologies</strong> graph is incredible.</li>\n<li>Also: <a href=\"http://www.kdnuggets.com/2017/08/python-overtakes-r-leader-analytics-data-science.html\"><strong>Python overtakes R, becomes the leader in Data Science, Machine Learning platforms</strong></a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 08 Sep 2017 00:00:00 -0800", "published_parsed": [2017, 9, 8, 8, 0, 0, 4, 251, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Behold: The Python 2 death clock", "itunes_episode": "42", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:23:52"}}, "#41 Python Concurrency From the Ground Up and Caring for our Community": {"info": {"title": "#41 Python Concurrency From the Ground Up and Caring for our Community", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#41 Python Concurrency From the Ground Up and Caring for our Community"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/41/python-concurrency-from-the-ground-up-and-caring-for-our-community"}, {"length": "15929832", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/41/python-concurrency-from-the-ground-up-and-caring-for-our-community.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/41/python-concurrency-from-the-ground-up-and-caring-for-our-community", "id": "https://pythonbytes.fm/episodes/e508cc53-3383-41e5-8a93-ea907e03dfc8", "guidislink": false, "summary": "<p>Brought to you by <strong>Rollbar</strong>! Create an account and get special credits at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p>Guest co-host: <a href=\"https://blog.miguelgrinberg.com\">Miguel Grinberg</a></p>\n\n<p><strong>Miguel #1:</strong> <a href=\"https://github.com/parrt/lolviz\"><strong>lolviz</strong></a></p>\n\n<ul>\n<li>Generates graphical representations of Python data structures using graphviz.</li>\n<li>Great as a teaching tool!</li>\n<li>Currently supports dicts, lists, lists of lists, linked lists and binary trees.</li>\n<li>Jupyter knows how to render these graphics. In regular Python it can also be used, but it is a bit cumbersome.</li>\n<li>I hope the project grows to support more complex data structures in the future!</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://odo.readthedocs.io/en/latest/overview.html\"><strong>Odo for data transforms</strong></a></p>\n\n<ul>\n<li>Odo migrates between many formats.</li>\n</ul>\n\n<pre><code>odo(df, list)  # create new list from Pandas DataFrame\nodo(df, [])  # append onto existing list\nodo(df, 'myfile.json')  # Dump dataframe to line-delimited JSON\nodo('myfiles.*.csv', Iterator) # Stream through many CSV files\nodo(df, 'postgresql://hostname::tablename')  # Migrate dataframe to Postgres\nodo('myfile.*.csv', 'postgresql://hostname::tablename')  # Load CSVs to Postgres\nodo('postgresql://hostname::tablename', 'myfile.json') # Dump Postgres to JSON\nodo('mongodb://hostname/db::collection', pd.DataFrame) # Dump Mongo to DataFrame\n</code></pre>\n\n<p><strong>Miguel #3:</strong> <a href=\"https://www.youtube.com/watch?v=MCs5OvhV9S4\"><strong>Python Concurrency From the Ground Up</strong></a></p>\n\n<ul>\n<li>This is probably my favorite tech talk of all times.</li>\n<li>There are no slides, the entire talk is a live coding session.</li>\n<li>David Beazley covers concurrency with threads and processes, and then goes on to build an asynchronous framework along the lines of asyncio just using generators, all in front of your eyes.</li>\n<li>If you spend 45 minutes watching this talk you\u2019ll end up with a much better understanding of Python concurrency.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://hackernoon.com/fat-python-the-next-chapter-in-python-optimization-69dc974bcca2\"><strong>FAT Python : the next chapter in Python optimization</strong></a></p>\n\n<ul>\n<li>via Anthony Shaw</li>\n<li>The FAT Python project was started by Victor Stinner in October 2015 to try to solve issues of previous attempts of \u201cstatic optimizers\u201d for Python.</li>\n<li>The PEPs\n<ul>\n<li>PEP 511 is a proposal to add a process to optimize an AST instance. The AST instance is a object-oriented representation of your code. </li>\n<li>A bespoke optimizer could look at a set of domain specific changes, e.g. NumPy or Pandas \u201canti-patterns\u201d and optimize them in the syntax tree. In replacement of a static linter that simply recommends changes, the optimizer could make those changes for you.</li>\n<li>PEP 509: Python is hard to optimize because almost everything is mutable: builtin functions, function code, global variables, local variables, \u2026 can be modified at runtime.</li>\n<li>The speedup of optimizations depends on the speed of guard checks. PEP 509 proposes to add a private version to dictionaries to implement fast guards on namespaces.</li>\n<li>PEP 510 proposes to add a public API to the Python C API to add specialized codes with guards to a function. When the function is called, a specialized code is used if nothing changed, otherwise use the original bytecode.</li>\n</ul></li>\n<li>Can download and compile this variation of CPython</li>\n<li>Basic function with a return is 24% improvement over 3.6 (and 46% faster than 2.7)</li>\n<li>Combining these 3 PEPs, we could see both implementation of guards as well as well as a range of optimizers out on PyPi.</li>\n</ul>\n\n<p><strong>Miguel #5:</strong> <a href=\"http://sshuttle.readthedocs.io/\"><strong>sshuttle</strong></a></p>\n\n<ul>\n<li>You probably know that there are security risks when going online at public wi-fi hotspots at coffee shops, hotels or airports.</li>\n<li>Most people don\u2019t realize this, but even if you access sites over https://, DNS queries made to connect to those sites are not encrypted, so they give away which sites you visit.</li>\n<li>sshuttle is fantastic tool (written in Python, BTW) that creates a secure tunnel between your machine and another machine (which can be in a secure location such as your home or office) and forwards all network traffic through that other system with strong encryption. A poor man\u2019s VPN!</li>\n<li>All you need to use sshuttle is SSH access to the secure system. No need to install anything on the remote system besides SSH!</li>\n<li>Simply run <strong>sshuttle --dns --r username@your-server 0.0.0.0/0</strong> and from then on all traffic will be tunneled to your secure server with strong encryption, including DNS queries!</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.theregister.co.uk/2017/08/24/nodejs_forks_ayo_code_of_conduct/\"><strong>Node.js forks again \u2013 this time it's a war of words over codes of conducts</strong></a></p>\n\n<ul>\n<li>After years of battling a string of systematic failures of governance and leadership, the Node.js community reached a breaking point.</li>\n<li>Monday saw a stream of resignations, one after the other throughout the day from Node.js' technical steering committee (TSC), a group that manages the day-to-day governance for the Node.js project.</li>\n<li>A third of the committee had quit their positions by the end of the day, including its first woman member.</li>\n<li>One person has left the project entirely.</li>\n<li>The resignations followed a single event -- a vote that failed to remove a former director, a longstanding member of the community, from the leadership group. Many of the complaints, since removed from the committee's pages, document a litany of violations of the community's code of conduct.</li>\n<li>The failure to have him removed from the position was seen as the embodiment of years of efforts to reform a pattern of harmful behaviors that was tearing the community apart.</li>\n<li>The inability for members of the TSC to \"look at the entire picture\" of a person's behavior rather than each broken rule is where trust in the system broke down, Kapke said.</li>\n<li>Moments after the failed leadership vote, Kat March\u00e1n pushed the button that created Ayo.js, a new open-source project forked from Node.js.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Miguel: </p>\n\n<ul>\n<li><a href=\"https://blog.miguelgrinberg.com\">Blog</a> </li>\n<li><a href=\"https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial\">The New and Improved Flask Mega-Tutorial</a></li>\n</ul>\n\n<p>Michael: </p>\n\n<ul>\n<li><a href=\"https://training.talkpython.fm/courses/explore_restful_pyramid_course/creating-a-restful-http-api-with-pyramid-and-python-mega-course\">RESTful and HTTP APIs in Pyramid</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Brought to you by <strong>Rollbar</strong>! Create an account and get special credits at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p>Guest co-host: <a href=\"https://blog.miguelgrinberg.com\">Miguel Grinberg</a></p>\n\n<p><strong>Miguel #1:</strong> <a href=\"https://github.com/parrt/lolviz\"><strong>lolviz</strong></a></p>\n\n<ul>\n<li>Generates graphical representations of Python data structures using graphviz.</li>\n<li>Great as a teaching tool!</li>\n<li>Currently supports dicts, lists, lists of lists, linked lists and binary trees.</li>\n<li>Jupyter knows how to render these graphics. In regular Python it can also be used, but it is a bit cumbersome.</li>\n<li>I hope the project grows to support more complex data structures in the future!</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://odo.readthedocs.io/en/latest/overview.html\"><strong>Odo for data transforms</strong></a></p>\n\n<ul>\n<li>Odo migrates between many formats.</li>\n</ul>\n\n<pre><code>odo(df, list)  # create new list from Pandas DataFrame\nodo(df, [])  # append onto existing list\nodo(df, 'myfile.json')  # Dump dataframe to line-delimited JSON\nodo('myfiles.*.csv', Iterator) # Stream through many CSV files\nodo(df, 'postgresql://hostname::tablename')  # Migrate dataframe to Postgres\nodo('myfile.*.csv', 'postgresql://hostname::tablename')  # Load CSVs to Postgres\nodo('postgresql://hostname::tablename', 'myfile.json') # Dump Postgres to JSON\nodo('mongodb://hostname/db::collection', pd.DataFrame) # Dump Mongo to DataFrame\n</code></pre>\n\n<p><strong>Miguel #3:</strong> <a href=\"https://www.youtube.com/watch?v=MCs5OvhV9S4\"><strong>Python Concurrency From the Ground Up</strong></a></p>\n\n<ul>\n<li>This is probably my favorite tech talk of all times.</li>\n<li>There are no slides, the entire talk is a live coding session.</li>\n<li>David Beazley covers concurrency with threads and processes, and then goes on to build an asynchronous framework along the lines of asyncio just using generators, all in front of your eyes.</li>\n<li>If you spend 45 minutes watching this talk you\u2019ll end up with a much better understanding of Python concurrency.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://hackernoon.com/fat-python-the-next-chapter-in-python-optimization-69dc974bcca2\"><strong>FAT Python : the next chapter in Python optimization</strong></a></p>\n\n<ul>\n<li>via Anthony Shaw</li>\n<li>The FAT Python project was started by Victor Stinner in October 2015 to try to solve issues of previous attempts of \u201cstatic optimizers\u201d for Python.</li>\n<li>The PEPs\n<ul>\n<li>PEP 511 is a proposal to add a process to optimize an AST instance. The AST instance is a object-oriented representation of your code. </li>\n<li>A bespoke optimizer could look at a set of domain specific changes, e.g. NumPy or Pandas \u201canti-patterns\u201d and optimize them in the syntax tree. In replacement of a static linter that simply recommends changes, the optimizer could make those changes for you.</li>\n<li>PEP 509: Python is hard to optimize because almost everything is mutable: builtin functions, function code, global variables, local variables, \u2026 can be modified at runtime.</li>\n<li>The speedup of optimizations depends on the speed of guard checks. PEP 509 proposes to add a private version to dictionaries to implement fast guards on namespaces.</li>\n<li>PEP 510 proposes to add a public API to the Python C API to add specialized codes with guards to a function. When the function is called, a specialized code is used if nothing changed, otherwise use the original bytecode.</li>\n</ul></li>\n<li>Can download and compile this variation of CPython</li>\n<li>Basic function with a return is 24% improvement over 3.6 (and 46% faster than 2.7)</li>\n<li>Combining these 3 PEPs, we could see both implementation of guards as well as well as a range of optimizers out on PyPi.</li>\n</ul>\n\n<p><strong>Miguel #5:</strong> <a href=\"http://sshuttle.readthedocs.io/\"><strong>sshuttle</strong></a></p>\n\n<ul>\n<li>You probably know that there are security risks when going online at public wi-fi hotspots at coffee shops, hotels or airports.</li>\n<li>Most people don\u2019t realize this, but even if you access sites over https://, DNS queries made to connect to those sites are not encrypted, so they give away which sites you visit.</li>\n<li>sshuttle is fantastic tool (written in Python, BTW) that creates a secure tunnel between your machine and another machine (which can be in a secure location such as your home or office) and forwards all network traffic through that other system with strong encryption. A poor man\u2019s VPN!</li>\n<li>All you need to use sshuttle is SSH access to the secure system. No need to install anything on the remote system besides SSH!</li>\n<li>Simply run <strong>sshuttle --dns --r username@your-server 0.0.0.0/0</strong> and from then on all traffic will be tunneled to your secure server with strong encryption, including DNS queries!</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.theregister.co.uk/2017/08/24/nodejs_forks_ayo_code_of_conduct/\"><strong>Node.js forks again \u2013 this time it's a war of words over codes of conducts</strong></a></p>\n\n<ul>\n<li>After years of battling a string of systematic failures of governance and leadership, the Node.js community reached a breaking point.</li>\n<li>Monday saw a stream of resignations, one after the other throughout the day from Node.js' technical steering committee (TSC), a group that manages the day-to-day governance for the Node.js project.</li>\n<li>A third of the committee had quit their positions by the end of the day, including its first woman member.</li>\n<li>One person has left the project entirely.</li>\n<li>The resignations followed a single event -- a vote that failed to remove a former director, a longstanding member of the community, from the leadership group. Many of the complaints, since removed from the committee's pages, document a litany of violations of the community's code of conduct.</li>\n<li>The failure to have him removed from the position was seen as the embodiment of years of efforts to reform a pattern of harmful behaviors that was tearing the community apart.</li>\n<li>The inability for members of the TSC to \"look at the entire picture\" of a person's behavior rather than each broken rule is where trust in the system broke down, Kapke said.</li>\n<li>Moments after the failed leadership vote, Kat March\u00e1n pushed the button that created Ayo.js, a new open-source project forked from Node.js.</li>\n</ul>\n\n<p><strong>Our news</strong></p>\n\n<p>Miguel: </p>\n\n<ul>\n<li><a href=\"https://blog.miguelgrinberg.com\">Blog</a> </li>\n<li><a href=\"https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial\">The New and Improved Flask Mega-Tutorial</a></li>\n</ul>\n\n<p>Michael: </p>\n\n<ul>\n<li><a href=\"https://training.talkpython.fm/courses/explore_restful_pyramid_course/creating-a-restful-http-api-with-pyramid-and-python-mega-course\">RESTful and HTTP APIs in Pyramid</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 31 Aug 2017 00:00:00 -0800", "published_parsed": [2017, 8, 31, 8, 0, 0, 3, 243, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python Concurrency From the Ground Up and Caring for our Community", "itunes_episode": "41", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:23:21"}}, "#40 Packet Manipulation with Scapy": {"info": {"title": "#40 Packet Manipulation with Scapy", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#40 Packet Manipulation with Scapy"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/40/packet-manipulation-with-scapy"}, {"length": "16862391", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/40/packet-manipulation-with-scapy.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/40/packet-manipulation-with-scapy", "id": "https://pythonbytes.fm/episodes/230368b0-c438-466a-a10f-7a5813dc17a7", "guidislink": false, "summary": "<p>We have guest hosts filling in for  Michael while he is on vacation.  This week we have <a href=\"https://twitter.com/ericchou\">Eric Chou</a>, author of the book \u201cMastering Python Networking\u201d and a self-proclaimed Network Automation Nerd. </p>\n\n<p><strong>Eric #1:</strong> <a href=\"https://www.ansible.com/\"><strong>DevOps Automation Tool: Ansible</strong></a></p>\n\n<ul>\n<li>DevOps Automation framework written in Python, code hosted on <a href=\"https://github.com/ansible/ansible\">GitHub</a>.</li>\n<li><a href=\"https://opensource.com/business/14/12/top-10-open-source-projects-2014\">Top 10 OpenSource projects in 2014 by OpenSource.com</a>, along with Docker, Kubernetes, Apache Hadoop, OpenStack, and OpenDaylight, etc. </li>\n<li>Excellent <a href=\"http://docs.ansible.com/ansible/latest/index.html\">documentation</a> for all modules. </li>\n<li>Agentless, \u2018networking vendor\u2019 friendly, execute code locally that interacts with the device via SSH and API. </li>\n<li><a href=\"http://docs.ansible.com/ansible/latest/list_of_network_modules.html\">Lots of Network modules</a>, including Cisco, Juniper, Arista, etc. In fact, you can find Cisco and Juniper testimonial on the Ansible site.  </li>\n<li>Easy to learn and extend if you already know a little bit about Python, YAML, and Jinja2. </li>\n</ul>\n\n<p><strong>Brian #2:</strong> <a href=\"https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65\"><strong>Python Practices for Efficient Code: Performance, Memory, and Usability</strong></a></p>\n\n<p>(I\u2019m too opinionated to leave out my thoughts when covering this article, even though it\u2019s very well written and I mean no disrespect to Satwik Kansal)</p>\n\n<ol>\n<li>Try not to blow off memory\n<ul>\n<li>use generators to calculate large sets of results</li>\n<li>for big number crunching, use <a href=\"http://www.numpy.org/\">numpy</a></li>\n<li>Use format instead of + for large strings. (or f-strings - Brian)</li>\n<li>Use slots for classes (psshh, use attrs - Brian)</li>\n</ul></li>\n<li>Python 2 or 3\n<ul>\n<li>Write code compatible with both. (disagree, use 3 unless you can\u2019t for a very good reason, then write code that\u2019s easy to convert to 3 later. - Brian)</li>\n</ul></li>\n<li>Write Beautiful code because \u201cThe first impression is the last impression.\"\n<ul>\n<li>follow style guides</li>\n<li>use static analysis tools. Recommended using something called coala that\u2019s installed as \u201ccoala-bears.</li>\n<li>(Brian: Maintenance cost is a real thing. Make your code look good because it\u2019s cheaper in the long run. Use pycodestyle, pydocstyle, flake8, and if using sublime, use <a href=\"https://github.com/dreadatour/Flake8Lint\">Flake8Lint</a>) </li>\n</ul></li>\n<li>Speed up your performance\n<ul>\n<li>Multiprocess, not Multi-thread</li>\n</ul></li>\n<li>Analyzing your code\n<ul>\n<li>Use cProfile, memory_profiler, objgraph, resource</li>\n</ul></li>\n<li>Testing and CI\n<ul>\n<li>nose or pytest  or doctest</li>\n<li>(Brian: BTW, I really appreciate the links to pythontesting.net for tutorials on these.)</li>\n<li>(Brian: No. Use pytest)</li>\n<li>measure coverage and and try for 100%</li>\n<li>(Brian: No. use coverage to be alerted of sudden changes, and of code that possibly needs more testing and/or deleted)</li>\n</ul></li>\n</ol>\n\n<p><strong>Eric #3:</strong> <a href=\"http://www.secdev.org/projects/scapy/\"><strong>Packet Manipulation Program: Scapy</strong></a></p>\n\n<ul>\n<li>Free Python-based interactive packet manipulation program and library, <a href=\"https://github.com/secdev/scapy\">GitHub</a>. </li>\n<li>Craft the packet from the ground up, you can use it to decode packets or craft packets. </li>\n<li>You are in control instead of limited to what the creator of the tool can imagine, i.e. hping3, curl. </li>\n<li><a href=\"http://www.secdev.org/projects/scapy/demo.html\">Can be used together with the Python interpreter</a>. </li>\n<li>Particularly useful for network security\n<ul>\n<li>Crafting common attacks: malformed packets (such as IP version 3), Ping of Death (large paylaod), Land Attack (redirect the client response back to the client itself) for denial-of-service. </li>\n<li>Penetration Testing (TCP port scan) and Fuzzing by providing invalid, unexpected, or random data.  </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://blog.miguelgrinberg.com/post/using-headless-chrome-with-selenium\"><strong>Using Headless Chrome with Selenium</strong></a></p>\n\n<ul>\n<li>Miguel Grinberg quick demo of using headless chrome with selenium and unittest.</li>\n<li>(Brian: Eventually I\u2019ll get Miguel to use pytest more.)</li>\n<li>Replace the normal Firefox with Chrome in the webdriver of Selenium, and passing a \u2018headless\u2019 argument to make it so the window doesn\u2019t keep popping up and down when testing.</li>\n</ul>\n\n<p><strong>Eric</strong> <strong>#5:</strong> <a href=\"http://www.graphviz.org/\"><strong>Graph Visualization with Graphviz</strong></a></p>\n\n<ul>\n<li>Open Source graph visualization software.  </li>\n<li>Perfect for graphing the large datacenter topology automatically or any other network diagrams. </li>\n<li>Extensive <a href=\"http://www.graphviz.org/Documentation.php\">documentation</a> and <a href=\"http://www.graphviz.org/Gallery.php\">gallery of examples</a>.  </li>\n<li>Did I mention this is \u2018automatible\u2019? Thus avoid drifts between reality and actual network. </li>\n<li>Python package <a href=\"https://pypi.python.org/pypi/graphviz\">graphviz</a> (lower case g) for Graphviz integration. </li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong> <a href=\"https://www.pycascades.com/speakers/\"><strong>PyCascades CFP still open until the 28th</strong></a></p>\n\n<ul>\n<li>Python conference in Vancouver, BC.</li>\n<li>Talks Jan 22, 23, Sprints Jan 24th</li>\n<li>Speakers get free admission. Talks are all 25 min slots. No Q&amp;A after talks in front of full audience, but speakers will hang out up front for a few minutes for individual questions</li>\n<li>I\u2019m going to submit at least one proposal. But I\u2019m kinda swamped this week, so the proposal will unfortunately be rushed.</li>\n</ul>\n\n<p><strong>Extra Eric:</strong></p>\n\n<ul>\n<li><a href=\"https://www.amazon.com/gp/product/1784397008/ref=as_li_ss_il?ie=UTF8&amp;fpl=fresh&amp;pd_rd_i=1784397008&amp;pd_rd_r=BQZKFJ3QVF5A5T1ANVZ0&amp;pd_rd_w=B4iFp&amp;pd_rd_wg=7ypBL&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=desktop-1&amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;pf_rd_t=36701&amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;pf_rd_i=desktop&amp;linkCode=li3&amp;tag=pythfornetwen-20&amp;linkId=352f479d902e9d968e5d1832619de63e\">Mastering Python Networking</a> book </li>\n<li>Network Labs: <a href=\"https://learningnetworkstore.cisco.com/virtual-internet-routing-lab-virl/cisco-personal-edition-pe-20-nodes-virl-20\">Cisco Virtual Internet Routing Lab (VIRL)</a>, <a href=\"https://developer.cisco.com/site/devnet/home/index.gsp\">Cisco DevNet</a>, <a href=\"https://www.gns3.com/\">GNS3 (Graphic Network Simulator)</a>. </li>\n</ul>\n\n<p><strong>Extra Brian:</strong></p>\n\n<ul>\n<li>Copy editing and final testing with most recent Python and pytest done for <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>We have guest hosts filling in for  Michael while he is on vacation.  This week we have <a href=\"https://twitter.com/ericchou\">Eric Chou</a>, author of the book \u201cMastering Python Networking\u201d and a self-proclaimed Network Automation Nerd. </p>\n\n<p><strong>Eric #1:</strong> <a href=\"https://www.ansible.com/\"><strong>DevOps Automation Tool: Ansible</strong></a></p>\n\n<ul>\n<li>DevOps Automation framework written in Python, code hosted on <a href=\"https://github.com/ansible/ansible\">GitHub</a>.</li>\n<li><a href=\"https://opensource.com/business/14/12/top-10-open-source-projects-2014\">Top 10 OpenSource projects in 2014 by OpenSource.com</a>, along with Docker, Kubernetes, Apache Hadoop, OpenStack, and OpenDaylight, etc. </li>\n<li>Excellent <a href=\"http://docs.ansible.com/ansible/latest/index.html\">documentation</a> for all modules. </li>\n<li>Agentless, \u2018networking vendor\u2019 friendly, execute code locally that interacts with the device via SSH and API. </li>\n<li><a href=\"http://docs.ansible.com/ansible/latest/list_of_network_modules.html\">Lots of Network modules</a>, including Cisco, Juniper, Arista, etc. In fact, you can find Cisco and Juniper testimonial on the Ansible site.  </li>\n<li>Easy to learn and extend if you already know a little bit about Python, YAML, and Jinja2. </li>\n</ul>\n\n<p><strong>Brian #2:</strong> <a href=\"https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65\"><strong>Python Practices for Efficient Code: Performance, Memory, and Usability</strong></a></p>\n\n<p>(I\u2019m too opinionated to leave out my thoughts when covering this article, even though it\u2019s very well written and I mean no disrespect to Satwik Kansal)</p>\n\n<ol>\n<li>Try not to blow off memory\n<ul>\n<li>use generators to calculate large sets of results</li>\n<li>for big number crunching, use <a href=\"http://www.numpy.org/\">numpy</a></li>\n<li>Use format instead of + for large strings. (or f-strings - Brian)</li>\n<li>Use slots for classes (psshh, use attrs - Brian)</li>\n</ul></li>\n<li>Python 2 or 3\n<ul>\n<li>Write code compatible with both. (disagree, use 3 unless you can\u2019t for a very good reason, then write code that\u2019s easy to convert to 3 later. - Brian)</li>\n</ul></li>\n<li>Write Beautiful code because \u201cThe first impression is the last impression.\"\n<ul>\n<li>follow style guides</li>\n<li>use static analysis tools. Recommended using something called coala that\u2019s installed as \u201ccoala-bears.</li>\n<li>(Brian: Maintenance cost is a real thing. Make your code look good because it\u2019s cheaper in the long run. Use pycodestyle, pydocstyle, flake8, and if using sublime, use <a href=\"https://github.com/dreadatour/Flake8Lint\">Flake8Lint</a>) </li>\n</ul></li>\n<li>Speed up your performance\n<ul>\n<li>Multiprocess, not Multi-thread</li>\n</ul></li>\n<li>Analyzing your code\n<ul>\n<li>Use cProfile, memory_profiler, objgraph, resource</li>\n</ul></li>\n<li>Testing and CI\n<ul>\n<li>nose or pytest  or doctest</li>\n<li>(Brian: BTW, I really appreciate the links to pythontesting.net for tutorials on these.)</li>\n<li>(Brian: No. Use pytest)</li>\n<li>measure coverage and and try for 100%</li>\n<li>(Brian: No. use coverage to be alerted of sudden changes, and of code that possibly needs more testing and/or deleted)</li>\n</ul></li>\n</ol>\n\n<p><strong>Eric #3:</strong> <a href=\"http://www.secdev.org/projects/scapy/\"><strong>Packet Manipulation Program: Scapy</strong></a></p>\n\n<ul>\n<li>Free Python-based interactive packet manipulation program and library, <a href=\"https://github.com/secdev/scapy\">GitHub</a>. </li>\n<li>Craft the packet from the ground up, you can use it to decode packets or craft packets. </li>\n<li>You are in control instead of limited to what the creator of the tool can imagine, i.e. hping3, curl. </li>\n<li><a href=\"http://www.secdev.org/projects/scapy/demo.html\">Can be used together with the Python interpreter</a>. </li>\n<li>Particularly useful for network security\n<ul>\n<li>Crafting common attacks: malformed packets (such as IP version 3), Ping of Death (large paylaod), Land Attack (redirect the client response back to the client itself) for denial-of-service. </li>\n<li>Penetration Testing (TCP port scan) and Fuzzing by providing invalid, unexpected, or random data.  </li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://blog.miguelgrinberg.com/post/using-headless-chrome-with-selenium\"><strong>Using Headless Chrome with Selenium</strong></a></p>\n\n<ul>\n<li>Miguel Grinberg quick demo of using headless chrome with selenium and unittest.</li>\n<li>(Brian: Eventually I\u2019ll get Miguel to use pytest more.)</li>\n<li>Replace the normal Firefox with Chrome in the webdriver of Selenium, and passing a \u2018headless\u2019 argument to make it so the window doesn\u2019t keep popping up and down when testing.</li>\n</ul>\n\n<p><strong>Eric</strong> <strong>#5:</strong> <a href=\"http://www.graphviz.org/\"><strong>Graph Visualization with Graphviz</strong></a></p>\n\n<ul>\n<li>Open Source graph visualization software.  </li>\n<li>Perfect for graphing the large datacenter topology automatically or any other network diagrams. </li>\n<li>Extensive <a href=\"http://www.graphviz.org/Documentation.php\">documentation</a> and <a href=\"http://www.graphviz.org/Gallery.php\">gallery of examples</a>.  </li>\n<li>Did I mention this is \u2018automatible\u2019? Thus avoid drifts between reality and actual network. </li>\n<li>Python package <a href=\"https://pypi.python.org/pypi/graphviz\">graphviz</a> (lower case g) for Graphviz integration. </li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong> <a href=\"https://www.pycascades.com/speakers/\"><strong>PyCascades CFP still open until the 28th</strong></a></p>\n\n<ul>\n<li>Python conference in Vancouver, BC.</li>\n<li>Talks Jan 22, 23, Sprints Jan 24th</li>\n<li>Speakers get free admission. Talks are all 25 min slots. No Q&amp;A after talks in front of full audience, but speakers will hang out up front for a few minutes for individual questions</li>\n<li>I\u2019m going to submit at least one proposal. But I\u2019m kinda swamped this week, so the proposal will unfortunately be rushed.</li>\n</ul>\n\n<p><strong>Extra Eric:</strong></p>\n\n<ul>\n<li><a href=\"https://www.amazon.com/gp/product/1784397008/ref=as_li_ss_il?ie=UTF8&amp;fpl=fresh&amp;pd_rd_i=1784397008&amp;pd_rd_r=BQZKFJ3QVF5A5T1ANVZ0&amp;pd_rd_w=B4iFp&amp;pd_rd_wg=7ypBL&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_s=desktop-1&amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;pf_rd_t=36701&amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;pf_rd_i=desktop&amp;linkCode=li3&amp;tag=pythfornetwen-20&amp;linkId=352f479d902e9d968e5d1832619de63e\">Mastering Python Networking</a> book </li>\n<li>Network Labs: <a href=\"https://learningnetworkstore.cisco.com/virtual-internet-routing-lab-virl/cisco-personal-edition-pe-20-nodes-virl-20\">Cisco Virtual Internet Routing Lab (VIRL)</a>, <a href=\"https://developer.cisco.com/site/devnet/home/index.gsp\">Cisco DevNet</a>, <a href=\"https://www.gns3.com/\">GNS3 (Graphic Network Simulator)</a>. </li>\n</ul>\n\n<p><strong>Extra Brian:</strong></p>\n\n<ul>\n<li>Copy editing and final testing with most recent Python and pytest done for <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 24 Aug 2017 00:00:00 -0800", "published_parsed": [2017, 8, 24, 8, 0, 0, 3, 236, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Packet Manipulation with Scapy", "itunes_episode": "40", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:59"}}, "#39 The new PyPI": {"info": {"title": "#39 The new PyPI", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#39 The new PyPI"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/39/the-new-pypi"}, {"length": "30894662", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/39/the-new-pypi.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/39/the-new-pypi", "id": "https://pythonbytes.fm/episodes/b7f00e66-cdd9-41e2-87ae-8b95dc0b6a56", "guidislink": false, "summary": "<p><strong>Mahmoud #1:</strong> <a href=\"https://pypi.org/\"><strong>The New PyPI</strong></a></p>\n\n<ul>\n<li>Donald Stufft and his PyPA team have been hard at work replacing the old pypi.python.org</li>\n<li>The new site is now handling almost all the old functionality (excepting deprecated features, of course): <a href=\"https://pypi.org/\">https://pypi.org/</a></li>\n<li>The new site has handled downloads (presently exceeding 1PB monthly bandwidth) for a while now, and uploads as of recently.</li>\n<li>A nice full-fledged, open-source Python application, eagerly awaiting your review and contribution: <a href=\"https://github.com/pypa/warehouse/\">https://github.com/pypa/warehouse/</a></li>\n<li>More updates at: <a href=\"https://mail.python.org/pipermail/distutils-sig/\">https://mail.python.org/pipermail/distutils-sig/</a></li>\n</ul>\n\n<p><strong>Brian #2:</strong> <a href=\"http://makezine.com/2017/08/11/circuitpython-snakes-way-adafruit-hardware/\"><strong>CircuitPython Snakes its Way onto Adafruit Hardware</strong></a></p>\n\n<ul>\n<li><a href=\"https://blog.adafruit.com/2017/01/09/welcome-to-the-adafruit-circuitpython-beta/\">Adafruit announced CircuitPython in January</a>\n<ul>\n<li>\u201cCircuitPython is based on the <a href=\"https://github.com/micropython/micropython\">open-source</a> <a href=\"https://micropython.org/\">MicroPython</a> which brings the popular Python language to microcontrollers. The goal of CircuitPython is to make hardware as simple and easy as possible.\u201d</li>\n<li>Already runs on <a href=\"https://www.adafruit.com/product/3505\">Metro M0 Express</a>, <a href=\"https://www.adafruit.com/product/3403\">Feather M0 Express</a>, and they are working on support for <a href=\"https://www.adafruit.com/product/3333\">Circuit Playground Express</a>, and now Gemma M0</li>\n</ul></li>\n<li>New product is <a href=\"https://www.adafruit.com/product/3501\">Gemma M0</a>:\n<ul>\n<li><a href=\"https://blog.adafruit.com/2017/07/27/new-product-adafruit-gemma-m0-miniature-wearable-electronic-platform/\">Announced</a> at the end of July.</li>\n<li>It\u2019s about the size of a quarter and is considered a wearable computer.</li>\n<li>\u201cWhen you plug it in, it will show up as a very small disk drive with <strong>main.py</strong> on it. Edit <strong>main.py</strong> with your favorite text editor to build your project using Python, the most popular programming language. No installs, IDE or compiler needed, so you can use it on any computer, even ChromeBooks or computers you can\u2019t install software on. When you\u2019re done, unplug the Gemma M0 and your code will go with you.\"</li>\n<li>They\u2019re under $10. I gotta get one of these and play with it. (Anyone from Adafruit listening, want to send me one?)</li>\n<li>Here's the intro video for it: <a href=\"https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;feature=youtu.be\">https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;feature=youtu.be</a></li>\n</ul></li>\n<li><a href=\"https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library\">Creating and sharing a CircuitPython Library</a> is a good introduction to the Python open source community, including:\n<ul>\n<li>Creating a library (package or module)</li>\n<li>Sharing on GitHub</li>\n<li>Sharing docs on ReadTheDocs</li>\n<li>Testing with Travis CI</li>\n<li>Releasing on GitHub</li>\n</ul></li>\n</ul>\n\n<p><strong>Mahmoud #3:</strong> <strong>Dataclasses</strong></p>\n\n<ul>\n<li>Python has had classes for a long time, but maybe it\u2019s time for some updated syntax and semantics, something higher level perhaps?</li>\n<li>dataclasses is an interesting case of Python\u2019s core dev doing their own take on community innovation (Hynek\u2019s attrs: https://attrs.org)</li>\n<li>Code, issues, and draft PEP at https://github.com/ericvsmith/dataclasses</li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"http://kanoki.org/2017/07/16/pandas-in-a-nutshell/\"><strong>Pandas in a Nutshell</strong></a></p>\n\n<ul>\n<li>Jupyter Notebook style post. Tutorial by example with just a bit of extra text for explanation.</li>\n<li>Data structures:\n<ul>\n<li>Series \u2013 it\u2019s a one dimensional array with indexes, it stores a single column or row of data in a Dataframe</li>\n<li>Dataframe \u2013 it\u2019s a tabular spreadsheet like structure representing rows each of which contains one or multiple columns</li>\n</ul></li>\n<li>Series: Custom indices, adding two series, naming series, \u2026</li>\n<li>Dataframes: using .head() and .tail(), info(), adding columns, adding a column as a calculation of another column, deleting a column, creating a dataframe from a dictionary, reindexing, summing columns and rows, .describe() for simple statistics, corr() for correlations, dealing with missing values, dropping rows, selecting, sorting, multi-indexing, grouping, </li>\n</ul>\n\n<p><strong>Mahmoud</strong> <strong>#5:</strong> <strong>Static Typing</strong></p>\n\n<ul>\n<li>PyBay 2017, which ended a day before recording, featured a neat panel on static typing in Python.</li>\n<li>One member each from Google, Quora, PyCharm, Facebook, and University of California</li>\n<li>Three different static analysis tools (four, if you count PyLint)</li>\n<li>They\u2019re all collaborating already, and open to much more, as we can see on this collection of the stdlib\u2019s type defs: <a href=\"https://github.com/python/typeshed\">https://github.com/python/typeshed</a></li>\n<li>A fair degree of consensus around static types being most useful for testable documentation, like doctests, but with more systemic implications</li>\n<li>Not intended to be an algebraic type system (like Haskell, etc.)</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong>  <a href=\"https://www.fullstackpython.com/object-relational-mappers-orms.html\"><strong>Full Stack Python Explains ORMs</strong></a></p>\n\n<ul>\n<li>What are Object Relational Mappers?\n<ul>\n<li>\u201cAn object-relational mapper (ORM) is a code library that automates the transfer of data stored in relational databases tables into objects that are more commonly used in application code.\u201d</li>\n</ul></li>\n<li>Why are they useful?\n<ul>\n<li>\u201cORMs provide a high-level abstraction upon a relational database that allows a developer to write Python code instead of SQL to create, read, update and delete data and schemas in their database.\u201d</li>\n</ul></li>\n<li>Do you need to use them?</li>\n<li>Downsides to ORMs:\n<ul>\n<li>Impedance mismatch : \u201cthe way a developer uses objects is different from how data is stored and joined in relational tables\u201d</li>\n<li>Potential for reduced performance: code in the middle isn\u2019t free</li>\n<li>Shifting complexity from the database into the application code : people usually don\u2019t use database stored procedures when working with ORMs.</li>\n</ul></li>\n<li>A handful of popular ones including Django ORM, SQLAlchemy, Peewee, Pony, and SQLObject. Mostly listed as pointing out that they are active projects, brief description, and links for more info.</li>\n<li>Matt also has a <a href=\"https://www.fullstackpython.com/sqlalchemy.html\">SQLAlchemy page</a> and a <a href=\"https://www.fullstackpython.com/peewee.html\">peewee page</a> for more info on them.</li>\n</ul>\n\n<p><strong>Extra Mahmoud:</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/python-hyper/hyperlink\">hyperlink</a></li>\n<li><a href=\"https://riot.im\">riot.im</a> + <a href=\"https://riot.im\"></a><a href=\"https://github.com/matrix-org/synapse\">(server code in Python)</a></li>\n</ul>\n\n<p><strong>Extra Brian:</strong></p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> has a <a href=\"https://forums.pragprog.com/forums/438\">Discussion Forum</a>. It\u2019s something that I think all Pragmatic books have. Just this morning I answered a question about the difference between monkeypatch and mock and when you would use one over the other.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Mahmoud #1:</strong> <a href=\"https://pypi.org/\"><strong>The New PyPI</strong></a></p>\n\n<ul>\n<li>Donald Stufft and his PyPA team have been hard at work replacing the old pypi.python.org</li>\n<li>The new site is now handling almost all the old functionality (excepting deprecated features, of course): <a href=\"https://pypi.org/\">https://pypi.org/</a></li>\n<li>The new site has handled downloads (presently exceeding 1PB monthly bandwidth) for a while now, and uploads as of recently.</li>\n<li>A nice full-fledged, open-source Python application, eagerly awaiting your review and contribution: <a href=\"https://github.com/pypa/warehouse/\">https://github.com/pypa/warehouse/</a></li>\n<li>More updates at: <a href=\"https://mail.python.org/pipermail/distutils-sig/\">https://mail.python.org/pipermail/distutils-sig/</a></li>\n</ul>\n\n<p><strong>Brian #2:</strong> <a href=\"http://makezine.com/2017/08/11/circuitpython-snakes-way-adafruit-hardware/\"><strong>CircuitPython Snakes its Way onto Adafruit Hardware</strong></a></p>\n\n<ul>\n<li><a href=\"https://blog.adafruit.com/2017/01/09/welcome-to-the-adafruit-circuitpython-beta/\">Adafruit announced CircuitPython in January</a>\n<ul>\n<li>\u201cCircuitPython is based on the <a href=\"https://github.com/micropython/micropython\">open-source</a> <a href=\"https://micropython.org/\">MicroPython</a> which brings the popular Python language to microcontrollers. The goal of CircuitPython is to make hardware as simple and easy as possible.\u201d</li>\n<li>Already runs on <a href=\"https://www.adafruit.com/product/3505\">Metro M0 Express</a>, <a href=\"https://www.adafruit.com/product/3403\">Feather M0 Express</a>, and they are working on support for <a href=\"https://www.adafruit.com/product/3333\">Circuit Playground Express</a>, and now Gemma M0</li>\n</ul></li>\n<li>New product is <a href=\"https://www.adafruit.com/product/3501\">Gemma M0</a>:\n<ul>\n<li><a href=\"https://blog.adafruit.com/2017/07/27/new-product-adafruit-gemma-m0-miniature-wearable-electronic-platform/\">Announced</a> at the end of July.</li>\n<li>It\u2019s about the size of a quarter and is considered a wearable computer.</li>\n<li>\u201cWhen you plug it in, it will show up as a very small disk drive with <strong>main.py</strong> on it. Edit <strong>main.py</strong> with your favorite text editor to build your project using Python, the most popular programming language. No installs, IDE or compiler needed, so you can use it on any computer, even ChromeBooks or computers you can\u2019t install software on. When you\u2019re done, unplug the Gemma M0 and your code will go with you.\"</li>\n<li>They\u2019re under $10. I gotta get one of these and play with it. (Anyone from Adafruit listening, want to send me one?)</li>\n<li>Here's the intro video for it: <a href=\"https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;feature=youtu.be\">https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;feature=youtu.be</a></li>\n</ul></li>\n<li><a href=\"https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library\">Creating and sharing a CircuitPython Library</a> is a good introduction to the Python open source community, including:\n<ul>\n<li>Creating a library (package or module)</li>\n<li>Sharing on GitHub</li>\n<li>Sharing docs on ReadTheDocs</li>\n<li>Testing with Travis CI</li>\n<li>Releasing on GitHub</li>\n</ul></li>\n</ul>\n\n<p><strong>Mahmoud #3:</strong> <strong>Dataclasses</strong></p>\n\n<ul>\n<li>Python has had classes for a long time, but maybe it\u2019s time for some updated syntax and semantics, something higher level perhaps?</li>\n<li>dataclasses is an interesting case of Python\u2019s core dev doing their own take on community innovation (Hynek\u2019s attrs: https://attrs.org)</li>\n<li>Code, issues, and draft PEP at https://github.com/ericvsmith/dataclasses</li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"http://kanoki.org/2017/07/16/pandas-in-a-nutshell/\"><strong>Pandas in a Nutshell</strong></a></p>\n\n<ul>\n<li>Jupyter Notebook style post. Tutorial by example with just a bit of extra text for explanation.</li>\n<li>Data structures:\n<ul>\n<li>Series \u2013 it\u2019s a one dimensional array with indexes, it stores a single column or row of data in a Dataframe</li>\n<li>Dataframe \u2013 it\u2019s a tabular spreadsheet like structure representing rows each of which contains one or multiple columns</li>\n</ul></li>\n<li>Series: Custom indices, adding two series, naming series, \u2026</li>\n<li>Dataframes: using .head() and .tail(), info(), adding columns, adding a column as a calculation of another column, deleting a column, creating a dataframe from a dictionary, reindexing, summing columns and rows, .describe() for simple statistics, corr() for correlations, dealing with missing values, dropping rows, selecting, sorting, multi-indexing, grouping, </li>\n</ul>\n\n<p><strong>Mahmoud</strong> <strong>#5:</strong> <strong>Static Typing</strong></p>\n\n<ul>\n<li>PyBay 2017, which ended a day before recording, featured a neat panel on static typing in Python.</li>\n<li>One member each from Google, Quora, PyCharm, Facebook, and University of California</li>\n<li>Three different static analysis tools (four, if you count PyLint)</li>\n<li>They\u2019re all collaborating already, and open to much more, as we can see on this collection of the stdlib\u2019s type defs: <a href=\"https://github.com/python/typeshed\">https://github.com/python/typeshed</a></li>\n<li>A fair degree of consensus around static types being most useful for testable documentation, like doctests, but with more systemic implications</li>\n<li>Not intended to be an algebraic type system (like Haskell, etc.)</li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong>  <a href=\"https://www.fullstackpython.com/object-relational-mappers-orms.html\"><strong>Full Stack Python Explains ORMs</strong></a></p>\n\n<ul>\n<li>What are Object Relational Mappers?\n<ul>\n<li>\u201cAn object-relational mapper (ORM) is a code library that automates the transfer of data stored in relational databases tables into objects that are more commonly used in application code.\u201d</li>\n</ul></li>\n<li>Why are they useful?\n<ul>\n<li>\u201cORMs provide a high-level abstraction upon a relational database that allows a developer to write Python code instead of SQL to create, read, update and delete data and schemas in their database.\u201d</li>\n</ul></li>\n<li>Do you need to use them?</li>\n<li>Downsides to ORMs:\n<ul>\n<li>Impedance mismatch : \u201cthe way a developer uses objects is different from how data is stored and joined in relational tables\u201d</li>\n<li>Potential for reduced performance: code in the middle isn\u2019t free</li>\n<li>Shifting complexity from the database into the application code : people usually don\u2019t use database stored procedures when working with ORMs.</li>\n</ul></li>\n<li>A handful of popular ones including Django ORM, SQLAlchemy, Peewee, Pony, and SQLObject. Mostly listed as pointing out that they are active projects, brief description, and links for more info.</li>\n<li>Matt also has a <a href=\"https://www.fullstackpython.com/sqlalchemy.html\">SQLAlchemy page</a> and a <a href=\"https://www.fullstackpython.com/peewee.html\">peewee page</a> for more info on them.</li>\n</ul>\n\n<p><strong>Extra Mahmoud:</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/python-hyper/hyperlink\">hyperlink</a></li>\n<li><a href=\"https://riot.im\">riot.im</a> + <a href=\"https://riot.im\"></a><a href=\"https://github.com/matrix-org/synapse\">(server code in Python)</a></li>\n</ul>\n\n<p><strong>Extra Brian:</strong></p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> has a <a href=\"https://forums.pragprog.com/forums/438\">Discussion Forum</a>. It\u2019s something that I think all Pragmatic books have. Just this morning I answered a question about the difference between monkeypatch and mock and when you would use one over the other.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 17 Aug 2017 00:00:00 -0800", "published_parsed": [2017, 8, 17, 8, 0, 0, 3, 229, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The new PyPI", "itunes_episode": "39", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:43:06"}}, "#38 Hacking Classic Nintendo Games with Python": {"info": {"title": "#38 Hacking Classic Nintendo Games with Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#38 Hacking Classic Nintendo Games with Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python"}, {"length": "17477632", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/38/hacking-classic-nintendo-games-with-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python", "id": "https://pythonbytes.fm/episodes/5acbb635-31a6-480b-bd02-5d8dfa2bcdb1", "guidislink": false, "summary": "<p><strong>Matt #1: <a href=\"https://www.youtube.com/watch?v=v75rNdPukuI\">Hacking Classic Nintendo Games with Python</a> <a href=\"https://www.youtube.com/watch?v=v75rNdPukuI\"></a></strong></p>\n\n<ul>\n<li>Gist: used the FCEUX (<a href=\"http://www.fceux.com/web/home.html\">http://www.fceux.com/web/home.html</a>) Nintendo emulator\u2019s debugger to hex edit memory and change what\u2019s happening during play</li>\n<li>Hex changing is how the old school Game Genie worked</li>\n<li>Given by my Twilio colleague Sam Agnew at PyCon 2017, and all the talks are up on YouTube</li>\n<li>Sam was inspired by Guto Maia\u2019s PyNES: <a href=\"https://gutomaia.net/pyNES/\">https://gutomaia.net/pyNES/</a></li>\n<li>Sam uses the Lua programming language to automate changing the Mario and Zelda\u2019s hex values. </li>\n<li>He then creates a Flask app where PyCon attendees could send a text message containing a hex address and 2 digit hex value to a phone number. the input would then be read into the game as he was playing</li>\n<li>What I particularly enjoyed about this talk is that it takes a bunch of topics that sound really complicated, like hex editing memory values, and makes it more accessible to less experienced developers because they can see the results</li>\n<li>Follow along with this blog post: <a href=\"https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html\">https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html</a></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#2</strong>: <a href=\"http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/\"><strong>The Pac-Man Rule at Conferences</strong></a></p>\n\n<ul>\n<li>by Eric Holscher</li>\n<li>\u201cWhen standing as a group of people, always leave room for 1 person to join your group.\u201d</li>\n<li>\u201cLeaving room for new people when standing in a group is a physical way to show an inclusive and welcoming environment. \u201c</li>\n</ul>\n\n<p><strong>Matt #3:</strong> <strong>Bokeh</strong></p>\n\n<ul>\n<li>Python data visualization library where the visualization output is designed for presentation in web browsers</li>\n<li>Just released v0.12.6 in June, which has a slew of improvements. awesome development team and constantly improving</li>\n<li>v0.12.6 is last planned release before 1.0</li>\n<li>Wide range of visualizations you can create with Bokeh, including classic ones just bar charts box plots, and also interactive visuals</li>\n<li>Basically if you thought d3.js visualizations were awesome but didnt want to spend that much time hand crafting some complicated JavaScript, Bokeh will be your jam</li>\n<li>Flask-based tutorial: <a href=\"https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html\">https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html</a></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://mosh.org/\"><strong>Mosh (mobile shell)</strong></a></p>\n\n<ul>\n<li>Persuasive video: <a href=\"https://www.youtube.com/watch?v=XsIxNYl0oyU\">https://www.youtube.com/watch?v=XsIxNYl0oyU</a> from 2012</li>\n<li>From the main page:\n<ul>\n<li>Remote terminal application that allows <strong>roaming</strong>, supports <strong>intermittent connectivity</strong>, and provides intelligent <strong>local echo</strong> and line editing of user keystrokes.</li>\n<li>Mosh is a replacement for SSH. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.</li>\n<li>Mosh is free software, available for GNU/Linux, BSD, macOS, Solaris, Android, Chrome, and iOS.</li>\n</ul></li>\n<li>This has been around since 2012. I just heard of it. Are people using it?</li>\n</ul>\n\n<p><strong>Matt</strong> <strong>#5:</strong> <a href=\"https://github.com/getpelican/pelican/tree/3.7.1\"><strong>Pelican static site generator</strong></a></p>\n\n<ul>\n<li>Static site generators take in a markup format such as reStructuredText or Markdown, along with a template engine such as Jinja and output HTML (or XML, JSON, etc) files that can be hosted anywhere</li>\n<li>It\u2019s kind of a throw back to the early days of the web when everything was snappy</li>\n<li>Major new version 3.7.0 released at the end of 2016 with a minor v3.7.1 bump released early this year</li>\n<li>Lots of improvements to Python 3 compatibility. I use Pelican with Python 3.6.2. exclusively now.</li>\n<li>Significant customization by changing the configuration files.</li>\n<li>Lots of folks think static site generators are just for blogs, which is what most of the original static generators were built to create, but you really can create any type of site, including single page apps (when you combine a static site generator with a front end JavaScript framework).</li>\n<li>Just wrote a getting started tutorial: <a href=\"https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html\">How to Create Your First Static Site with Pelican and Jinja2</a></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong>  <a href=\"https://pypi.python.org/pypi/pytest-watch\"><strong>pytest-watch</strong></a></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.2.0</a> was released recently.</li>\n<li>Great for pytest users. Bummer for me that just recently tested all the code examples in the <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> book against pytest 3.1.3.</li>\n<li>So I wrote a bunch of tests to check every invocation of pytest in the book.</li>\n<li>I\u2019m running it against both pytest 3.1.3 and pytest 3.2.0</li>\n<li>I\u2019m automating this by running both versions every time I save a new test with pytest-watch</li>\n</ul>\n\n<pre><code>    $ pip install pytest-watch\n    $ cd &lt;test directory&gt;\n    $ ptw .\n</code></pre>\n\n<ul>\n<li>Run <code>ptw .</code> in two windows, each with a virtualenv with different pytest versions, and I can test both constantly as I save tests.</li>\n<li>Will later convert this to tox, but for now, this is a huge timesaver.</li>\n</ul>\n\n<p><strong>(bonus) Matt #7: <a href=\"http://www.twiliovoices.com\">Twilio Voices</a></strong></p>\n\n<ul>\n<li>New program where you get paid $500 for each published technical blog post you write for the Twilio blog. Every post has the code and walks the reader through how to recreate something you built.</li>\n<li>Examples: <a href=\"https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html\">Wedding at Scale</a>, <a href=\"https://www.twilio.com/blog/2017/06/hacked-my-universitys-registration-system-python-twilio.html\">How I Hack My University Registration System</a></li>\n<li>Tell stories with code</li>\n<li>We put each post through a rigorous outline, voice and tech review process</li>\n<li>Doesn\u2019t have to use Twilio, so you can write a post on pytest-watch, Mosh, Pelican, Bokeh, or any other library you\u2019ve been meaning to work with and get paid when the post is published</li>\n<li>This is what I\u2019ve been working on at Twilio for the past couple of months so we\u2019ll work directly together on the posts</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Matt #1: <a href=\"https://www.youtube.com/watch?v=v75rNdPukuI\">Hacking Classic Nintendo Games with Python</a> <a href=\"https://www.youtube.com/watch?v=v75rNdPukuI\"></a></strong></p>\n\n<ul>\n<li>Gist: used the FCEUX (<a href=\"http://www.fceux.com/web/home.html\">http://www.fceux.com/web/home.html</a>) Nintendo emulator\u2019s debugger to hex edit memory and change what\u2019s happening during play</li>\n<li>Hex changing is how the old school Game Genie worked</li>\n<li>Given by my Twilio colleague Sam Agnew at PyCon 2017, and all the talks are up on YouTube</li>\n<li>Sam was inspired by Guto Maia\u2019s PyNES: <a href=\"https://gutomaia.net/pyNES/\">https://gutomaia.net/pyNES/</a></li>\n<li>Sam uses the Lua programming language to automate changing the Mario and Zelda\u2019s hex values. </li>\n<li>He then creates a Flask app where PyCon attendees could send a text message containing a hex address and 2 digit hex value to a phone number. the input would then be read into the game as he was playing</li>\n<li>What I particularly enjoyed about this talk is that it takes a bunch of topics that sound really complicated, like hex editing memory values, and makes it more accessible to less experienced developers because they can see the results</li>\n<li>Follow along with this blog post: <a href=\"https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html\">https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html</a></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#2</strong>: <a href=\"http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/\"><strong>The Pac-Man Rule at Conferences</strong></a></p>\n\n<ul>\n<li>by Eric Holscher</li>\n<li>\u201cWhen standing as a group of people, always leave room for 1 person to join your group.\u201d</li>\n<li>\u201cLeaving room for new people when standing in a group is a physical way to show an inclusive and welcoming environment. \u201c</li>\n</ul>\n\n<p><strong>Matt #3:</strong> <strong>Bokeh</strong></p>\n\n<ul>\n<li>Python data visualization library where the visualization output is designed for presentation in web browsers</li>\n<li>Just released v0.12.6 in June, which has a slew of improvements. awesome development team and constantly improving</li>\n<li>v0.12.6 is last planned release before 1.0</li>\n<li>Wide range of visualizations you can create with Bokeh, including classic ones just bar charts box plots, and also interactive visuals</li>\n<li>Basically if you thought d3.js visualizations were awesome but didnt want to spend that much time hand crafting some complicated JavaScript, Bokeh will be your jam</li>\n<li>Flask-based tutorial: <a href=\"https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html\">https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html</a></li>\n</ul>\n\n<p><strong>Brian #4:</strong> <a href=\"https://mosh.org/\"><strong>Mosh (mobile shell)</strong></a></p>\n\n<ul>\n<li>Persuasive video: <a href=\"https://www.youtube.com/watch?v=XsIxNYl0oyU\">https://www.youtube.com/watch?v=XsIxNYl0oyU</a> from 2012</li>\n<li>From the main page:\n<ul>\n<li>Remote terminal application that allows <strong>roaming</strong>, supports <strong>intermittent connectivity</strong>, and provides intelligent <strong>local echo</strong> and line editing of user keystrokes.</li>\n<li>Mosh is a replacement for SSH. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.</li>\n<li>Mosh is free software, available for GNU/Linux, BSD, macOS, Solaris, Android, Chrome, and iOS.</li>\n</ul></li>\n<li>This has been around since 2012. I just heard of it. Are people using it?</li>\n</ul>\n\n<p><strong>Matt</strong> <strong>#5:</strong> <a href=\"https://github.com/getpelican/pelican/tree/3.7.1\"><strong>Pelican static site generator</strong></a></p>\n\n<ul>\n<li>Static site generators take in a markup format such as reStructuredText or Markdown, along with a template engine such as Jinja and output HTML (or XML, JSON, etc) files that can be hosted anywhere</li>\n<li>It\u2019s kind of a throw back to the early days of the web when everything was snappy</li>\n<li>Major new version 3.7.0 released at the end of 2016 with a minor v3.7.1 bump released early this year</li>\n<li>Lots of improvements to Python 3 compatibility. I use Pelican with Python 3.6.2. exclusively now.</li>\n<li>Significant customization by changing the configuration files.</li>\n<li>Lots of folks think static site generators are just for blogs, which is what most of the original static generators were built to create, but you really can create any type of site, including single page apps (when you combine a static site generator with a front end JavaScript framework).</li>\n<li>Just wrote a getting started tutorial: <a href=\"https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html\">How to Create Your First Static Site with Pelican and Jinja2</a></li>\n</ul>\n\n<p><strong>Brian</strong> <strong>#6:</strong>  <a href=\"https://pypi.python.org/pypi/pytest-watch\"><strong>pytest-watch</strong></a></p>\n\n<ul>\n<li><a href=\"https://docs.pytest.org/en/latest/changelog.html\">pytest 3.2.0</a> was released recently.</li>\n<li>Great for pytest users. Bummer for me that just recently tested all the code examples in the <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> book against pytest 3.1.3.</li>\n<li>So I wrote a bunch of tests to check every invocation of pytest in the book.</li>\n<li>I\u2019m running it against both pytest 3.1.3 and pytest 3.2.0</li>\n<li>I\u2019m automating this by running both versions every time I save a new test with pytest-watch</li>\n</ul>\n\n<pre><code>    $ pip install pytest-watch\n    $ cd &lt;test directory&gt;\n    $ ptw .\n</code></pre>\n\n<ul>\n<li>Run <code>ptw .</code> in two windows, each with a virtualenv with different pytest versions, and I can test both constantly as I save tests.</li>\n<li>Will later convert this to tox, but for now, this is a huge timesaver.</li>\n</ul>\n\n<p><strong>(bonus) Matt #7: <a href=\"http://www.twiliovoices.com\">Twilio Voices</a></strong></p>\n\n<ul>\n<li>New program where you get paid $500 for each published technical blog post you write for the Twilio blog. Every post has the code and walks the reader through how to recreate something you built.</li>\n<li>Examples: <a href=\"https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html\">Wedding at Scale</a>, <a href=\"https://www.twilio.com/blog/2017/06/hacked-my-universitys-registration-system-python-twilio.html\">How I Hack My University Registration System</a></li>\n<li>Tell stories with code</li>\n<li>We put each post through a rigorous outline, voice and tech review process</li>\n<li>Doesn\u2019t have to use Twilio, so you can write a post on pytest-watch, Mosh, Pelican, Bokeh, or any other library you\u2019ve been meaning to work with and get paid when the post is published</li>\n<li>This is what I\u2019ve been working on at Twilio for the past couple of months so we\u2019ll work directly together on the posts</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 09 Aug 2017 00:00:00 -0800", "published_parsed": [2017, 8, 9, 8, 0, 0, 2, 221, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Hacking Classic Nintendo Games with Python", "itunes_episode": "38", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:57"}}, "#37 Rule over the shells with Sultan": {"info": {"title": "#37 Rule over the shells with Sultan", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#37 Rule over the shells with Sultan"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/37/rule-over-the-shells-with-sultan"}, {"length": "13634489", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/37/rule-over-the-shells-with-sultan.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/37/rule-over-the-shells-with-sultan", "id": "https://pythonbytes.fm/episodes/7c42c762-c79f-4c9b-9bb7-8d2e42dcda76", "guidislink": false, "summary": "<p><strong>Brian #1:</strong> <a href=\"https://devguide.python.org/\"><strong>New URL for Python Developer\u2019s Guide</strong></a></p>\n\n<ul>\n<li>How to contribute to CPython</li>\n</ul>\n\n<p>Some really useful links that I hadn\u2019t noticed before. Also great ideas to include in a contributing guide for any large open source project:</p>\n\n<ul>\n<li>Core developers and contributors alike will find the following guides useful:\n<ul>\n<li><a href=\"https://opensource.guide/how-to-contribute/\">How to Contribute to Open Source</a> (from https://opensource.guide)</li>\n<li><a href=\"https://opensource.guide/building-community/\">Building Welcoming Communities</a> (from https://opensource.guide)</li>\n</ul></li>\n<li>Guide for contributing to Python:\n<ul>\n<li><a href=\"https://devguide.python.org/setup/\">Getting Started</a></li>\n<li><a href=\"https://devguide.python.org/help/\">Where to Get Help</a></li>\n<li><a href=\"https://devguide.python.org/pullrequest/\">Lifecycle of a Pull Request</a></li>\n<li><a href=\"https://devguide.python.org/runtests/\">Running &amp; Writing Tests</a></li>\n<li>Beginner tasks to become familiar with the development process</li>\n<li><a href=\"https://devguide.python.org/docquality/\">Helping with Documentation</a></li>\n<li><a href=\"https://devguide.python.org/coverage/\">Increase Test Coverage</a></li>\n<li>Advanced tasks for once you are comfortable</li>\n<li><a href=\"https://devguide.python.org/silencewarnings/\">Silence Warnings From the Test Suite</a></li>\n<li>Fixing issues found by the <a href=\"https://devguide.python.org/buildbots/\">buildbots</a></li>\n<li><a href=\"https://devguide.python.org/fixingissues/\">Fixing \u201ceasy\u201d Issues (and Beyond)</a></li>\n<li><a href=\"https://devguide.python.org/tracker/#tracker\">Using the Issue Tracker</a> and <a href=\"https://devguide.python.org/tracker/#helptriage\">Helping Triage Issues</a></li>\n<li><a href=\"https://devguide.python.org/triaging/\">Triaging an Issue</a></li>\n<li><a href=\"https://devguide.python.org/experts/\">Experts Index</a></li>\n<li><a href=\"https://devguide.python.org/communication/\">Following Python\u2019s Development</a></li>\n<li><a href=\"https://devguide.python.org/coredev/\">How to Become a Core Developer</a></li>\n<li><a href=\"https://devguide.python.org/committing/\">Committing and Pushing Changes</a></li>\n<li><a href=\"https://devguide.python.org/devcycle/\">Development Cycle</a></li>\n<li><a href=\"https://devguide.python.org/buildbots/\">Continuous Integration</a></li>\n<li><a href=\"https://devguide.python.org/gitbootcamp/\">Git Bootcamp and Cheat Sheet</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://sultan.readthedocs.io/en/latest/\"><strong>Sultan: Command and Rule Over Your Shell</strong></a></p>\n\n<ul>\n<li>Python package for interfacing with command-line utilities, like yum, apt-get, or ls, in a Pythonic manner</li>\n</ul>\n\n<p>Simple example</p>\n\n<pre><code>from sultan.api import Sultan\ns = Sultan()\ns.sudo(\"yum install -y tree\").run()\n</code></pre>\n\n<p>Better in a context manager:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True) as s:\n  s.yum(\"install -y tree\").run()\n</code></pre>\n\n<p>Even works remotely:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True, hostname=\"myserver.com\") as sultan:\n  sultan.yum(\"install -y tree\").run()\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/dreadatour/Flake8Lint\"><strong>Flake8Lint</strong></a></p>\n\n<ul>\n<li>Sublime Text plugin for lint Python files.</li>\n<li>Includes these linters and style checkers:\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/flake8\"><strong>Flake8</strong></a> (used in \"Python Flake8 Lint\") is a wrapper around these tools:</li>\n<li><a href=\"http://pypi.python.org/pypi/pep8\"><strong>pep8</strong></a> is a tool to check your Python code against some of the style conventions in <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</li>\n<li><a href=\"https://launchpad.net/pyflakes\"><strong>PyFlakes</strong></a> checks only for logical errors in programs; it does not perform any check on style.</li>\n<li><a href=\"http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\"><strong>mccabe</strong></a> is a code complexity checker. It is quite useful to detect over-complex code. According to McCabe, anything that goes beyond 10 is too complex. See <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic_complexity</a>.</li>\n<li>There are additional tools used to lint Python files:</li>\n<li><a href=\"https://github.com/PyCQA/pydocstyle\"><strong>pydocstyle</strong></a> is a static analysis tool for checking compliance with Python <a href=\"http://www.python.org/dev/peps/pep-0257/\">PEP257</a>.</li>\n<li><a href=\"https://github.com/flintwork/pep8-naming\"><strong>pep8-naming</strong></a> is a naming convention checker for Python.</li>\n<li><a href=\"https://github.com/JBKahn/flake8-debugger\"><strong>flake8-debugger</strong></a> is a flake8 debug statement checker.</li>\n<li><a href=\"https://github.com/public/flake8-import-order\"><strong>flake8-import-order</strong></a> is a flake8 plugin that checks import order in the fashion of the Google Python Style Guide (turned off by default).</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/warner/magic-wormhole\"><strong>Magic Wormhole</strong></a></p>\n\n<ul>\n<li>Get things from one computer to another, safely.</li>\n<li>A library and a command-line tool named <code>wormhole</code>, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another.</li>\n<li>The two endpoints are identified by using identical \"wormhole codes\u201d</li>\n<li>Video from PyCon 2016: <a href=\"https://www.youtube.com/watch?v=oFrTqQw0_3c\">https://www.youtube.com/watch?v=oFrTqQw0_3c</a></li>\n<li>The codes are short and human-pronounceable, using a phonetically-distinct wordlist.</li>\n<li>As a library too: The wormhole module makes it possible for other applications to use these code-protected channels. </li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://realpython.com/blog/python/python-virtual-environments-a-primer/\"><strong>Python Virtual Environments Primer</strong></a></p>\n\n<ul>\n<li>why do we need virtual environments</li>\n<li>what are they</li>\n<li>how to use them / how do they work</li>\n<li>also\n<ul>\n<li>virtualenvwrapper</li>\n<li>using different versions of python</li>\n<li>pyvenv</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://www.infoworld.com/article/3208391/python/how-rust-can-replace-c-with-pythons-help.html\"><strong>How Rust can replace C, with Python's help</strong></a></p>\n\n<ul>\n<li>Why Rust? Rust has\n<ul>\n<li>a type system feature that helps eliminate memory leaks,</li>\n<li>proper interfaces, called 'traits',</li>\n<li>better type inference,</li>\n<li>better support for concurrency,</li>\n<li>(almost) first-class functions that can be passed as arguments.</li>\n</ul></li>\n<li>It isn\u2019t difficult to expose Rust code to Python. A Rust library can expose a C ABI (application binary interface) to Python without too much work. </li>\n<li>Some Rust crates (as Rust packages are called) already expose Python bindings to make them useful in Python.</li>\n<li>A new spate of projects are making it easier to develop Rust libraries with convenient bindings to Python \u2013 and to deploy Python packages that have Rust binaries</li>\n<li><a href=\"https://github.com/dgrunwald/rust-cpython\"><strong>Rust-CPython</strong></a><strong>:</strong> \n<ul>\n<li><strong>What it is:</strong> A set of bindings in Rust for the CPython runtime. This allows a Rust program to connect to CPython, use its ABI, run Python programs through it, and work with representations of Python objects in Rust itself.</li>\n<li><strong>Who it\u2019s for:</strong> Rust programmers who want to hook into CPython and control it from the inside out.</li>\n</ul></li>\n<li><a href=\"https://github.com/PyO3/PyO3\"><strong>PyO3</strong></a>\n<ul>\n<li><strong>What it is:</strong> For Rust developers, the PyO3 project provides a basic way to write Rust software with bindings to Python in both directions. A Rust program can interface with Python objects and the Python interpreter, and can expose Rust methods to a Python program in the same way a C module does.</li>\n<li><strong>Who it\u2019s for:</strong> Those writing modules that work closely with the Python runtime, and need to interact directly with it.</li>\n</ul></li>\n<li><a href=\"https://github.com/mitsuhiko/snaek/\"><strong>Snaek</strong></a>\n<ul>\n<li><strong>What it is:</strong> Another project in the early stages, Snaek lets developers create Rust libraries that are loaded dynamically into Python as needed, but don\u2019t rely on being linked statically against Python\u2019s runtime.</li>\n<li>Doesn\u2019t use CTypes but CFFI</li>\n<li><strong>Who it\u2019s for:</strong> Those who want to expose methods written in Rust to a Python script, or for Rust developers who don\u2019t want or need to become familiar with Python.</li>\n</ul></li>\n<li>And there is a cookiecutter project / template too\n<ul>\n<li><a href=\"https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish\">https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish</a></li>\n<li>\u201cA very important goal of the project,\u201d writes its maintainers, \u201cis that it be able to produce a binary distribution (Wheel) which will not require the end user to actually compile the Rust code themselves.\u201d</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong> <a href=\"https://devguide.python.org/\"><strong>New URL for Python Developer\u2019s Guide</strong></a></p>\n\n<ul>\n<li>How to contribute to CPython</li>\n</ul>\n\n<p>Some really useful links that I hadn\u2019t noticed before. Also great ideas to include in a contributing guide for any large open source project:</p>\n\n<ul>\n<li>Core developers and contributors alike will find the following guides useful:\n<ul>\n<li><a href=\"https://opensource.guide/how-to-contribute/\">How to Contribute to Open Source</a> (from https://opensource.guide)</li>\n<li><a href=\"https://opensource.guide/building-community/\">Building Welcoming Communities</a> (from https://opensource.guide)</li>\n</ul></li>\n<li>Guide for contributing to Python:\n<ul>\n<li><a href=\"https://devguide.python.org/setup/\">Getting Started</a></li>\n<li><a href=\"https://devguide.python.org/help/\">Where to Get Help</a></li>\n<li><a href=\"https://devguide.python.org/pullrequest/\">Lifecycle of a Pull Request</a></li>\n<li><a href=\"https://devguide.python.org/runtests/\">Running &amp; Writing Tests</a></li>\n<li>Beginner tasks to become familiar with the development process</li>\n<li><a href=\"https://devguide.python.org/docquality/\">Helping with Documentation</a></li>\n<li><a href=\"https://devguide.python.org/coverage/\">Increase Test Coverage</a></li>\n<li>Advanced tasks for once you are comfortable</li>\n<li><a href=\"https://devguide.python.org/silencewarnings/\">Silence Warnings From the Test Suite</a></li>\n<li>Fixing issues found by the <a href=\"https://devguide.python.org/buildbots/\">buildbots</a></li>\n<li><a href=\"https://devguide.python.org/fixingissues/\">Fixing \u201ceasy\u201d Issues (and Beyond)</a></li>\n<li><a href=\"https://devguide.python.org/tracker/#tracker\">Using the Issue Tracker</a> and <a href=\"https://devguide.python.org/tracker/#helptriage\">Helping Triage Issues</a></li>\n<li><a href=\"https://devguide.python.org/triaging/\">Triaging an Issue</a></li>\n<li><a href=\"https://devguide.python.org/experts/\">Experts Index</a></li>\n<li><a href=\"https://devguide.python.org/communication/\">Following Python\u2019s Development</a></li>\n<li><a href=\"https://devguide.python.org/coredev/\">How to Become a Core Developer</a></li>\n<li><a href=\"https://devguide.python.org/committing/\">Committing and Pushing Changes</a></li>\n<li><a href=\"https://devguide.python.org/devcycle/\">Development Cycle</a></li>\n<li><a href=\"https://devguide.python.org/buildbots/\">Continuous Integration</a></li>\n<li><a href=\"https://devguide.python.org/gitbootcamp/\">Git Bootcamp and Cheat Sheet</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://sultan.readthedocs.io/en/latest/\"><strong>Sultan: Command and Rule Over Your Shell</strong></a></p>\n\n<ul>\n<li>Python package for interfacing with command-line utilities, like yum, apt-get, or ls, in a Pythonic manner</li>\n</ul>\n\n<p>Simple example</p>\n\n<pre><code>from sultan.api import Sultan\ns = Sultan()\ns.sudo(\"yum install -y tree\").run()\n</code></pre>\n\n<p>Better in a context manager:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True) as s:\n  s.yum(\"install -y tree\").run()\n</code></pre>\n\n<p>Even works remotely:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True, hostname=\"myserver.com\") as sultan:\n  sultan.yum(\"install -y tree\").run()\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/dreadatour/Flake8Lint\"><strong>Flake8Lint</strong></a></p>\n\n<ul>\n<li>Sublime Text plugin for lint Python files.</li>\n<li>Includes these linters and style checkers:\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/flake8\"><strong>Flake8</strong></a> (used in \"Python Flake8 Lint\") is a wrapper around these tools:</li>\n<li><a href=\"http://pypi.python.org/pypi/pep8\"><strong>pep8</strong></a> is a tool to check your Python code against some of the style conventions in <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</li>\n<li><a href=\"https://launchpad.net/pyflakes\"><strong>PyFlakes</strong></a> checks only for logical errors in programs; it does not perform any check on style.</li>\n<li><a href=\"http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\"><strong>mccabe</strong></a> is a code complexity checker. It is quite useful to detect over-complex code. According to McCabe, anything that goes beyond 10 is too complex. See <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic_complexity</a>.</li>\n<li>There are additional tools used to lint Python files:</li>\n<li><a href=\"https://github.com/PyCQA/pydocstyle\"><strong>pydocstyle</strong></a> is a static analysis tool for checking compliance with Python <a href=\"http://www.python.org/dev/peps/pep-0257/\">PEP257</a>.</li>\n<li><a href=\"https://github.com/flintwork/pep8-naming\"><strong>pep8-naming</strong></a> is a naming convention checker for Python.</li>\n<li><a href=\"https://github.com/JBKahn/flake8-debugger\"><strong>flake8-debugger</strong></a> is a flake8 debug statement checker.</li>\n<li><a href=\"https://github.com/public/flake8-import-order\"><strong>flake8-import-order</strong></a> is a flake8 plugin that checks import order in the fashion of the Google Python Style Guide (turned off by default).</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/warner/magic-wormhole\"><strong>Magic Wormhole</strong></a></p>\n\n<ul>\n<li>Get things from one computer to another, safely.</li>\n<li>A library and a command-line tool named <code>wormhole</code>, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another.</li>\n<li>The two endpoints are identified by using identical \"wormhole codes\u201d</li>\n<li>Video from PyCon 2016: <a href=\"https://www.youtube.com/watch?v=oFrTqQw0_3c\">https://www.youtube.com/watch?v=oFrTqQw0_3c</a></li>\n<li>The codes are short and human-pronounceable, using a phonetically-distinct wordlist.</li>\n<li>As a library too: The wormhole module makes it possible for other applications to use these code-protected channels. </li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://realpython.com/blog/python/python-virtual-environments-a-primer/\"><strong>Python Virtual Environments Primer</strong></a></p>\n\n<ul>\n<li>why do we need virtual environments</li>\n<li>what are they</li>\n<li>how to use them / how do they work</li>\n<li>also\n<ul>\n<li>virtualenvwrapper</li>\n<li>using different versions of python</li>\n<li>pyvenv</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://www.infoworld.com/article/3208391/python/how-rust-can-replace-c-with-pythons-help.html\"><strong>How Rust can replace C, with Python's help</strong></a></p>\n\n<ul>\n<li>Why Rust? Rust has\n<ul>\n<li>a type system feature that helps eliminate memory leaks,</li>\n<li>proper interfaces, called 'traits',</li>\n<li>better type inference,</li>\n<li>better support for concurrency,</li>\n<li>(almost) first-class functions that can be passed as arguments.</li>\n</ul></li>\n<li>It isn\u2019t difficult to expose Rust code to Python. A Rust library can expose a C ABI (application binary interface) to Python without too much work. </li>\n<li>Some Rust crates (as Rust packages are called) already expose Python bindings to make them useful in Python.</li>\n<li>A new spate of projects are making it easier to develop Rust libraries with convenient bindings to Python \u2013 and to deploy Python packages that have Rust binaries</li>\n<li><a href=\"https://github.com/dgrunwald/rust-cpython\"><strong>Rust-CPython</strong></a><strong>:</strong> \n<ul>\n<li><strong>What it is:</strong> A set of bindings in Rust for the CPython runtime. This allows a Rust program to connect to CPython, use its ABI, run Python programs through it, and work with representations of Python objects in Rust itself.</li>\n<li><strong>Who it\u2019s for:</strong> Rust programmers who want to hook into CPython and control it from the inside out.</li>\n</ul></li>\n<li><a href=\"https://github.com/PyO3/PyO3\"><strong>PyO3</strong></a>\n<ul>\n<li><strong>What it is:</strong> For Rust developers, the PyO3 project provides a basic way to write Rust software with bindings to Python in both directions. A Rust program can interface with Python objects and the Python interpreter, and can expose Rust methods to a Python program in the same way a C module does.</li>\n<li><strong>Who it\u2019s for:</strong> Those writing modules that work closely with the Python runtime, and need to interact directly with it.</li>\n</ul></li>\n<li><a href=\"https://github.com/mitsuhiko/snaek/\"><strong>Snaek</strong></a>\n<ul>\n<li><strong>What it is:</strong> Another project in the early stages, Snaek lets developers create Rust libraries that are loaded dynamically into Python as needed, but don\u2019t rely on being linked statically against Python\u2019s runtime.</li>\n<li>Doesn\u2019t use CTypes but CFFI</li>\n<li><strong>Who it\u2019s for:</strong> Those who want to expose methods written in Rust to a Python script, or for Rust developers who don\u2019t want or need to become familiar with Python.</li>\n</ul></li>\n<li>And there is a cookiecutter project / template too\n<ul>\n<li><a href=\"https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish\">https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish</a></li>\n<li>\u201cA very important goal of the project,\u201d writes its maintainers, \u201cis that it be able to produce a binary distribution (Wheel) which will not require the end user to actually compile the Rust code themselves.\u201d</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 02 Aug 2017 00:00:00 -0800", "published_parsed": [2017, 8, 2, 8, 0, 0, 2, 214, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Rule over the shells with Sultan", "itunes_episode": "37", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:18:15"}}, "#36 Craft Your Python Like Poetry and Other Musings": {"info": {"title": "#36 Craft Your Python Like Poetry and Other Musings", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#36 Craft Your Python Like Poetry and Other Musings"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/36/craft-your-python-like-poetry-and-other-musings"}, {"length": "16301618", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/36/craft-your-python-like-poetry-and-other-musings.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/36/craft-your-python-like-poetry-and-other-musings", "id": "https://pythonbytes.fm/episodes/bbfccbbe-58bf-4337-abc1-895f62a0e349", "guidislink": false, "summary": "<p>Brought to you by <strong>Rollbar</strong>! Create an account and get special credits at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://treyhunner.com/2017/07/craft-your-python-like-poetry/\"><strong>Craft Your Python Like Poetry</strong></a></p>\n\n<ul>\n<li>Line length is important. Shorter is often more readable.</li>\n<li>line break placement makes a huge difference in readability and applies to\n<ul>\n<li>comprehensions</li>\n<li>function call parameters</li>\n<li>chained function calls. (Dot alignment is pleasing and nothing I have considered previously)</li>\n<li>dictionary literals</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://trello.com/c/ME7ijnKw/88-https-devguidepythonorg\"></a>\n<strong>Michael #2:</strong> <a href=\"https://labs.fedoraproject.org/en/python-classroom/\"><strong>The Fedora Python Classroom Lab</strong></a></p>\n\n<ul>\n<li>Makes it easy for teachers and instructors to use Fedora in their classrooms or workshops.</li>\n<li>Ready to use operating system with important stuff pre-installed</li>\n<li>With GNOME or as a headless environment for Docker or Vagrant</li>\n<li>Lots of prebuilt goodies, especially around data science:\n<ul>\n<li>IPython, Jupyter Notebook, multiple Pythons, virtualenvs, tox, git and more</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://theoutline.com/post/1953/how-a-vc-funded-company-is-undermining-the-open-source-community\"><strong>How a VC-funded company is undermining the open-source community</strong></a></p>\n\n<ul>\n<li>A San Francisco startup called Kite is being accused of underhanded tactics.</li>\n<li>An Atom plugin called Minimap, downloaded more than 3.5 M times, open source, and developed primarily by one person. @abe33</li>\n<li>abe33 hired by Kite, then adds a \u201cKite Promotion\u201d \u201cfeature\u201d to Minimap that examines user code and inserts links to related parts of Kite website. (Presumably in the minimap?)</li>\n<li>Users rightfully ticked.</li>\n<li>Next. autocomplete-Python, also an Atom addon, seems to be taken over by Kite engineers and changes the autocomplete from local Jedi engine to cloud Kite engine (also therefore sending users code to Kite). </li>\n<li>Seems like that ought to have been a separate plugin, not a take over of an existing one.</li>\n<li>Again, users not exactly supportive of the changes.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/codelucas/newspaper/\"><strong>Newspaper Python Package</strong></a></p>\n\n<ul>\n<li>News, full-text, and article metadata extraction in Python 3</li>\n<li>Behold the example code:</li>\n</ul>\n\n<pre><code>    from newspaper import Article\n    url = 'http://fox13now.com/2013/12/30/new-year-new-laws-obamacare-pot-guns-and-drones/'\n    article = Article(url)\n\n    article.download()\n\n    article.parse()\n    article.authors\n    # ['Leigh Ann Caldwell', 'John Honway']\n    article.publish_date\n    # datetime.datetime(2013, 12, 30, 0, 0)\n\n    article.nlp()\n    article.keywords\n    # ['New Years', 'resolution', ...]\n    article.summary\n    # 'The study shows that 93% of people ...'\n</code></pre>\n\n<p><strong>Brian #5:</strong> <a href=\"http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017\"><strong>IEEE Spectrum:</strong></a> <a href=\"http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017\"><strong>The Top Programming Languages 2017</strong></a></p>\n\n<ul>\n<li>We\u2019re #1. We\u2019re #1.</li>\n<li>Python on top of the list</li>\n<li>IEEE very open about <a href=\"http://spectrum.ieee.org/ns/IEEE_TPL_2017/methods.html\">their methodology.</a>\n<ul>\n<li>Combo of Google, Google Trends, GitHub, Twitter, Reddit, StackOverflow, HackerNews, CareerBuilder, Dice, and IEEE Xplore Digital Library</li>\n</ul></li>\n<li>Python #1 in lots of categories. Java still has more job openings, supposedly. Although I think it\u2019s because Java people are quitting to go work on Python projects. </li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf\"><strong>SciPy 2017 videos are out</strong></a></p>\n\n<ul>\n<li>Bunch of tutorials</li>\n<li>Keynote - Coding for Science and Innovation, Ga\u00ebl Varoquaux</li>\n<li>Dash - A New Framework for Building User Interfaces for Technical Computing, </li>\n<li>Dask - Advanced Techniques, Matthew Rocklin</li>\n<li>Scientific Analysis at Scale - a Comparison of Five Systems, Jake V.</li>\n<li>Keynote - Academic Open Source, Kathryn Huff</li>\n<li>Plus lots more</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Brought to you by <strong>Rollbar</strong>! Create an account and get special credits at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"http://treyhunner.com/2017/07/craft-your-python-like-poetry/\"><strong>Craft Your Python Like Poetry</strong></a></p>\n\n<ul>\n<li>Line length is important. Shorter is often more readable.</li>\n<li>line break placement makes a huge difference in readability and applies to\n<ul>\n<li>comprehensions</li>\n<li>function call parameters</li>\n<li>chained function calls. (Dot alignment is pleasing and nothing I have considered previously)</li>\n<li>dictionary literals</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://trello.com/c/ME7ijnKw/88-https-devguidepythonorg\"></a>\n<strong>Michael #2:</strong> <a href=\"https://labs.fedoraproject.org/en/python-classroom/\"><strong>The Fedora Python Classroom Lab</strong></a></p>\n\n<ul>\n<li>Makes it easy for teachers and instructors to use Fedora in their classrooms or workshops.</li>\n<li>Ready to use operating system with important stuff pre-installed</li>\n<li>With GNOME or as a headless environment for Docker or Vagrant</li>\n<li>Lots of prebuilt goodies, especially around data science:\n<ul>\n<li>IPython, Jupyter Notebook, multiple Pythons, virtualenvs, tox, git and more</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://theoutline.com/post/1953/how-a-vc-funded-company-is-undermining-the-open-source-community\"><strong>How a VC-funded company is undermining the open-source community</strong></a></p>\n\n<ul>\n<li>A San Francisco startup called Kite is being accused of underhanded tactics.</li>\n<li>An Atom plugin called Minimap, downloaded more than 3.5 M times, open source, and developed primarily by one person. @abe33</li>\n<li>abe33 hired by Kite, then adds a \u201cKite Promotion\u201d \u201cfeature\u201d to Minimap that examines user code and inserts links to related parts of Kite website. (Presumably in the minimap?)</li>\n<li>Users rightfully ticked.</li>\n<li>Next. autocomplete-Python, also an Atom addon, seems to be taken over by Kite engineers and changes the autocomplete from local Jedi engine to cloud Kite engine (also therefore sending users code to Kite). </li>\n<li>Seems like that ought to have been a separate plugin, not a take over of an existing one.</li>\n<li>Again, users not exactly supportive of the changes.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/codelucas/newspaper/\"><strong>Newspaper Python Package</strong></a></p>\n\n<ul>\n<li>News, full-text, and article metadata extraction in Python 3</li>\n<li>Behold the example code:</li>\n</ul>\n\n<pre><code>    from newspaper import Article\n    url = 'http://fox13now.com/2013/12/30/new-year-new-laws-obamacare-pot-guns-and-drones/'\n    article = Article(url)\n\n    article.download()\n\n    article.parse()\n    article.authors\n    # ['Leigh Ann Caldwell', 'John Honway']\n    article.publish_date\n    # datetime.datetime(2013, 12, 30, 0, 0)\n\n    article.nlp()\n    article.keywords\n    # ['New Years', 'resolution', ...]\n    article.summary\n    # 'The study shows that 93% of people ...'\n</code></pre>\n\n<p><strong>Brian #5:</strong> <a href=\"http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017\"><strong>IEEE Spectrum:</strong></a> <a href=\"http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017\"><strong>The Top Programming Languages 2017</strong></a></p>\n\n<ul>\n<li>We\u2019re #1. We\u2019re #1.</li>\n<li>Python on top of the list</li>\n<li>IEEE very open about <a href=\"http://spectrum.ieee.org/ns/IEEE_TPL_2017/methods.html\">their methodology.</a>\n<ul>\n<li>Combo of Google, Google Trends, GitHub, Twitter, Reddit, StackOverflow, HackerNews, CareerBuilder, Dice, and IEEE Xplore Digital Library</li>\n</ul></li>\n<li>Python #1 in lots of categories. Java still has more job openings, supposedly. Although I think it\u2019s because Java people are quitting to go work on Python projects. </li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf\"><strong>SciPy 2017 videos are out</strong></a></p>\n\n<ul>\n<li>Bunch of tutorials</li>\n<li>Keynote - Coding for Science and Innovation, Ga\u00ebl Varoquaux</li>\n<li>Dash - A New Framework for Building User Interfaces for Technical Computing, </li>\n<li>Dask - Advanced Techniques, Matthew Rocklin</li>\n<li>Scientific Analysis at Scale - a Comparison of Five Systems, Jake V.</li>\n<li>Keynote - Academic Open Source, Kathryn Huff</li>\n<li>Plus lots more</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 28 Jul 2017 00:00:00 -0800", "published_parsed": [2017, 7, 28, 8, 0, 0, 4, 209, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Craft Your Python Like Poetry and Other Musings", "itunes_episode": "36", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:34"}}, "#35 How developers change programming languages over time": {"info": {"title": "#35 How developers change programming languages over time", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#35 How developers change programming languages over time"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/35/how-developers-change-programming-languages-over-time"}, {"length": "17872991", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/35/how-developers-change-programming-languages-over-time.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/35/how-developers-change-programming-languages-over-time", "id": "https://pythonbytes.fm/episodes/123a1d7f-4d62-4465-874c-5274e42d346b", "guidislink": false, "summary": "<p><strong>Brian #1:</strong> <a href=\"https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c\"><strong>Python Quirks</strong></a> <a href=\"https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c\"><strong>: Comments</strong></a></p>\n\n<ul>\n<li>Python developers put comments in their code.</li>\n</ul>\n\n<pre><code>    # Like this\n    \"\"\"\n    And like this\n    \"\"\"\n    \"And like this.\"\n    [\"Not usually like this\",\"but it's possible\"]\n</code></pre>\n\n<ul>\n<li>Philip Trauner timed all of these.</li>\n<li>Actual # comments are obviously way faster.</li>\n<li>He also shows the AST difference.</li>\n<li>Don\u2019t abuse the language. Unused unreferenced strings are not free.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-2\"><strong>Python 3.6.2 is out!</strong></a></p>\n\n<ul>\n<li><strong>Security</strong>\n<ul>\n<li>bpo-30730: Prevent environment variables injection in subprocess on Windows. Prevent passing other environment variables and command arguments.</li>\n<li>bpo-30694: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple security vulnerabilities including: CVE-2017-9233 (External entity infinite loop DoS), CVE-2016-9063 (Integer overflow, re-fix), CVE-2016-0718 (Fix regression bugs from 2.2.0\u2019s fix to CVE-2016-0718) and CVE-2012-0876 (Counter hash flooding with SipHash). Note: the CVE-2016-5300 (Use os-specific entropy sources like getrandom) doesn\u2019t impact Python, since Python already gets entropy from the OS to set the expat secret using XML_SetHashSalt().</li>\n<li>bpo-30500: Fix urllib.parse.splithost() to correctly parse fragments. For example, splithost('//127.0.0.1#@evil.com/') now correctly returns the 127.0.0.1 host, instead of treating @evil.com as the host in an authentification (login@host).</li>\n</ul></li>\n<li><strong>Core and Builtins</strong>\n<ul>\n<li>bpo-29104: Fixed parsing backslashes in f-strings.</li>\n<li>bpo-27945: Fixed various segfaults with dict when input collections are mutated during searching, inserting or comparing. Based on patches by Duane Griffin and Tim Mitchell.</li>\n<li>bpo-30039: If a KeyboardInterrupt happens when the interpreter is in the middle of resuming a chain of nested \u2018yield from\u2019 or \u2018await\u2019 calls, it\u2019s now correctly delivered to the innermost frame.</li>\n<li>Library</li>\n<li>bpo-30038: Fix race condition between signal delivery and wakeup file descriptor. Patch by Nathaniel Smith.</li>\n<li>bpo-23894: lib2to3 now recognizes rb'...' and f'...' strings.</li>\n<li>bpo-24484: Avoid race condition in multiprocessing cleanup (#2159)</li>\n</ul></li>\n<li><strong>Windows</strong>\n<ul>\n<li>bpo-30687: Locate msbuild.exe on Windows when building rather than vcvarsall.bat</li>\n<li>bpo-30450: The build process on Windows no longer depends on Subversion, instead pulling external code from GitHub via a Python script. If Python 3.6 is not found on the system (via py -3.6), NuGet is used to download a copy of 32-bit Python.</li>\n</ul></li>\n<li><strong>Plus about 40 more fixes / changes</strong></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/adriennefriend/imposter-syndrome-disclaimer\"><strong>Contributing to Open Source Projects: Imposter Syndrome Disclaimer</strong></a></p>\n\n<ul>\n<li>\u201cHow to contribute\u201d often part of OSS projects.</li>\n<li>Adrienne Lowe of codingwithknives.com has an \u201cImposter Syndrome Disclaimer\u201d to include in your contributing documentation that\u2019s pretty great.</li>\n<li>She\u2019s also <a href=\"https://github.com/adriennefriend/imposter-syndrome-disclaimer/blob/master/examples.md\">collecting examples</a> of people using it, or similar.</li>\n<li>From the disclaimer: </li>\n</ul>\n\n<blockquote>\n  <p>\u201c<em>Imposter syndrome disclaimer</em>: I want your help. No really, I do.\n  There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.\n  I assure you, that's not the case.\n  \u2026\n  And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)\u201c</p>\n</blockquote>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.technologyreview.com/s/604087/the-dark-secret-at-the-heart-of-ai/\"><strong>The Dark Secret at the Heart of AI</strong></a></p>\n\n<ul>\n<li>via MIT Technology Review</li>\n<li>There\u2019s a big problem with AI: even its creators can\u2019t explain how it works</li>\n<li>Last year, an experimental vehicle, developed by researchers at the chip maker Nvidia, didn\u2019t look different from other autonomous cars, but it was unlike anything demonstrated by Google, Tesla, or General Motors, and it showed the rising power of artificial intelligence. The car didn\u2019t follow a single instruction provided by an engineer or programmer. Instead, it relied entirely on an algorithm that had taught itself to drive by watching a human do it.</li>\n<li>The result seems to match the responses you\u2019d expect from a human driver. But what if one day it did something unexpected\u2014crashed into a tree, or sat at a green light? </li>\n<li>As things stand now, it might be difficult to find out why.</li>\n<li>And you can\u2019t ask it: there is no obvious way to design such a system so that it could always explain why it did what it did.</li>\n<li>There\u2019s already an argument that being able to interrogate an AI system about how it reached its conclusions is a fundamental legal right</li>\n<li>We\u2019ve never before built machines that operate in ways their creators don\u2019t understand. How well can we expect to communicate\u2014and get along with\u2014intelligent machines that could be unpredictable and inscrutable</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"http://jamescooke.info/arrange-act-assert-pattern-for-python-developers.html\"><strong>Arrange Act Assert pattern for Python developers</strong></a></p>\n\n<ul>\n<li>James Cooke</li>\n<li>Good introduction to test case structure.</li>\n<li>Split your tests into setup, action, assertions.</li>\n<li>Pattern also known by:\n<ul>\n<li>Given, When, Then</li>\n<li>Setup, Test, Teardown</li>\n<li>Setup, Exercise, Verify, Teardown</li>\n</ul></li>\n<li>Also covered in:\n<ul>\n<li><a href=\"http://testandcode.com/10\">testandcode.com/10</a></li>\n<li><a href=\"http://pythontesting.net/strategy/given-when-then-2/\">pythontesting.net/strategy/given-when-then-2</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://blog.sourced.tech/post/language_migrations/\"><strong>Analyzing GitHub, how developers change programming languages over time</strong></a></p>\n\n<ul>\n<li>From source{d}: Building the first AI that understands code</li>\n<li>Have you ever been struggling with an nth obscure project, thinking : \u201cI could do the job with this language but why not switch to another one which would be more enjoyable to work with\u201d ?</li>\n<li>Derived from <a href=\"https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html\"><strong>The eigenvector of \u201cWhy we moved from language X to language Y\u201d</strong></a><strong>,</strong> <a href=\"https://github.com/erikbern/eigenstuff\"><strong>Erik Bernhardsson</strong></a> <em>*</em>*</li>\n<li>Dataset available\n<ul>\n<li>4.5 Million GitHub users</li>\n<li>393 different languages</li>\n<li>10 TB of source code in total</li>\n</ul></li>\n<li>I find it nice to visualize developer\u2019s language usage history with a kind of <a href=\"https://en.wikipedia.org/wiki/Gantt_chart\"><strong>Gantt diagram</strong></a>.</li>\n<li>We did not include Javascript because</li>\n<li>Most popular languages on GitHub</li>\n<li>At last! Here is the reward: the stationary distribution of our Markov chain. This probability distribution is independent of the initial distribution. It gives information about the stability of the process of random switching between languages. </li>\n<li><table>\n<thead>\n<tr>\n  <th>Rank</th>\n  <th>Language</th>\n  <th>Popularity, %</th>\n  <th>Source code, %</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>1.</td>\n  <td>Python</td>\n  <td>16.1</td>\n  <td>11.3</td>\n</tr>\n<tr>\n  <td>2.</td>\n  <td>Java</td>\n  <td>15.3</td>\n  <td>16.6</td>\n</tr>\n<tr>\n  <td>3.</td>\n  <td>C</td>\n  <td>9.2</td>\n  <td>17.2</td>\n</tr>\n<tr>\n  <td>4.</td>\n  <td>C++</td>\n  <td>9.1</td>\n  <td>12.6</td>\n</tr>\n<tr>\n  <td>5.</td>\n  <td>PHP</td>\n  <td>8.5</td>\n  <td>24.4</td>\n</tr>\n<tr>\n  <td>6.</td>\n  <td>Ruby</td>\n  <td>8.3</td>\n  <td>2.6</td>\n</tr>\n<tr>\n  <td>7.</td>\n  <td>C#</td>\n  <td>6.1</td>\n  <td>6.5</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>Python (16.1 %) appears to be the most attractive language, followed closely by Java (15.3 %). It\u2019s especially interesting since only 11.3 % of all source code on GitHub is written in Python.</p></li>\n<li>Although there are ten times more lines of code on GitHub in PHP than in Ruby, they have the same stationary distribution.</li>\n<li>What about sticking to a language ?\n<ul>\n<li>Developers coding in one of the 5 most popular languages (Java, C, C++, PHP, Ruby) are most likely to switch to Python with approx. 22% chance on average.</li>\n<li>Similarly, a Visual Basic developer has more chance (24%) to move to C# while Erik\u2019s is almost sure in this transition with 92% chance.</li>\n<li>People using numerical and statistical environments such as Fortran (36 %), Matlab (33 %) or R (40 %) are most likely to switch to Python in contrast to Erik\u2019s matrix which predicts C as their future language.</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong> <a href=\"https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c\"><strong>Python Quirks</strong></a> <a href=\"https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c\"><strong>: Comments</strong></a></p>\n\n<ul>\n<li>Python developers put comments in their code.</li>\n</ul>\n\n<pre><code>    # Like this\n    \"\"\"\n    And like this\n    \"\"\"\n    \"And like this.\"\n    [\"Not usually like this\",\"but it's possible\"]\n</code></pre>\n\n<ul>\n<li>Philip Trauner timed all of these.</li>\n<li>Actual # comments are obviously way faster.</li>\n<li>He also shows the AST difference.</li>\n<li>Don\u2019t abuse the language. Unused unreferenced strings are not free.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-2\"><strong>Python 3.6.2 is out!</strong></a></p>\n\n<ul>\n<li><strong>Security</strong>\n<ul>\n<li>bpo-30730: Prevent environment variables injection in subprocess on Windows. Prevent passing other environment variables and command arguments.</li>\n<li>bpo-30694: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple security vulnerabilities including: CVE-2017-9233 (External entity infinite loop DoS), CVE-2016-9063 (Integer overflow, re-fix), CVE-2016-0718 (Fix regression bugs from 2.2.0\u2019s fix to CVE-2016-0718) and CVE-2012-0876 (Counter hash flooding with SipHash). Note: the CVE-2016-5300 (Use os-specific entropy sources like getrandom) doesn\u2019t impact Python, since Python already gets entropy from the OS to set the expat secret using XML_SetHashSalt().</li>\n<li>bpo-30500: Fix urllib.parse.splithost() to correctly parse fragments. For example, splithost('//127.0.0.1#@evil.com/') now correctly returns the 127.0.0.1 host, instead of treating @evil.com as the host in an authentification (login@host).</li>\n</ul></li>\n<li><strong>Core and Builtins</strong>\n<ul>\n<li>bpo-29104: Fixed parsing backslashes in f-strings.</li>\n<li>bpo-27945: Fixed various segfaults with dict when input collections are mutated during searching, inserting or comparing. Based on patches by Duane Griffin and Tim Mitchell.</li>\n<li>bpo-30039: If a KeyboardInterrupt happens when the interpreter is in the middle of resuming a chain of nested \u2018yield from\u2019 or \u2018await\u2019 calls, it\u2019s now correctly delivered to the innermost frame.</li>\n<li>Library</li>\n<li>bpo-30038: Fix race condition between signal delivery and wakeup file descriptor. Patch by Nathaniel Smith.</li>\n<li>bpo-23894: lib2to3 now recognizes rb'...' and f'...' strings.</li>\n<li>bpo-24484: Avoid race condition in multiprocessing cleanup (#2159)</li>\n</ul></li>\n<li><strong>Windows</strong>\n<ul>\n<li>bpo-30687: Locate msbuild.exe on Windows when building rather than vcvarsall.bat</li>\n<li>bpo-30450: The build process on Windows no longer depends on Subversion, instead pulling external code from GitHub via a Python script. If Python 3.6 is not found on the system (via py -3.6), NuGet is used to download a copy of 32-bit Python.</li>\n</ul></li>\n<li><strong>Plus about 40 more fixes / changes</strong></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/adriennefriend/imposter-syndrome-disclaimer\"><strong>Contributing to Open Source Projects: Imposter Syndrome Disclaimer</strong></a></p>\n\n<ul>\n<li>\u201cHow to contribute\u201d often part of OSS projects.</li>\n<li>Adrienne Lowe of codingwithknives.com has an \u201cImposter Syndrome Disclaimer\u201d to include in your contributing documentation that\u2019s pretty great.</li>\n<li>She\u2019s also <a href=\"https://github.com/adriennefriend/imposter-syndrome-disclaimer/blob/master/examples.md\">collecting examples</a> of people using it, or similar.</li>\n<li>From the disclaimer: </li>\n</ul>\n\n<blockquote>\n  <p>\u201c<em>Imposter syndrome disclaimer</em>: I want your help. No really, I do.\n  There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.\n  I assure you, that's not the case.\n  \u2026\n  And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)\u201c</p>\n</blockquote>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.technologyreview.com/s/604087/the-dark-secret-at-the-heart-of-ai/\"><strong>The Dark Secret at the Heart of AI</strong></a></p>\n\n<ul>\n<li>via MIT Technology Review</li>\n<li>There\u2019s a big problem with AI: even its creators can\u2019t explain how it works</li>\n<li>Last year, an experimental vehicle, developed by researchers at the chip maker Nvidia, didn\u2019t look different from other autonomous cars, but it was unlike anything demonstrated by Google, Tesla, or General Motors, and it showed the rising power of artificial intelligence. The car didn\u2019t follow a single instruction provided by an engineer or programmer. Instead, it relied entirely on an algorithm that had taught itself to drive by watching a human do it.</li>\n<li>The result seems to match the responses you\u2019d expect from a human driver. But what if one day it did something unexpected\u2014crashed into a tree, or sat at a green light? </li>\n<li>As things stand now, it might be difficult to find out why.</li>\n<li>And you can\u2019t ask it: there is no obvious way to design such a system so that it could always explain why it did what it did.</li>\n<li>There\u2019s already an argument that being able to interrogate an AI system about how it reached its conclusions is a fundamental legal right</li>\n<li>We\u2019ve never before built machines that operate in ways their creators don\u2019t understand. How well can we expect to communicate\u2014and get along with\u2014intelligent machines that could be unpredictable and inscrutable</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"http://jamescooke.info/arrange-act-assert-pattern-for-python-developers.html\"><strong>Arrange Act Assert pattern for Python developers</strong></a></p>\n\n<ul>\n<li>James Cooke</li>\n<li>Good introduction to test case structure.</li>\n<li>Split your tests into setup, action, assertions.</li>\n<li>Pattern also known by:\n<ul>\n<li>Given, When, Then</li>\n<li>Setup, Test, Teardown</li>\n<li>Setup, Exercise, Verify, Teardown</li>\n</ul></li>\n<li>Also covered in:\n<ul>\n<li><a href=\"http://testandcode.com/10\">testandcode.com/10</a></li>\n<li><a href=\"http://pythontesting.net/strategy/given-when-then-2/\">pythontesting.net/strategy/given-when-then-2</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://blog.sourced.tech/post/language_migrations/\"><strong>Analyzing GitHub, how developers change programming languages over time</strong></a></p>\n\n<ul>\n<li>From source{d}: Building the first AI that understands code</li>\n<li>Have you ever been struggling with an nth obscure project, thinking : \u201cI could do the job with this language but why not switch to another one which would be more enjoyable to work with\u201d ?</li>\n<li>Derived from <a href=\"https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html\"><strong>The eigenvector of \u201cWhy we moved from language X to language Y\u201d</strong></a><strong>,</strong> <a href=\"https://github.com/erikbern/eigenstuff\"><strong>Erik Bernhardsson</strong></a> <em>*</em>*</li>\n<li>Dataset available\n<ul>\n<li>4.5 Million GitHub users</li>\n<li>393 different languages</li>\n<li>10 TB of source code in total</li>\n</ul></li>\n<li>I find it nice to visualize developer\u2019s language usage history with a kind of <a href=\"https://en.wikipedia.org/wiki/Gantt_chart\"><strong>Gantt diagram</strong></a>.</li>\n<li>We did not include Javascript because</li>\n<li>Most popular languages on GitHub</li>\n<li>At last! Here is the reward: the stationary distribution of our Markov chain. This probability distribution is independent of the initial distribution. It gives information about the stability of the process of random switching between languages. </li>\n<li><table>\n<thead>\n<tr>\n  <th>Rank</th>\n  <th>Language</th>\n  <th>Popularity, %</th>\n  <th>Source code, %</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>1.</td>\n  <td>Python</td>\n  <td>16.1</td>\n  <td>11.3</td>\n</tr>\n<tr>\n  <td>2.</td>\n  <td>Java</td>\n  <td>15.3</td>\n  <td>16.6</td>\n</tr>\n<tr>\n  <td>3.</td>\n  <td>C</td>\n  <td>9.2</td>\n  <td>17.2</td>\n</tr>\n<tr>\n  <td>4.</td>\n  <td>C++</td>\n  <td>9.1</td>\n  <td>12.6</td>\n</tr>\n<tr>\n  <td>5.</td>\n  <td>PHP</td>\n  <td>8.5</td>\n  <td>24.4</td>\n</tr>\n<tr>\n  <td>6.</td>\n  <td>Ruby</td>\n  <td>8.3</td>\n  <td>2.6</td>\n</tr>\n<tr>\n  <td>7.</td>\n  <td>C#</td>\n  <td>6.1</td>\n  <td>6.5</td>\n</tr>\n</tbody>\n</table></li>\n<li><p>Python (16.1 %) appears to be the most attractive language, followed closely by Java (15.3 %). It\u2019s especially interesting since only 11.3 % of all source code on GitHub is written in Python.</p></li>\n<li>Although there are ten times more lines of code on GitHub in PHP than in Ruby, they have the same stationary distribution.</li>\n<li>What about sticking to a language ?\n<ul>\n<li>Developers coding in one of the 5 most popular languages (Java, C, C++, PHP, Ruby) are most likely to switch to Python with approx. 22% chance on average.</li>\n<li>Similarly, a Visual Basic developer has more chance (24%) to move to C# while Erik\u2019s is almost sure in this transition with 92% chance.</li>\n<li>People using numerical and statistical environments such as Fortran (36 %), Matlab (33 %) or R (40 %) are most likely to switch to Python in contrast to Erik\u2019s matrix which predicts C as their future language.</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 19 Jul 2017 00:00:00 -0800", "published_parsed": [2017, 7, 19, 8, 0, 0, 2, 200, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "How developers change programming languages over time", "itunes_episode": "35", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:44"}}, "#34 The Real Threat of Artificial Intelligence": {"info": {"title": "#34 The Real Threat of Artificial Intelligence", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#34 The Real Threat of Artificial Intelligence"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/34/the-real-threat-of-artificial-intelligence"}, {"length": "16707368", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/34/the-real-threat-of-artificial-intelligence.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/34/the-real-threat-of-artificial-intelligence", "id": "https://pythonbytes.fm/episodes/3fc90e8b-65ab-4bf7-9700-aba187b96713", "guidislink": false, "summary": "<p>Sponsored by Rollbar! Get the bootstrap plan at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://julien.danjou.info/blog/python-logging-easy-with-daiquiri\"><strong>Easy Python logging with daiquiri</strong></a></p>\n\n<ul>\n<li>Standard library logging package is non-intuitive. </li>\n<li>Daiquiri is better.</li>\n<li>Logs to stderr by default.</li>\n<li>Use colors if logging to a terminal.</li>\n<li>Support file logging.</li>\n<li>Use program name as the name of the logging file so providing just a directory for logging will work.</li>\n<li>Support syslog.</li>\n<li>Support journald.</li>\n<li>JSON output support.</li>\n<li>Support of arbitrary key/value context information providing.</li>\n<li>Capture the warnings emitted by the warnings module.</li>\n<li>Native logging of any exception.</li>\n<li>This works:</li>\n</ul>\n\n<pre><code>    import daiquiri\n    daiquiri.setup()\n    logger = daiquiri.getLogger()\n    logger.error(\"something wrong happened\")\n</code></pre>\n\n<ul>\n<li>Also check out <a href=\"https://github.com/metachris/logzero/blob/master/README.rst\">logzero</a></li>\n</ul>\n\n<p><code>\n    from logzero import logger\n    logger.debug(\"hello\")\n    logger.info(\"info\")\n    logger.warn(\"warn\")\n    logger.error(\"error\")\n</code></p>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.nytimes.com/2017/06/24/opinion/sunday/artificial-intelligence-economic-inequality.html\"><strong>The Real Threat of Artificial Intelligence</strong></a></p>\n\n<ul>\n<li>What worries you about the coming world of artificial intelligence?</li>\n<li>Too often the answer to this question resembles the plot of a sci-fi thriller. People worry that developments in A.I. will bring about the \u201csingularity\u201d</li>\n<li>This doesn\u2019t mean we have nothing to worry about. </li>\n<li>On the contrary, the A.I. products that now exist are improving faster than most people realize and promise to radically transform our world, not always for the better</li>\n<li>AI will reshape what work means and how wealth is created, leading to unprecedented economic inequalities and even altering the global balance of power</li>\n<li>This kind of A.I. is spreading to thousands of domains (not just loans), and as it does, it will eliminate many jobs. Bank tellers, customer service representatives, telemarketers, stock and bond traders, even paralegals and radiologists will gradually be replaced by such software.</li>\n<li>Part of the answer will involve educating or retraining people in tasks A.I. tools aren\u2019t good at. Artificial intelligence is poorly suited for jobs involving creativity, planning and \u201ccross-domain\u201d thinking \u2014 for example, the work of a trial lawyer. </li>\n<li>The solution to the problem of mass unemployment, I suspect, will involve \u201cservice jobs of love.\u201d These are jobs that A.I. cannot do, that society needs and that give people a sense of purpose. Examples include accompanying an older person to visit a doctor, mentoring at an orphanage</li>\n<li>This leads to the final and perhaps most consequential challenge of A.I. The Keynesian approach I have sketched out may be feasible in the United States and China, which will have enough successful A.I. businesses to fund welfare initiatives via taxes. But what about other countries?</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.buildo.io/the-three-laws-of-config-dynamics-1e9724593aa9\"><strong>The three laws of config dynamics</strong></a></p>\n\n<ul>\n<li>The birth of configuration files</li>\n<li><strong>Law 1</strong> Config values can be transformed from one form to another, but can be neither created nor destroyed.</li>\n<li><strong>Law 2</strong> The total length of a config file can only increase over time.</li>\n<li><strong>Law 3</strong> The length of a perfect config file in a development environment is exactly equal to zero.</li>\n<li>Docker can help</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.com/arcgis-api-for-python-explorers-corner/a-few-tips-to-get-you-started-with-jupyter-notebook-8f9b172d98cb\"><strong>Five Tips To Get You Started With Jupyter Notebook</strong></a></p>\n\n<ul>\n<li>Don\u2019t Put Your Entire Code in a Single Cell</li>\n<li>There are different types of cells</li>\n<li>Executing Cells (shift + enter)</li>\n<li>Explore Interactive Mapping Options (via ArcGIS)</li>\n<li>To explore new modules, use questions and TAB auto-complete (Object?)</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://m.facebook.com/notes/kent-beck/cost-of-coupling-versus-cost-of-de-coupling/1578239345542257/\"><strong>Cost of Coupling Versus Cost of De-coupling</strong></a></p>\n\n<ul>\n<li>Two elements are coupled wrt a given change iff changing one element implies changing the other.</li>\n<li>Decoupled code, or loosely coupled, follows DRY principles, uses smaller components, is more modular, etc. But also has more files, more classes, handles more cases, and takes longer to write.</li>\n<li>There is a place for both. </li>\n<li>Kent describes two phases, Explore and Extract.</li>\n<li>Explore\n<ul>\n<li>more learning</li>\n<li>tracer bullets, spike projects, first drafts, happy path implementation</li>\n<li>coupled code, copy/paste coding, etc work fine and are faster because the design and architecture aren\u2019t the goal, learning is the goal</li>\n<li>answer questions quickly</li>\n<li>ask better questions based on learnings</li>\n</ul></li>\n<li>Extract\n<ul>\n<li>Candidate Release, final draft, architected</li>\n<li>Economies of scale take over</li>\n<li>Return on investment</li>\n<li>Minimize cost of changes as code base grows.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://pybit.es/special-100days-of-code.html\"><strong>100 Days of Code at PyBites</strong></a></p>\n\n<ul>\n<li>The Challenge: <a href=\"https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4\">Join the #100DaysOfCode</a></li>\n<li>Stats: <a href=\"https://github.com/pybites/100DaysOfCode/tree/master/100\">We wrote roughly 5K lines of code</a>, divided into 100 scripts, one each day</li>\n<li>We <a href=\"https://github.com/pybites/100DaysOfCode/tree/master/007\">auto-tweeted</a> our progress each day which was tracked in our <a href=\"https://github.com/pybites/100DaysOfCode/blob/master/LOG.md\">log file</a>.</li>\n<li>Module Index: We ended up using exactly 100 modules as well (weird coincidence LOL)</li>\n<li>Showcase of 10 Utilities</li>\n<li>The rumors are true: our next 100 days project will be around learning Django</li>\n</ul>\n\n<p>Extra:</p>\n\n<ul>\n<li>First book review of up, <a href=\"http://chrisshaver64.ddns.net/bl0046\">http://chrisshaver64.ddns.net/bl0046</a></li>\n<li>Python for Entrepreneurs has officially launch! Over 19 hours of content. Get it at <a href=\"https://talkpython.fm/launch\">https://talkpython.fm/launch</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar! Get the bootstrap plan at <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://julien.danjou.info/blog/python-logging-easy-with-daiquiri\"><strong>Easy Python logging with daiquiri</strong></a></p>\n\n<ul>\n<li>Standard library logging package is non-intuitive. </li>\n<li>Daiquiri is better.</li>\n<li>Logs to stderr by default.</li>\n<li>Use colors if logging to a terminal.</li>\n<li>Support file logging.</li>\n<li>Use program name as the name of the logging file so providing just a directory for logging will work.</li>\n<li>Support syslog.</li>\n<li>Support journald.</li>\n<li>JSON output support.</li>\n<li>Support of arbitrary key/value context information providing.</li>\n<li>Capture the warnings emitted by the warnings module.</li>\n<li>Native logging of any exception.</li>\n<li>This works:</li>\n</ul>\n\n<pre><code>    import daiquiri\n    daiquiri.setup()\n    logger = daiquiri.getLogger()\n    logger.error(\"something wrong happened\")\n</code></pre>\n\n<ul>\n<li>Also check out <a href=\"https://github.com/metachris/logzero/blob/master/README.rst\">logzero</a></li>\n</ul>\n\n<p><code>\n    from logzero import logger\n    logger.debug(\"hello\")\n    logger.info(\"info\")\n    logger.warn(\"warn\")\n    logger.error(\"error\")\n</code></p>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.nytimes.com/2017/06/24/opinion/sunday/artificial-intelligence-economic-inequality.html\"><strong>The Real Threat of Artificial Intelligence</strong></a></p>\n\n<ul>\n<li>What worries you about the coming world of artificial intelligence?</li>\n<li>Too often the answer to this question resembles the plot of a sci-fi thriller. People worry that developments in A.I. will bring about the \u201csingularity\u201d</li>\n<li>This doesn\u2019t mean we have nothing to worry about. </li>\n<li>On the contrary, the A.I. products that now exist are improving faster than most people realize and promise to radically transform our world, not always for the better</li>\n<li>AI will reshape what work means and how wealth is created, leading to unprecedented economic inequalities and even altering the global balance of power</li>\n<li>This kind of A.I. is spreading to thousands of domains (not just loans), and as it does, it will eliminate many jobs. Bank tellers, customer service representatives, telemarketers, stock and bond traders, even paralegals and radiologists will gradually be replaced by such software.</li>\n<li>Part of the answer will involve educating or retraining people in tasks A.I. tools aren\u2019t good at. Artificial intelligence is poorly suited for jobs involving creativity, planning and \u201ccross-domain\u201d thinking \u2014 for example, the work of a trial lawyer. </li>\n<li>The solution to the problem of mass unemployment, I suspect, will involve \u201cservice jobs of love.\u201d These are jobs that A.I. cannot do, that society needs and that give people a sense of purpose. Examples include accompanying an older person to visit a doctor, mentoring at an orphanage</li>\n<li>This leads to the final and perhaps most consequential challenge of A.I. The Keynesian approach I have sketched out may be feasible in the United States and China, which will have enough successful A.I. businesses to fund welfare initiatives via taxes. But what about other countries?</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.buildo.io/the-three-laws-of-config-dynamics-1e9724593aa9\"><strong>The three laws of config dynamics</strong></a></p>\n\n<ul>\n<li>The birth of configuration files</li>\n<li><strong>Law 1</strong> Config values can be transformed from one form to another, but can be neither created nor destroyed.</li>\n<li><strong>Law 2</strong> The total length of a config file can only increase over time.</li>\n<li><strong>Law 3</strong> The length of a perfect config file in a development environment is exactly equal to zero.</li>\n<li>Docker can help</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.com/arcgis-api-for-python-explorers-corner/a-few-tips-to-get-you-started-with-jupyter-notebook-8f9b172d98cb\"><strong>Five Tips To Get You Started With Jupyter Notebook</strong></a></p>\n\n<ul>\n<li>Don\u2019t Put Your Entire Code in a Single Cell</li>\n<li>There are different types of cells</li>\n<li>Executing Cells (shift + enter)</li>\n<li>Explore Interactive Mapping Options (via ArcGIS)</li>\n<li>To explore new modules, use questions and TAB auto-complete (Object?)</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://m.facebook.com/notes/kent-beck/cost-of-coupling-versus-cost-of-de-coupling/1578239345542257/\"><strong>Cost of Coupling Versus Cost of De-coupling</strong></a></p>\n\n<ul>\n<li>Two elements are coupled wrt a given change iff changing one element implies changing the other.</li>\n<li>Decoupled code, or loosely coupled, follows DRY principles, uses smaller components, is more modular, etc. But also has more files, more classes, handles more cases, and takes longer to write.</li>\n<li>There is a place for both. </li>\n<li>Kent describes two phases, Explore and Extract.</li>\n<li>Explore\n<ul>\n<li>more learning</li>\n<li>tracer bullets, spike projects, first drafts, happy path implementation</li>\n<li>coupled code, copy/paste coding, etc work fine and are faster because the design and architecture aren\u2019t the goal, learning is the goal</li>\n<li>answer questions quickly</li>\n<li>ask better questions based on learnings</li>\n</ul></li>\n<li>Extract\n<ul>\n<li>Candidate Release, final draft, architected</li>\n<li>Economies of scale take over</li>\n<li>Return on investment</li>\n<li>Minimize cost of changes as code base grows.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://pybit.es/special-100days-of-code.html\"><strong>100 Days of Code at PyBites</strong></a></p>\n\n<ul>\n<li>The Challenge: <a href=\"https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4\">Join the #100DaysOfCode</a></li>\n<li>Stats: <a href=\"https://github.com/pybites/100DaysOfCode/tree/master/100\">We wrote roughly 5K lines of code</a>, divided into 100 scripts, one each day</li>\n<li>We <a href=\"https://github.com/pybites/100DaysOfCode/tree/master/007\">auto-tweeted</a> our progress each day which was tracked in our <a href=\"https://github.com/pybites/100DaysOfCode/blob/master/LOG.md\">log file</a>.</li>\n<li>Module Index: We ended up using exactly 100 modules as well (weird coincidence LOL)</li>\n<li>Showcase of 10 Utilities</li>\n<li>The rumors are true: our next 100 days project will be around learning Django</li>\n</ul>\n\n<p>Extra:</p>\n\n<ul>\n<li>First book review of up, <a href=\"http://chrisshaver64.ddns.net/bl0046\">http://chrisshaver64.ddns.net/bl0046</a></li>\n<li>Python for Entrepreneurs has officially launch! Over 19 hours of content. Get it at <a href=\"https://talkpython.fm/launch\">https://talkpython.fm/launch</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 13 Jul 2017 00:00:00 -0800", "published_parsed": [2017, 7, 13, 8, 0, 0, 3, 194, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The Real Threat of Artificial Intelligence", "itunes_episode": "34", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:22:57"}}, "#33 You should build an Alexa skill": {"info": {"title": "#33 You should build an Alexa skill", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#33 You should build an Alexa skill"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill"}, {"length": "13044969", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/33/you-should-build-an-alexa-skill.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill", "id": "https://pythonbytes.fm/episodes/5a83c8d5-8259-448e-88eb-82a76601e82d", "guidislink": false, "summary": "<p>Sponsored by Rollbar! <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a> </p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://dev.to/sethmichaellarson/linting-as-lightweight-defect-detection-for-python\"><strong>Linting as Lightweight Defect Detection for Python</strong></a></p>\n\n<ul>\n<li>flake8, </li>\n<li>pycodestyle, formerly pep8 tool <a href=\"https://pycodestyle.readthedocs.io/en/latest/\">https://pycodestyle.readthedocs.io/en/latest/</a></li>\n<li>pep257 can be checked with flake8-docstrings</li>\n<li>pydocstyle, <a href=\"http://www.pydocstyle.org/\">http://www.pydocstyle.org/</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@jacquelinewilson/amazon-alexa-skill-recipe-1444e6ee45a6\"><strong>You should build an Alexa skill</strong></a></p>\n\n<ul>\n<li>Jacqueline Wilson wrote <em>Amazon Alexa Skill Recipe with Python 3.6</em></li>\n<li>Ingredients:\n<ul>\n<li>A developer account on <a href=\"https://developer.amazon.com\">https://developer.amazon.com</a> (\u201cAmazon Developer Console\u201d)</li>\n<li>An AWS account on <a href=\"https://aws.amazon.com\">https://aws.amazon.com</a> (\u201cAWS Console\u201d)</li>\n<li>Beginner knowledge of Python 3.x syntax</li>\n</ul></li>\n<li>Create a \u201cWhat\u2019s for dinner\u201d bot</li>\n<li>Amazon calls these utterances:\n<ul>\n<li>\u201cWhat should I have for dinner?\u201d</li>\n<li>\u201cDo you have a dinner idea?\u201d</li>\n<li>\u201cWhat\u2019s for dinner?\u201d</li>\n</ul></li>\n<li>Tie the commands to an AWS Lambda function (returns a JSON response)</li>\n<li>Test via <a href=\"https://echosim.io\">Alexa Skill Testing Tool</a> </li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/damianavila/RISE\"><strong>RISE</strong></a></p>\n\n<ul>\n<li>Reveal IPython Slide Extension</li>\n<li>Making slides with Jupyter notebooks</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://haarcuba.github.io/closer/\"><strong>Closer</strong></a></p>\n\n<ul>\n<li>Run, monitor and close remote SSH processes automatically</li>\n<li>Closer was born because I had trouble with killing up processes I set up remotely via SSH. That is, you want to run some SSH process in the background, and then you want to kill it, just like you would a local subprocess.</li>\n<li>Main features:\n<ul>\n<li>kill the remote process (either by choice, or automatically at the end of the calling process)</li>\n<li>capture the remote process\u2019s output</li>\n<li>live monitoring of remote process output</li>\n<li>get a callback upon remote process\u2019 death</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://python.apichecklist.com/\"><strong>Checklist for</strong></a> <a href=\"http://python.apichecklist.com/\"><strong><em>*</a><a href=\"http://python.apichecklist.com/\"></strong>Python libraries APIs</em>*</a></p>\n\n<p><strong>Michael #6:</strong> <a href=\"https://fades.readthedocs.io/en/release_6_0/readme.html\"><strong>Fades</strong></a></p>\n\n<ul>\n<li>Fades is a system that automatically handles the virtualenvs in the cases normally found when writing scripts and simple programs, and even helps to administer big projects.</li>\n<li>fades will automagically create a new virtualenv (or reuse a previous created one), installing the necessary dependencies, and execute your script inside that virtualenv, with the only requirement of executing the script with fades and also marking the required dependencies.</li>\n<li>At the moment you execute the script, fades will search a virtualenv with the marked dependencies, if it doesn\u2019t exists fades will create it, and execute the script in that environment.</li>\n<li>Indicating dependencies (in code or via CLI)</li>\n</ul>\n\n<pre><code>    import somemodule   # fades == 3\n    import somemodule   # fades &gt;= 2.1\n    import somemodule   # fades &gt;=2.1,&lt;2.8,!=2.6.5\n</code></pre>\n\n<ul>\n<li>Can control the Python version the env is based upon</li>\n<li>Can ask for a \u201crefresh\u201d on the virtual env</li>\n<li>You can also configure fades using .ini config files.</li>\n<li>How to clean up old virtualenvs?</li>\n</ul>\n\n<p><strong>Listener comment,</strong> <a href=\"https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time#comment-3400891427\"><strong>RE: Episode 32</strong></a><strong>:</strong></p>\n\n<p>Jan Oglop:  </p>\n\n<p>Hello Michael and Brian, I wanted to thank you for amazing work you do. And let you know that you have helped me to find the working place from my dreams! My colleagues has similar hobbies and loves python as much as I do!</p>\n\n<p>Thank you again!</p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by Rollbar! <a href=\"https://pythonbytes.fm/rollbar\">pythonbytes.fm/rollbar</a> </p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://dev.to/sethmichaellarson/linting-as-lightweight-defect-detection-for-python\"><strong>Linting as Lightweight Defect Detection for Python</strong></a></p>\n\n<ul>\n<li>flake8, </li>\n<li>pycodestyle, formerly pep8 tool <a href=\"https://pycodestyle.readthedocs.io/en/latest/\">https://pycodestyle.readthedocs.io/en/latest/</a></li>\n<li>pep257 can be checked with flake8-docstrings</li>\n<li>pydocstyle, <a href=\"http://www.pydocstyle.org/\">http://www.pydocstyle.org/</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@jacquelinewilson/amazon-alexa-skill-recipe-1444e6ee45a6\"><strong>You should build an Alexa skill</strong></a></p>\n\n<ul>\n<li>Jacqueline Wilson wrote <em>Amazon Alexa Skill Recipe with Python 3.6</em></li>\n<li>Ingredients:\n<ul>\n<li>A developer account on <a href=\"https://developer.amazon.com\">https://developer.amazon.com</a> (\u201cAmazon Developer Console\u201d)</li>\n<li>An AWS account on <a href=\"https://aws.amazon.com\">https://aws.amazon.com</a> (\u201cAWS Console\u201d)</li>\n<li>Beginner knowledge of Python 3.x syntax</li>\n</ul></li>\n<li>Create a \u201cWhat\u2019s for dinner\u201d bot</li>\n<li>Amazon calls these utterances:\n<ul>\n<li>\u201cWhat should I have for dinner?\u201d</li>\n<li>\u201cDo you have a dinner idea?\u201d</li>\n<li>\u201cWhat\u2019s for dinner?\u201d</li>\n</ul></li>\n<li>Tie the commands to an AWS Lambda function (returns a JSON response)</li>\n<li>Test via <a href=\"https://echosim.io\">Alexa Skill Testing Tool</a> </li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/damianavila/RISE\"><strong>RISE</strong></a></p>\n\n<ul>\n<li>Reveal IPython Slide Extension</li>\n<li>Making slides with Jupyter notebooks</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://haarcuba.github.io/closer/\"><strong>Closer</strong></a></p>\n\n<ul>\n<li>Run, monitor and close remote SSH processes automatically</li>\n<li>Closer was born because I had trouble with killing up processes I set up remotely via SSH. That is, you want to run some SSH process in the background, and then you want to kill it, just like you would a local subprocess.</li>\n<li>Main features:\n<ul>\n<li>kill the remote process (either by choice, or automatically at the end of the calling process)</li>\n<li>capture the remote process\u2019s output</li>\n<li>live monitoring of remote process output</li>\n<li>get a callback upon remote process\u2019 death</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"http://python.apichecklist.com/\"><strong>Checklist for</strong></a> <a href=\"http://python.apichecklist.com/\"><strong><em>*</a><a href=\"http://python.apichecklist.com/\"></strong>Python libraries APIs</em>*</a></p>\n\n<p><strong>Michael #6:</strong> <a href=\"https://fades.readthedocs.io/en/release_6_0/readme.html\"><strong>Fades</strong></a></p>\n\n<ul>\n<li>Fades is a system that automatically handles the virtualenvs in the cases normally found when writing scripts and simple programs, and even helps to administer big projects.</li>\n<li>fades will automagically create a new virtualenv (or reuse a previous created one), installing the necessary dependencies, and execute your script inside that virtualenv, with the only requirement of executing the script with fades and also marking the required dependencies.</li>\n<li>At the moment you execute the script, fades will search a virtualenv with the marked dependencies, if it doesn\u2019t exists fades will create it, and execute the script in that environment.</li>\n<li>Indicating dependencies (in code or via CLI)</li>\n</ul>\n\n<pre><code>    import somemodule   # fades == 3\n    import somemodule   # fades &gt;= 2.1\n    import somemodule   # fades &gt;=2.1,&lt;2.8,!=2.6.5\n</code></pre>\n\n<ul>\n<li>Can control the Python version the env is based upon</li>\n<li>Can ask for a \u201crefresh\u201d on the virtual env</li>\n<li>You can also configure fades using .ini config files.</li>\n<li>How to clean up old virtualenvs?</li>\n</ul>\n\n<p><strong>Listener comment,</strong> <a href=\"https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time#comment-3400891427\"><strong>RE: Episode 32</strong></a><strong>:</strong></p>\n\n<p>Jan Oglop:  </p>\n\n<p>Hello Michael and Brian, I wanted to thank you for amazing work you do. And let you know that you have helped me to find the working place from my dreams! My colleagues has similar hobbies and loves python as much as I do!</p>\n\n<p>Thank you again!</p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 06 Jul 2017 00:00:00 -0800", "published_parsed": [2017, 7, 6, 8, 0, 0, 3, 187, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "You should build an Alexa skill", "itunes_episode": "33", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:17:49"}}, "#32 8 ways to contribute to open source when you have no time": {"info": {"title": "#32 8 ways to contribute to open source when you have no time", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#32 8 ways to contribute to open source when you have no time"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time"}, {"length": "55739172", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/32/8-ways-to-contribute-to-open-source-when-you-have-no-time.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time", "id": "https://pythonbytes.fm/episodes/f3f51bb4-3e11-4fa5-9b6d-4096e381c08f", "guidislink": false, "summary": "<p><strong>Brian #1:</strong>  <a href=\"https://medium.com/@plotlygraphs/introducing-dash-5ecf7191b503\"><strong>Introducing Dash</strong></a></p>\n\n<ul>\n<li>UI library for analytical web applications</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://lwn.net/Articles/723949/\"><strong>Keeping Python competitive</strong></a></p>\n\n<ul>\n<li>Article on LWN, interview with Victor Stinner</li>\n<li>He sees a need to improve Python performance in order to keep it competitive with other languages.</li>\n<li>Not as easy to optimize as other languages. For one thing, the C API blocks progress in this area</li>\n<li>Python 3.7 is as fast as Python 2.7 on most benchmarks, but 2.7 was released in 2010. Users are now comparing Python performance to that of Rust or Go, which had only been recently announced in 2010. </li>\n<li>In his opinion, the Python core developers need to find a way to speed Python up by a factor of two in order for it to continue to be successful.</li>\n<li>JITs may be part of the answer, notably Pyjion by Dino Viehland and Brett Cannon</li>\n<li>An attendee suggested Cython, which does AoT compilation, but its types are not Pythonic. He suggested that it might be possible to use the new type hints and Cython to create something more Pythonic.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\"><strong>PyPI Quick and Dirty</strong></a></p>\n\n<ul>\n<li>A completely incomplete guide to packaging a Python module and sharing it with the world on PyPI. - Hynek Schlawack</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/keon/algorithms\"><strong>Minimal examples of data structures and algorithms in Python</strong></a></p>\n\n<ul>\n<li>Simple algorithmic examples in Python, including\n<ul>\n<li>linked lists</li>\n<li>reversing linked lists</li>\n<li>GCD</li>\n<li>Queues</li>\n<li>Binary search</li>\n<li>depth first search</li>\n<li>many, many more</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://opensource.com/article/17/6/find-time-contribute\"><strong>8 ways to contribute to open source when you have no time</strong></a></p>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.numfocus.org/blog/numpy-receives-first-ever-funding-thanks-to-moore-foundation/\"><strong>NumPy receives first ever funding, thanks to Moore Foundation</strong></a></p>\n\n<ul>\n<li>For the first time ever, NumPy\u2014a core project for the Python scientific computing stack\u2014has received grant funding.</li>\n<li>The proposal, \u201c<a href=\"https://www.moore.org/grant-detail?grantId=GBMF5447\">Improving NumPy for Better Data Science</a>\u201d will receive $645,020 from the Moore Foundation over 2 years, with the funding going to UC Berkeley Institute for Data Science. </li>\n<li>The principal investigator is <a href=\"https://bids.berkeley.edu/people/nathaniel-smith\">Dr. Nathaniel Smith</a>.</li>\n<li>The NumPy project was started in 2006 by <a href=\"https://www.numfocus.org/about/people/advisory-council/\">Travis Oliphant</a>.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong>  <a href=\"https://medium.com/@plotlygraphs/introducing-dash-5ecf7191b503\"><strong>Introducing Dash</strong></a></p>\n\n<ul>\n<li>UI library for analytical web applications</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://lwn.net/Articles/723949/\"><strong>Keeping Python competitive</strong></a></p>\n\n<ul>\n<li>Article on LWN, interview with Victor Stinner</li>\n<li>He sees a need to improve Python performance in order to keep it competitive with other languages.</li>\n<li>Not as easy to optimize as other languages. For one thing, the C API blocks progress in this area</li>\n<li>Python 3.7 is as fast as Python 2.7 on most benchmarks, but 2.7 was released in 2010. Users are now comparing Python performance to that of Rust or Go, which had only been recently announced in 2010. </li>\n<li>In his opinion, the Python core developers need to find a way to speed Python up by a factor of two in order for it to continue to be successful.</li>\n<li>JITs may be part of the answer, notably Pyjion by Dino Viehland and Brett Cannon</li>\n<li>An attendee suggested Cython, which does AoT compilation, but its types are not Pythonic. He suggested that it might be possible to use the new type hints and Cython to create something more Pythonic.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/\"><strong>PyPI Quick and Dirty</strong></a></p>\n\n<ul>\n<li>A completely incomplete guide to packaging a Python module and sharing it with the world on PyPI. - Hynek Schlawack</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/keon/algorithms\"><strong>Minimal examples of data structures and algorithms in Python</strong></a></p>\n\n<ul>\n<li>Simple algorithmic examples in Python, including\n<ul>\n<li>linked lists</li>\n<li>reversing linked lists</li>\n<li>GCD</li>\n<li>Queues</li>\n<li>Binary search</li>\n<li>depth first search</li>\n<li>many, many more</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://opensource.com/article/17/6/find-time-contribute\"><strong>8 ways to contribute to open source when you have no time</strong></a></p>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.numfocus.org/blog/numpy-receives-first-ever-funding-thanks-to-moore-foundation/\"><strong>NumPy receives first ever funding, thanks to Moore Foundation</strong></a></p>\n\n<ul>\n<li>For the first time ever, NumPy\u2014a core project for the Python scientific computing stack\u2014has received grant funding.</li>\n<li>The proposal, \u201c<a href=\"https://www.moore.org/grant-detail?grantId=GBMF5447\">Improving NumPy for Better Data Science</a>\u201d will receive $645,020 from the Moore Foundation over 2 years, with the funding going to UC Berkeley Institute for Data Science. </li>\n<li>The principal investigator is <a href=\"https://bids.berkeley.edu/people/nathaniel-smith\">Dr. Nathaniel Smith</a>.</li>\n<li>The NumPy project was started in 2006 by <a href=\"https://www.numfocus.org/about/people/advisory-council/\">Travis Oliphant</a>.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Sat, 01 Jul 2017 00:00:00 -0800", "published_parsed": [2017, 7, 1, 8, 0, 0, 5, 182, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "8 ways to contribute to open source when you have no time", "itunes_episode": "32", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:23:10"}}, "#31 You should have a change log": {"info": {"title": "#31 You should have a change log", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#31 You should have a change log"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/31/you-should-have-a-change-log"}, {"length": "15623808", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/31/you-should-have-a-change-log.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/31/you-should-have-a-change-log", "id": "https://pythonbytes.fm/episodes/eaf666af-5bfa-4777-b61a-8e4e4b254161", "guidislink": false, "summary": "<p><strong>Brian #1:</strong> <a href=\"https://github.com/schapman1974/tinymongo\"><strong>TinyMongo</strong></a></p>\n\n<ul>\n<li>Like MongoDB, but built on top of TinyDB.</li>\n<li>Even runs on a Raspberry Pi, according to Stephen</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/shopnilsazal/validus\"><strong>A dead simple Python data validation library</strong></a></p>\n\n<ul>\n<li><code>validus.isemail('someone@example.com')</code>\n<ul>\n<li>Validation functions include:</li>\n</ul></li>\n<li>isrgbcolor()</li>\n<li>isphone()</li>\n<li>isisbn()</li>\n<li>isipv4()</li>\n<li>isint()</li>\n<li>isfloat()</li>\n<li>isslug()</li>\n<li>isuuid()\n<ul>\n<li>Requires Python 3.3+</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://documen.tician.de/pudb/index.html\"><strong>PuDB</strong></a></p>\n\n<ul>\n<li>In episode 29, <a href=\"https://pythonbytes.fm/29\">https://pythonbytes.fm/29</a>, I talked about launching pdb from pytest failures.</li>\n<li><a href=\"https://twitter.com/kidpixo\">@kidpixo</a> pointed out that PuDB was a better debugger and can also be launched from pytest failures.</li>\n<li>Starting pudb from pytest failed tests (from <a href=\"https://documen.tician.de/pudb/starting.html#usage-with-pytest\">docs</a>): \n<code>pytest --pdbcls pudb.debugger:Debugger --pdb --capture=no</code></li>\n<li>Using <a href=\"https://pypi.python.org/pypi/pytest-pudb\">pytest-pudb</a> plugin to do the same:\n<code>pytest --pudb</code></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pyup.io/posts/analyzing-django-requirement-files-on-github/\"><strong>Analyzing Django requirement files on GitHub</strong></a></p>\n\n<ul>\n<li>From the pyup.io guys</li>\n<li>Django is the most popular Python web framework. </li>\n<li>It is now almost 12 years old and is used on all kinds of different projects.</li>\n<li>Django developers pin their requirements (64%): Pinned or freezed requirements (Django==1.8.12) make builds predictable and deterministic.</li>\n<li>Django 1.8 is the most popular major release (24%)\n<ul>\n<li>A bit worrisome are the 1.9 (14%), 1.7 (13%) and 1.6 (13%) releases on the second, third and fourth place. All of them are no longer receiving security updates, 1.7 and 1.6 went EOL over 2 years ago.</li>\n</ul></li>\n<li>Yikes: Only 2% of all Django projects are on a secure release\n<ul>\n<li>Among all projects, more than 60% use a Django release with one or more known security vulnerabilities. Only 2% are using a secure Django release.</li>\n<li>On the remaining part of more than 30% it's unclear what exactly is going to be installed. That's because the Django release is either unpinned or has a range.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Changelogs</strong></p>\n\n<ul>\n<li><a href=\"http://keepachangelog.com\">http://keepachangelog.com</a></li>\n<li><a href=\"https://github.com/hawkowl/towncrier\">https://github.com/hawkowl/towncrier</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://dbader.org/blog/understanding-asynchronous-programming-in-python\"><strong>Understanding Asynchronous Programming in Python</strong></a></p>\n\n<ul>\n<li>by Doug Farrell via Dan Bader\u2019s site</li>\n<li>A synchronous program is what most of us started out writing, and can be thought of as performing one execution step at a time, one after another.</li>\n<li>Example: A web server\n<ul>\n<li>Could be synchronous</li>\n<li>Could be fully optimized but</li>\n<li>You\u2019re at best still waiting on network IO back to all the web clients</li>\n</ul></li>\n<li>The Real World is Asynchronous: <em>Kids are a long running task with high priority, superseding any other task we might be doing, like the checkbook or laundry</em>.</li>\n<li>Example 1: Synchronous Programming (using queuing)</li>\n<li>Example 2: Simple Cooperative Concurrency (using generators)</li>\n<li>Example 3: Cooperative Concurrency With Blocking Calls (same, but with slow operations)</li>\n<li>Example 4: Cooperative Concurrency With Non-Blocking Calls (gevent)</li>\n<li>Example 5: Synchronous (Blocking) HTTP Downloads</li>\n<li>Example 6: Asynchronous (Non-Blocking) HTTP Downloads With gevent</li>\n<li>Example 7: Asynchronous (Non-Blocking) HTTP Downloads With Twisted</li>\n<li>Example 8: Asynchronous (Non-Blocking) HTTP Downloads With Twisted Callbacks</li>\n</ul>\n\n<p>Errata/Giving Credit:</p>\n\n<ul>\n<li>Also in episode 29, <a href=\"https://pythonbytes.fm/29\">https://pythonbytes.fm/29</a>, I talked about pipcache as an alias for pip download. I think I said the author of a blog post contacted me. It wasn\u2019t him. It was <a href=\"https://twitter.com/kidpixo\">@kidpixo</a>. Sorry kidpixo, keep the ideas coming.</li>\n</ul>\n\n<p>For fun: Python Private Methods</p>\n\n<ul>\n<li><a href=\"http://turnoff.us/geek/python-private-methods/\">http://turnoff.us/geek/python-private-methods/</a></li>\n</ul>\n\n<p>Our news</p>\n\n<ul>\n<li>Beta 3 of <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> should come out this week with Chapter 7: Using pytest with other tools, which includes using it with pdb, coverage.py, mock, tox, and Jenkins.\n<ul>\n<li>Next beta will be the appendices, including a clean up and rewrite of pip and venv appendices, plus a plugin sampler pack, and a tutorial on packaging.</li>\n<li>Thanks to everyone who has submitted Errata. </li>\n</ul></li>\n<li>Finished recording RESTful and HTTP Services in Pyramid AND MongoDB for Python Developers. Add your email address at <a href=\"https://training.talkpython.fm\">https://training.talkpython.fm</a> to get notified upon release of each.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong> <a href=\"https://github.com/schapman1974/tinymongo\"><strong>TinyMongo</strong></a></p>\n\n<ul>\n<li>Like MongoDB, but built on top of TinyDB.</li>\n<li>Even runs on a Raspberry Pi, according to Stephen</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/shopnilsazal/validus\"><strong>A dead simple Python data validation library</strong></a></p>\n\n<ul>\n<li><code>validus.isemail('someone@example.com')</code>\n<ul>\n<li>Validation functions include:</li>\n</ul></li>\n<li>isrgbcolor()</li>\n<li>isphone()</li>\n<li>isisbn()</li>\n<li>isipv4()</li>\n<li>isint()</li>\n<li>isfloat()</li>\n<li>isslug()</li>\n<li>isuuid()\n<ul>\n<li>Requires Python 3.3+</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://documen.tician.de/pudb/index.html\"><strong>PuDB</strong></a></p>\n\n<ul>\n<li>In episode 29, <a href=\"https://pythonbytes.fm/29\">https://pythonbytes.fm/29</a>, I talked about launching pdb from pytest failures.</li>\n<li><a href=\"https://twitter.com/kidpixo\">@kidpixo</a> pointed out that PuDB was a better debugger and can also be launched from pytest failures.</li>\n<li>Starting pudb from pytest failed tests (from <a href=\"https://documen.tician.de/pudb/starting.html#usage-with-pytest\">docs</a>): \n<code>pytest --pdbcls pudb.debugger:Debugger --pdb --capture=no</code></li>\n<li>Using <a href=\"https://pypi.python.org/pypi/pytest-pudb\">pytest-pudb</a> plugin to do the same:\n<code>pytest --pudb</code></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://pyup.io/posts/analyzing-django-requirement-files-on-github/\"><strong>Analyzing Django requirement files on GitHub</strong></a></p>\n\n<ul>\n<li>From the pyup.io guys</li>\n<li>Django is the most popular Python web framework. </li>\n<li>It is now almost 12 years old and is used on all kinds of different projects.</li>\n<li>Django developers pin their requirements (64%): Pinned or freezed requirements (Django==1.8.12) make builds predictable and deterministic.</li>\n<li>Django 1.8 is the most popular major release (24%)\n<ul>\n<li>A bit worrisome are the 1.9 (14%), 1.7 (13%) and 1.6 (13%) releases on the second, third and fourth place. All of them are no longer receiving security updates, 1.7 and 1.6 went EOL over 2 years ago.</li>\n</ul></li>\n<li>Yikes: Only 2% of all Django projects are on a secure release\n<ul>\n<li>Among all projects, more than 60% use a Django release with one or more known security vulnerabilities. Only 2% are using a secure Django release.</li>\n<li>On the remaining part of more than 30% it's unclear what exactly is going to be installed. That's because the Django release is either unpinned or has a range.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>Changelogs</strong></p>\n\n<ul>\n<li><a href=\"http://keepachangelog.com\">http://keepachangelog.com</a></li>\n<li><a href=\"https://github.com/hawkowl/towncrier\">https://github.com/hawkowl/towncrier</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://dbader.org/blog/understanding-asynchronous-programming-in-python\"><strong>Understanding Asynchronous Programming in Python</strong></a></p>\n\n<ul>\n<li>by Doug Farrell via Dan Bader\u2019s site</li>\n<li>A synchronous program is what most of us started out writing, and can be thought of as performing one execution step at a time, one after another.</li>\n<li>Example: A web server\n<ul>\n<li>Could be synchronous</li>\n<li>Could be fully optimized but</li>\n<li>You\u2019re at best still waiting on network IO back to all the web clients</li>\n</ul></li>\n<li>The Real World is Asynchronous: <em>Kids are a long running task with high priority, superseding any other task we might be doing, like the checkbook or laundry</em>.</li>\n<li>Example 1: Synchronous Programming (using queuing)</li>\n<li>Example 2: Simple Cooperative Concurrency (using generators)</li>\n<li>Example 3: Cooperative Concurrency With Blocking Calls (same, but with slow operations)</li>\n<li>Example 4: Cooperative Concurrency With Non-Blocking Calls (gevent)</li>\n<li>Example 5: Synchronous (Blocking) HTTP Downloads</li>\n<li>Example 6: Asynchronous (Non-Blocking) HTTP Downloads With gevent</li>\n<li>Example 7: Asynchronous (Non-Blocking) HTTP Downloads With Twisted</li>\n<li>Example 8: Asynchronous (Non-Blocking) HTTP Downloads With Twisted Callbacks</li>\n</ul>\n\n<p>Errata/Giving Credit:</p>\n\n<ul>\n<li>Also in episode 29, <a href=\"https://pythonbytes.fm/29\">https://pythonbytes.fm/29</a>, I talked about pipcache as an alias for pip download. I think I said the author of a blog post contacted me. It wasn\u2019t him. It was <a href=\"https://twitter.com/kidpixo\">@kidpixo</a>. Sorry kidpixo, keep the ideas coming.</li>\n</ul>\n\n<p>For fun: Python Private Methods</p>\n\n<ul>\n<li><a href=\"http://turnoff.us/geek/python-private-methods/\">http://turnoff.us/geek/python-private-methods/</a></li>\n</ul>\n\n<p>Our news</p>\n\n<ul>\n<li>Beta 3 of <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> should come out this week with Chapter 7: Using pytest with other tools, which includes using it with pdb, coverage.py, mock, tox, and Jenkins.\n<ul>\n<li>Next beta will be the appendices, including a clean up and rewrite of pip and venv appendices, plus a plugin sampler pack, and a tutorial on packaging.</li>\n<li>Thanks to everyone who has submitted Errata. </li>\n</ul></li>\n<li>Finished recording RESTful and HTTP Services in Pyramid AND MongoDB for Python Developers. Add your email address at <a href=\"https://training.talkpython.fm\">https://training.talkpython.fm</a> to get notified upon release of each.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 21 Jun 2017 00:00:00 -0800", "published_parsed": [2017, 6, 21, 8, 0, 0, 2, 172, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "You should have a change log", "itunes_episode": "31", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:21:50"}}, "#30 You are not Google and other ruminations": {"info": {"title": "#30 You are not Google and other ruminations", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#30 You are not Google and other ruminations"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/30/you-are-not-google-and-other-ruminations"}, {"length": "17280140", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/30/you-are-not-google-and-other-ruminations.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/30/you-are-not-google-and-other-ruminations", "id": "https://pythonbytes.fm/episodes/eefd6b4e-213e-4208-b912-13aad5d4e341", "guidislink": false, "summary": "<h1>Python Bytes 30</h1>\n\n<p>Sponsored by Datadog: Try Datadog and get a free shirt at <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a>.</p>\n\n<p><strong>Brian #1:</strong> <strong>Problems and Solutions are different at different scales</strong></p>\n\n<ul>\n<li><a href=\"https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb\">You are not Google</a></li>\n<li><a href=\"https://aadrake.com/posts/2017-05-20-enough-with-the-microservices.html\">Enough with microservices</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://blog.zappa.io/posts/introducing-nodb-pythonic-data-store-s3\"><strong>Introducing NoDB - a Pythonic Object Store for S3</strong></a></p>\n\n<ul>\n<li>Released in April 2017 by Rich Jones</li>\n<li>An incredibly simple, Pythonic object store based on Amazon's S3 static file storage.</li>\n<li>NoDB isn't a database.. but it sort of looks like one!</li>\n<li>Kind of like a document database, supports indexing</li>\n<li>Can use Pickling or JSON</li>\n<li>Mostly useful for <strong>prototyping</strong>, <strong>casual hacking</strong>, and (maybe) even low-traffic <strong>server-less databases</strong> for <a href=\"https://github.com/Miserlou/Zappa\"><strong>Zappa</strong></a> <strong>apps</strong>!</li>\n<li>Can see a few use cases for <strong>NoDB</strong>:\n<ul>\n<li>Prototyping schemas</li>\n<li>Storing API event responses for later replay</li>\n<li>Capturing event logs</li>\n<li>Storing simple form data (email addresses, etc.)</li>\n<li>Storing non-relational analytics data</li>\n<li>Firing Lambda event triggers</li>\n<li>Version controlling evolving Python objects</li>\n<li>Storing and loading trained machine learning models</li>\n</ul></li>\n<li>https://github.com/Miserlou/NoDB</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/lk-geimfari/elizabeth\"><strong>Elizabeth for mock data</strong></a>\nPart 1: https://medium.com/wemake-services/generating-mock-data-using-elizabeth-part-i-ca5a55b8027c\nPart 2: https://medium.com/wemake-services/generating-mock-data-with-elizabeth-part-ii-bb16a3f3106f\npytest plugin: https://github.com/lk-geimfari/pytest-elizabeth</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://docs.python.org/3.7/whatsnew/3.7.html\"><strong>What\u2019s New In Python 3.7</strong></a></p>\n\n<ul>\n<li>Lang: More than 255 arguments can now be passed to a function, and a function can now have more than 255 parameters.</li>\n<li>Lang: <code>bytes.fromhex()</code> and <code>bytearray.fromhex()</code> now ignore all ASCII whitespace, not only spaces.</li>\n<li>Lang: Circular imports involving absolute imports with binding a submodule to a name are now supported.</li>\n<li>Module: <code>contextlib.asynccontextmanager()</code> has been added.\n<ul>\n<li>Similar to <code>contextmanager()</code>, but creates an asynchronous context manager.</li>\n<li>This function is a decorator that can be used to define a factory function for async with statement asynchronous context managers, without needing to create a class or separate <code>__aenter__()</code> and <code>__aexit__()</code> methods.</li>\n</ul></li>\n<li>Module:The dis() function now is able to disassemble nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes).</li>\n<li>Module: math: New <code>remainder()</code> function, implementing the IEEE 754-style remainder operation.</li>\n<li>Optimization: Added two new opcodes: <code>LOAD_METHOD</code> and <code>CALL_METHOD</code> to avoid instantiation of bound method objects for method calls, which <strong>results in</strong> <strong>method calls being faster up to 20%</strong>.</li>\n<li>Optimization: The <code>os.fwalk()</code> function has been sped up by 2 times.</li>\n</ul>\n\n<p><strong>Brian #5: Hypothesis Testing</strong></p>\n\n<ul>\n<li><a href=\"http://wordaligned.org/articles/unleash-the-test-army\">Unleash the Test Army</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.reddit.com/r/Python/comments/6fvgrf/heroku_switching_default_to_v361/\"><strong>Heroku switching default to v3.6.1</strong></a></p>\n\n<ul>\n<li>Effective Tuesday, June 20th, 2017, new Python applications pushed to Heroku will use the python-3.6.1 runtime by default (instead of python-2.7.13).</li>\n<li>Existing applications will not be affected by this change.</li>\n<li>\u201cLots of new projects start out on heroku all the time, so this is really great news for python 3 adoption.\u201d</li>\n<li>\u201cPython 3 is really happening. I was actually a little worried about the future of Python for a while.\u201d</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 30</h1>\n\n<p>Sponsored by Datadog: Try Datadog and get a free shirt at <a href=\"https://pythonbytes.fm/datadog\">pythonbytes.fm/datadog</a>.</p>\n\n<p><strong>Brian #1:</strong> <strong>Problems and Solutions are different at different scales</strong></p>\n\n<ul>\n<li><a href=\"https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb\">You are not Google</a></li>\n<li><a href=\"https://aadrake.com/posts/2017-05-20-enough-with-the-microservices.html\">Enough with microservices</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://blog.zappa.io/posts/introducing-nodb-pythonic-data-store-s3\"><strong>Introducing NoDB - a Pythonic Object Store for S3</strong></a></p>\n\n<ul>\n<li>Released in April 2017 by Rich Jones</li>\n<li>An incredibly simple, Pythonic object store based on Amazon's S3 static file storage.</li>\n<li>NoDB isn't a database.. but it sort of looks like one!</li>\n<li>Kind of like a document database, supports indexing</li>\n<li>Can use Pickling or JSON</li>\n<li>Mostly useful for <strong>prototyping</strong>, <strong>casual hacking</strong>, and (maybe) even low-traffic <strong>server-less databases</strong> for <a href=\"https://github.com/Miserlou/Zappa\"><strong>Zappa</strong></a> <strong>apps</strong>!</li>\n<li>Can see a few use cases for <strong>NoDB</strong>:\n<ul>\n<li>Prototyping schemas</li>\n<li>Storing API event responses for later replay</li>\n<li>Capturing event logs</li>\n<li>Storing simple form data (email addresses, etc.)</li>\n<li>Storing non-relational analytics data</li>\n<li>Firing Lambda event triggers</li>\n<li>Version controlling evolving Python objects</li>\n<li>Storing and loading trained machine learning models</li>\n</ul></li>\n<li>https://github.com/Miserlou/NoDB</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/lk-geimfari/elizabeth\"><strong>Elizabeth for mock data</strong></a>\nPart 1: https://medium.com/wemake-services/generating-mock-data-using-elizabeth-part-i-ca5a55b8027c\nPart 2: https://medium.com/wemake-services/generating-mock-data-with-elizabeth-part-ii-bb16a3f3106f\npytest plugin: https://github.com/lk-geimfari/pytest-elizabeth</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://docs.python.org/3.7/whatsnew/3.7.html\"><strong>What\u2019s New In Python 3.7</strong></a></p>\n\n<ul>\n<li>Lang: More than 255 arguments can now be passed to a function, and a function can now have more than 255 parameters.</li>\n<li>Lang: <code>bytes.fromhex()</code> and <code>bytearray.fromhex()</code> now ignore all ASCII whitespace, not only spaces.</li>\n<li>Lang: Circular imports involving absolute imports with binding a submodule to a name are now supported.</li>\n<li>Module: <code>contextlib.asynccontextmanager()</code> has been added.\n<ul>\n<li>Similar to <code>contextmanager()</code>, but creates an asynchronous context manager.</li>\n<li>This function is a decorator that can be used to define a factory function for async with statement asynchronous context managers, without needing to create a class or separate <code>__aenter__()</code> and <code>__aexit__()</code> methods.</li>\n</ul></li>\n<li>Module:The dis() function now is able to disassemble nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes).</li>\n<li>Module: math: New <code>remainder()</code> function, implementing the IEEE 754-style remainder operation.</li>\n<li>Optimization: Added two new opcodes: <code>LOAD_METHOD</code> and <code>CALL_METHOD</code> to avoid instantiation of bound method objects for method calls, which <strong>results in</strong> <strong>method calls being faster up to 20%</strong>.</li>\n<li>Optimization: The <code>os.fwalk()</code> function has been sped up by 2 times.</li>\n</ul>\n\n<p><strong>Brian #5: Hypothesis Testing</strong></p>\n\n<ul>\n<li><a href=\"http://wordaligned.org/articles/unleash-the-test-army\">Unleash the Test Army</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.reddit.com/r/Python/comments/6fvgrf/heroku_switching_default_to_v361/\"><strong>Heroku switching default to v3.6.1</strong></a></p>\n\n<ul>\n<li>Effective Tuesday, June 20th, 2017, new Python applications pushed to Heroku will use the python-3.6.1 runtime by default (instead of python-2.7.13).</li>\n<li>Existing applications will not be affected by this change.</li>\n<li>\u201cLots of new projects start out on heroku all the time, so this is really great news for python 3 adoption.\u201d</li>\n<li>\u201cPython 3 is really happening. I was actually a little worried about the future of Python for a while.\u201d</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 15 Jun 2017 00:00:00 -0800", "published_parsed": [2017, 6, 15, 8, 0, 0, 3, 166, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "You are not Google and other ruminations", "itunes_episode": "30", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:24:37"}}, "#29 Responsive Bar Charts with Bokeh, Flask, and Python 3": {"info": {"title": "#29 Responsive Bar Charts with Bokeh, Flask, and Python 3", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#29 Responsive Bar Charts with Bokeh, Flask, and Python 3"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/29/responsive-bar-charts-with-bokeh-flask-and-python-3"}, {"length": "17305272", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/29/responsive-bar-charts-with-bokeh-flask-and-python-3.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/29/responsive-bar-charts-with-bokeh-flask-and-python-3", "id": "https://pythonbytes.fm/episodes/aac4a98b-94c2-4d6d-9442-c0b6253e5a71", "guidislink": false, "summary": "<h1>Python Bytes 29</h1>\n\n<p>Brought to you by Rollbar! <a href=\"http://rollbar.com/pythonbytes\">http://rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html\"><strong>Responsive Bar Charts with Bokeh, Flask and Python 3</strong></a></p>\n\n<ul>\n<li>by Matt Makai at fullstackpython.com</li>\n<li>A walkthrough example of putting together a flask app that uses Bokeh bar charts to visualize data.</li>\n<li>All steps included, no previous experience with Flask or Bokeh required.</li>\n<li>Nice explanation of what the code does without going into too much detail.</li>\n<li>Good jumping off point for further learning, but complete enough to be useful right away.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/Miserlou/Zappa\"><strong>Zappa</strong></a> <a href=\"https://github.com/Miserlou/Zappa\"><strong>Serverless Python Web Services</strong></a></p>\n\n<ul>\n<li><strong>Zappa</strong> makes it super easy to build and deploy all Python WSGI applications on AWS Lambda + API Gateway</li>\n<li>Think of it as \"serverless\" web hosting for your Python apps. </li>\n<li>That means <strong>infinite scaling</strong>, <strong>zero downtime</strong>, <strong>zero maintenance</strong> - and at a fraction of the cost of your current deployments!</li>\n<li>Better still, with Zappa you only pay for the milliseconds of server time that you use, so it's many <strong>orders of magnitude cheaper</strong> than VPS/PaaS hosts and in most cases, it's completely free. Plus, there's no need to worry about load balancing or keeping servers online ever again.</li>\n<li>Asynchronous Task Execution: </li>\n</ul>\n\n<pre><code>    from flask import Flask\n    from zappa.async import task\n    app = Flask(__name__)\n\n    @task\n    def make_pie():\n        \"\"\" This takes a long time! \"\"\"\n        ingredients = get_ingredients()\n        pie = bake(ingredients)\n        deliver(pie)\n\n    @app.route('/api/order/pie')\n    def order_pie():\n        \"\"\" This returns immediately! \"\"\"\n        make_pie()\n        return \"Your pie is being made!\"\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.dominicrodger.com/2013/03/11/local-pip-cache/\"><strong>Using a local cache for pip packages</strong></a></p>\n\n<ul>\n<li>In <a href=\"https://pythonbytes.fm/24\">https://pythonbytes.fm/24</a>, <strong>Local package store,</strong> we talked about using pip to cache pypi projects to allow offline installation:\n<ul>\n<li><code>$ pip download --cachedir &lt;somePackage&gt;</code></li>\n<li><code>$ pip install --no-index --find-links=/tmp/wheelhouse somePackage</code></li>\n</ul></li>\n<li>Well, Dominic does us one better by wrapping these commands in a couple of aliases. </li>\n<li>However, his version uses  <code>pip install</code> <code>--``download</code>, which has been deprecated. Here\u2019s a version with the new syntax:\n<ul>\n<li><code>alias pipcache='pip download --cache-dir ${HOME}/.pip-packages'</code></li>\n<li><code>alias pipinstall='pip install --no-index --find-links=file://${HOME}/.pip-packages/'</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.activestate.com/blog/2017/05/building-game-ai-using-machine-learning-working-tensorflow-keras-and-intel-mkl-python\"><strong>Building game AI using ML: Working with TensorFlow, Keras, and the Intel MKL in Python</strong></a></p>\n\n<ul>\n<li>From the ActivePython guys</li>\n<li>a classic arcade space shooter game that features enemies powered by machine learning</li>\n<li>we decided to build a Neural Network to drive the behaviour of the enemies in the game</li>\n<li>For the game part of things, we\u2019re using PyGame</li>\n<li>In the training mode, the enemies fire randomly, and then each shot taken by the enemy is recorded as a hit or a miss along with its initial relative position/velocity values. Every one of these shots becomes a row in the training matrix and the network is trained in \u201crealtime\u201d after every row is added so you can see the network build and develop as you train.</li>\n<li>LESSONS LEARNED\n<ul>\n<li>Choosing the right data to train your network is important.</li>\n<li>\u201cPrepping\u201d your data is key.</li>\n<li>Experiment with network topology.</li>\n<li>Visualization is important.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://hackebrot.github.io/pytest-tricks/debug_test_failures/\"><strong>Debug Test Failures With Pdb</strong></a></p>\n\n<ul>\n<li>by Raphael Pierzina</li>\n<li>Debugging code with pytest, using:\n<ul>\n<li>--pdb to jump into the debugger at the point of failure</li>\n<li>-x to stop after first failure</li>\n<li>--lf to re-run all the tests that failed last time</li>\n</ul></li>\n<li><strong>Note:</strong> Yes. All this and more is covered in <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a>. \n<ul>\n<li>Shameless plug for my book. Raphael is one of the technical reviewers. </li>\n<li>Thank you, Raphael!</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.com/@davidcameron/monitoring-my-voip-provider-with-home-assistant-83a31f0a8cb9\"><strong>Monitoring my VOIP provider with Home Assistant</strong></a></p>\n\n<ul>\n<li><strong>Integrating it into Home Assistant:</strong> Use <a href=\"http://home-assistant.io/\">home-assistant.io</a> as a home automation platform in my house. </li>\n<li>It\u2019s written in Python, open source, and has a large community surrounding it. </li>\n<li>Unfortunately, there wasn\u2019t anything already built for my Cisco ATA.</li>\n<li>Decided to write, an open source my first python module called <a href=\"https://pypi.python.org/pypi/pyciscospa/\">pyciscsospa</a> you can download it and use it for your own ATA as well.</li>\n<li>Receive a push notification on my phone when the phone lines go down and come back up</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<h1>Python Bytes 29</h1>\n\n<p>Brought to you by Rollbar! <a href=\"http://rollbar.com/pythonbytes\">http://rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html\"><strong>Responsive Bar Charts with Bokeh, Flask and Python 3</strong></a></p>\n\n<ul>\n<li>by Matt Makai at fullstackpython.com</li>\n<li>A walkthrough example of putting together a flask app that uses Bokeh bar charts to visualize data.</li>\n<li>All steps included, no previous experience with Flask or Bokeh required.</li>\n<li>Nice explanation of what the code does without going into too much detail.</li>\n<li>Good jumping off point for further learning, but complete enough to be useful right away.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/Miserlou/Zappa\"><strong>Zappa</strong></a> <a href=\"https://github.com/Miserlou/Zappa\"><strong>Serverless Python Web Services</strong></a></p>\n\n<ul>\n<li><strong>Zappa</strong> makes it super easy to build and deploy all Python WSGI applications on AWS Lambda + API Gateway</li>\n<li>Think of it as \"serverless\" web hosting for your Python apps. </li>\n<li>That means <strong>infinite scaling</strong>, <strong>zero downtime</strong>, <strong>zero maintenance</strong> - and at a fraction of the cost of your current deployments!</li>\n<li>Better still, with Zappa you only pay for the milliseconds of server time that you use, so it's many <strong>orders of magnitude cheaper</strong> than VPS/PaaS hosts and in most cases, it's completely free. Plus, there's no need to worry about load balancing or keeping servers online ever again.</li>\n<li>Asynchronous Task Execution: </li>\n</ul>\n\n<pre><code>    from flask import Flask\n    from zappa.async import task\n    app = Flask(__name__)\n\n    @task\n    def make_pie():\n        \"\"\" This takes a long time! \"\"\"\n        ingredients = get_ingredients()\n        pie = bake(ingredients)\n        deliver(pie)\n\n    @app.route('/api/order/pie')\n    def order_pie():\n        \"\"\" This returns immediately! \"\"\"\n        make_pie()\n        return \"Your pie is being made!\"\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.dominicrodger.com/2013/03/11/local-pip-cache/\"><strong>Using a local cache for pip packages</strong></a></p>\n\n<ul>\n<li>In <a href=\"https://pythonbytes.fm/24\">https://pythonbytes.fm/24</a>, <strong>Local package store,</strong> we talked about using pip to cache pypi projects to allow offline installation:\n<ul>\n<li><code>$ pip download --cachedir &lt;somePackage&gt;</code></li>\n<li><code>$ pip install --no-index --find-links=/tmp/wheelhouse somePackage</code></li>\n</ul></li>\n<li>Well, Dominic does us one better by wrapping these commands in a couple of aliases. </li>\n<li>However, his version uses  <code>pip install</code> <code>--``download</code>, which has been deprecated. Here\u2019s a version with the new syntax:\n<ul>\n<li><code>alias pipcache='pip download --cache-dir ${HOME}/.pip-packages'</code></li>\n<li><code>alias pipinstall='pip install --no-index --find-links=file://${HOME}/.pip-packages/'</code></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.activestate.com/blog/2017/05/building-game-ai-using-machine-learning-working-tensorflow-keras-and-intel-mkl-python\"><strong>Building game AI using ML: Working with TensorFlow, Keras, and the Intel MKL in Python</strong></a></p>\n\n<ul>\n<li>From the ActivePython guys</li>\n<li>a classic arcade space shooter game that features enemies powered by machine learning</li>\n<li>we decided to build a Neural Network to drive the behaviour of the enemies in the game</li>\n<li>For the game part of things, we\u2019re using PyGame</li>\n<li>In the training mode, the enemies fire randomly, and then each shot taken by the enemy is recorded as a hit or a miss along with its initial relative position/velocity values. Every one of these shots becomes a row in the training matrix and the network is trained in \u201crealtime\u201d after every row is added so you can see the network build and develop as you train.</li>\n<li>LESSONS LEARNED\n<ul>\n<li>Choosing the right data to train your network is important.</li>\n<li>\u201cPrepping\u201d your data is key.</li>\n<li>Experiment with network topology.</li>\n<li>Visualization is important.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://hackebrot.github.io/pytest-tricks/debug_test_failures/\"><strong>Debug Test Failures With Pdb</strong></a></p>\n\n<ul>\n<li>by Raphael Pierzina</li>\n<li>Debugging code with pytest, using:\n<ul>\n<li>--pdb to jump into the debugger at the point of failure</li>\n<li>-x to stop after first failure</li>\n<li>--lf to re-run all the tests that failed last time</li>\n</ul></li>\n<li><strong>Note:</strong> Yes. All this and more is covered in <a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a>. \n<ul>\n<li>Shameless plug for my book. Raphael is one of the technical reviewers. </li>\n<li>Thank you, Raphael!</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.com/@davidcameron/monitoring-my-voip-provider-with-home-assistant-83a31f0a8cb9\"><strong>Monitoring my VOIP provider with Home Assistant</strong></a></p>\n\n<ul>\n<li><strong>Integrating it into Home Assistant:</strong> Use <a href=\"http://home-assistant.io/\">home-assistant.io</a> as a home automation platform in my house. </li>\n<li>It\u2019s written in Python, open source, and has a large community surrounding it. </li>\n<li>Unfortunately, there wasn\u2019t anything already built for my Cisco ATA.</li>\n<li>Decided to write, an open source my first python module called <a href=\"https://pypi.python.org/pypi/pyciscospa/\">pyciscsospa</a> you can download it and use it for your own ATA as well.</li>\n<li>Receive a push notification on my phone when the phone lines go down and come back up</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 08 Jun 2017 00:00:00 -0800", "published_parsed": [2017, 6, 8, 8, 0, 0, 3, 159, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Responsive Bar Charts with Bokeh, Flask, and Python 3", "itunes_episode": "29", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:23:04"}}, "#28 The meaning of _ in Python": {"info": {"title": "#28 The meaning of _ in Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#28 The meaning of _ in Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/28/the-meaning-of-in-python"}, {"length": "15696574", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/28/the-meaning-of-in-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/28/the-meaning-of-in-python", "id": "https://pythonbytes.fm/episodes/bc6d5aca-5cc1-425b-a53a-0aa62de42079", "guidislink": false, "summary": "<p><strong>Brian #1:</strong>  <a href=\"http://pep8.org/\"><strong>pep8.org : PEP 8 \u2014 the Style Guide for Python Code</strong></a></p>\n\n<ul>\n<li>\"This stylized presentation of the well-established PEP 8 was created by Kenneth Reitz (for humans).\"</li>\n<li>From PEP 8: \"This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.\"</li>\n<li>PEP8 is not only used for the standard library. Many if not most open source Python packages adhere to at least most of the PEP8 recommendations</li>\n<li>testing plugins can help you make sure your code meets the guidelines (for good or bad).</li>\n<li>The pep8.org presentation is easy to read, with a left side clickable table of contents.</li>\n<li>Nice color coded examples. Green for good, Red for bad.</li>\n<li>links to specific items make it easy to share with others something specific.</li>\n<li>Good advice, but don't be a pep8-bully.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://pypi.python.org/pypi/tokio\"><strong>Tokio: Asyncio event loop written in Rust language</strong></a></p>\n\n<ul>\n<li>Asyncio event loop written in Rust language</li>\n<li>It is still in alpha stage. </li>\n<li>It provides most of asyncio event loop apis, except udp. </li>\n<li>TCP api is more or less stable</li>\n<li>Aiohttp tests pass with tokio loop (~1800 tests)</li>\n<li>Mostly interesting as an example of Rust + Python</li>\n<li>Project is still in early stage of development</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.python-boilerplate.com\"><strong>Python Boilerplate</strong></a></p>\n\n<ul>\n<li>Interactive online tool for creating script and small project boilerplate code.</li>\n<li>Just starting, with \"how to help\" link.</li>\n<li>Select\n<ul>\n<li>Python 2 or 3</li>\n<li>executable script or not</li>\n<li>argparse</li>\n<li>logging</li>\n<li>.gitignore</li>\n<li>Flask</li>\n<li>unittest or pytest</li>\n<li>tox</li>\n</ul></li>\n<li>fills in main.py, plus other files like test_sample.py, requirements.txt, tox.ini, etc.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.youtube.com/watch?v=66XoCk79kjM\"><strong>Instagram switching to Python 3 on one branch</strong></a></p>\n\n<ul>\n<li>Ancient Django but still productive</li>\n<li>Ran out of 32-bit user IDs before they ran out of Django power. </li>\n<li>Added sharing support to Django Orem</li>\n<li>Turned off GC for perf</li>\n<li>Upgraded entirely to 3.6 in a few months</li>\n<li>Why?\n<ul>\n<li>Type hints</li>\n<li>Scaling server perf</li>\n<li>asyncio</li>\n</ul></li>\n<li>Python 3 is where the future community work is happening </li>\n<li>Strategies \n<ul>\n<li>No user impact</li>\n<li>Still shipping</li>\n<li>Testing process was interesting</li>\n</ul></li>\n<li>This is a concrete roadmap for every large company</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dbader.org/blog/meaning-of-underscores-in-python\"><strong>The Meaning of Underscores in Python</strong></a> </p>\n\n<ul>\n<li>single and double underscore meanings</li>\n<li>dunder is \"double underscore\"\n<ul>\n<li>Single Leading Underscore: <code>_var</code></li>\n</ul></li>\n<li>method or variable for internal use</li>\n<li>convention only</li>\n<li>doesn't apply to <code>collection.namedtuple</code>\n<ul>\n<li>Single Trailing Underscore: <code>var_</code></li>\n</ul></li>\n<li>used to avoid name collision with keywords\n<ul>\n<li>Double Leading Underscore: <code>__var</code></li>\n</ul></li>\n<li>internal use by a single class level.</li>\n<li>Python will name mangle this so that subclasses don't have to avoid parent class double leading underscore names\n<ul>\n<li>Double Leading and Trailing Underscore: <code>__var__</code></li>\n</ul></li>\n<li>no name mangling</li>\n<li>special names. dunder methods</li>\n<li><code>__call__</code> and <code>__init__</code>, etc.\n<ul>\n<li>Single Underscore: <code>_</code></li>\n</ul></li>\n<li>in code : temp variable, don't care variable</li>\n<li>won't get a warning if you don't reference it again</li>\n<li>in REPL: last value</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.com/@trstringer/the-future-is-looking-bright-for-python-95a748a4ef3e\"><strong>The future is looking bright for Python</strong></a></p>\n\n<ul>\n<li>Stack Overflow recently released a cool new tool called <a href=\"https://insights.stackoverflow.com/trends\">Trends</a> (previously covered)</li>\n<li>Check out the <a href=\"https://insights.stackoverflow.com/trends?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=trends&amp;utm_content=blog-link&amp;tags=java%2Cc%2Cc%2B%2B%2Cpython%2Cc%23%2Cvb.net%2Cjavascript%2Cassembly%2Cphp%2Cperl%2Cruby%2Cswift%2Cr%2Cobjective-c\">Most Popular Languages</a> trend chart</li>\n<li>Python has, by a very large margin, the greatest positive slope (future?)</li>\n<li>And <a href=\"https://insights.stackoverflow.com/trends?tags=python-2.7%2Cpython-3.x\">Py3 vs Py2</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong>  <a href=\"http://pep8.org/\"><strong>pep8.org : PEP 8 \u2014 the Style Guide for Python Code</strong></a></p>\n\n<ul>\n<li>\"This stylized presentation of the well-established PEP 8 was created by Kenneth Reitz (for humans).\"</li>\n<li>From PEP 8: \"This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.\"</li>\n<li>PEP8 is not only used for the standard library. Many if not most open source Python packages adhere to at least most of the PEP8 recommendations</li>\n<li>testing plugins can help you make sure your code meets the guidelines (for good or bad).</li>\n<li>The pep8.org presentation is easy to read, with a left side clickable table of contents.</li>\n<li>Nice color coded examples. Green for good, Red for bad.</li>\n<li>links to specific items make it easy to share with others something specific.</li>\n<li>Good advice, but don't be a pep8-bully.</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://pypi.python.org/pypi/tokio\"><strong>Tokio: Asyncio event loop written in Rust language</strong></a></p>\n\n<ul>\n<li>Asyncio event loop written in Rust language</li>\n<li>It is still in alpha stage. </li>\n<li>It provides most of asyncio event loop apis, except udp. </li>\n<li>TCP api is more or less stable</li>\n<li>Aiohttp tests pass with tokio loop (~1800 tests)</li>\n<li>Mostly interesting as an example of Rust + Python</li>\n<li>Project is still in early stage of development</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://www.python-boilerplate.com\"><strong>Python Boilerplate</strong></a></p>\n\n<ul>\n<li>Interactive online tool for creating script and small project boilerplate code.</li>\n<li>Just starting, with \"how to help\" link.</li>\n<li>Select\n<ul>\n<li>Python 2 or 3</li>\n<li>executable script or not</li>\n<li>argparse</li>\n<li>logging</li>\n<li>.gitignore</li>\n<li>Flask</li>\n<li>unittest or pytest</li>\n<li>tox</li>\n</ul></li>\n<li>fills in main.py, plus other files like test_sample.py, requirements.txt, tox.ini, etc.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.youtube.com/watch?v=66XoCk79kjM\"><strong>Instagram switching to Python 3 on one branch</strong></a></p>\n\n<ul>\n<li>Ancient Django but still productive</li>\n<li>Ran out of 32-bit user IDs before they ran out of Django power. </li>\n<li>Added sharing support to Django Orem</li>\n<li>Turned off GC for perf</li>\n<li>Upgraded entirely to 3.6 in a few months</li>\n<li>Why?\n<ul>\n<li>Type hints</li>\n<li>Scaling server perf</li>\n<li>asyncio</li>\n</ul></li>\n<li>Python 3 is where the future community work is happening </li>\n<li>Strategies \n<ul>\n<li>No user impact</li>\n<li>Still shipping</li>\n<li>Testing process was interesting</li>\n</ul></li>\n<li>This is a concrete roadmap for every large company</li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://dbader.org/blog/meaning-of-underscores-in-python\"><strong>The Meaning of Underscores in Python</strong></a> </p>\n\n<ul>\n<li>single and double underscore meanings</li>\n<li>dunder is \"double underscore\"\n<ul>\n<li>Single Leading Underscore: <code>_var</code></li>\n</ul></li>\n<li>method or variable for internal use</li>\n<li>convention only</li>\n<li>doesn't apply to <code>collection.namedtuple</code>\n<ul>\n<li>Single Trailing Underscore: <code>var_</code></li>\n</ul></li>\n<li>used to avoid name collision with keywords\n<ul>\n<li>Double Leading Underscore: <code>__var</code></li>\n</ul></li>\n<li>internal use by a single class level.</li>\n<li>Python will name mangle this so that subclasses don't have to avoid parent class double leading underscore names\n<ul>\n<li>Double Leading and Trailing Underscore: <code>__var__</code></li>\n</ul></li>\n<li>no name mangling</li>\n<li>special names. dunder methods</li>\n<li><code>__call__</code> and <code>__init__</code>, etc.\n<ul>\n<li>Single Underscore: <code>_</code></li>\n</ul></li>\n<li>in code : temp variable, don't care variable</li>\n<li>won't get a warning if you don't reference it again</li>\n<li>in REPL: last value</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.com/@trstringer/the-future-is-looking-bright-for-python-95a748a4ef3e\"><strong>The future is looking bright for Python</strong></a></p>\n\n<ul>\n<li>Stack Overflow recently released a cool new tool called <a href=\"https://insights.stackoverflow.com/trends\">Trends</a> (previously covered)</li>\n<li>Check out the <a href=\"https://insights.stackoverflow.com/trends?utm_source=so-owned&amp;utm_medium=blog&amp;utm_campaign=trends&amp;utm_content=blog-link&amp;tags=java%2Cc%2Cc%2B%2B%2Cpython%2Cc%23%2Cvb.net%2Cjavascript%2Cassembly%2Cphp%2Cperl%2Cruby%2Cswift%2Cr%2Cobjective-c\">Most Popular Languages</a> trend chart</li>\n<li>Python has, by a very large margin, the greatest positive slope (future?)</li>\n<li>And <a href=\"https://insights.stackoverflow.com/trends?tags=python-2.7%2Cpython-3.x\">Py3 vs Py2</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 02 Jun 2017 00:00:00 -0800", "published_parsed": [2017, 6, 2, 8, 0, 0, 4, 153, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The meaning of _ in Python", "itunes_episode": "28", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:20:59"}}, "#27 The PyCon 2017 recap and functional Python": {"info": {"title": "#27 The PyCon 2017 recap and functional Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#27 The PyCon 2017 recap and functional Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/27/the-pycon-2017-recap-and-functional-python"}, {"length": "14131262", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/27/the-pycon-2017-recap-and-functional-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/27/the-pycon-2017-recap-and-functional-python", "id": "https://pythonbytes.fm/episodes/16384063-bb11-4c05-9998-9aebd69aaadc", "guidislink": false, "summary": "<ul>\n<li>All videos available: <a href=\"https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg\">https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg</a></li>\n<li>Lessons learned:\n<ul>\n<li>pick up swag on day one. vendors run out.</li>\n<li>take business cards with you and keep them on you</li>\n<li>Not your actual business cards unless you are representing your company.</li>\n<li>Cards that have your social media, github account, blog, or podcast or whatever on them.</li>\n<li>3x3 stickers are too big. 2x2 plenty big enough</li>\n<li>lightening talks are awesome, because they are a lot of ranges of speaking experience</li>\n<li>will definitely do that again</li>\n<li>try to go to the talks that are important to you, but don\u2019t over stress about it, since they are taped. However, it would be lame if all the rooms were empty, so don\u2019t everybody ditch.</li>\n<li>lastly: everyone knows Michael. </li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html\"><strong>How to Create Your First Python 3.6 AWS Lambda Function</strong></a></p>\n\n<ul>\n<li>Tutorial from <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a></li>\n<li>Walks you through creating an account</li>\n<li>Select your Python version (3.6, yes!)</li>\n<li><code>def lambda_handler(event, context): \u2026</code> # write this function, done!</li>\n<li>Set and read environment variables (could be connection strings and API keys)</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/\"><strong>How to Publish Your Package on PYPI</strong></a></p>\n\n<ul>\n<li>jetbrains article\n<ul>\n<li>structure of the package</li>\n<li>oops. doesn't include src, see https://pythonbytes.fm/22</li>\n<li>decent discussion of a the contents of the setup.py file (but interestingly absent is an example setup.py file)</li>\n<li>good discussion of .pypirc file and links to the test and production PyPi</li>\n<li>example of using twine to push to PyPI</li>\n<li>overall: good discussion, but you'll still need a decent example.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://coconut-lang.org/\"><strong>Coconut: Simple, elegant, Pythonic functional programming</strong></a></p>\n\n<ul>\n<li>Coconut is a functional programming language that compiles to Python. </li>\n<li>Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python.</li>\n<li><code>pip install coconut</code>\n<ol>\n<li>Some of Coconut\u2019s major features include built-in, syntactic support for:</li>\n<li>Pattern-matching,</li>\n<li>Algebraic data-types,</li>\n<li>Tail call optimization,</li>\n<li>Partial application,</li>\n<li>Better lambdas,</li>\n<li>Parallelization primitives, and</li>\n<li>A whole lot more, all of which can be found in <a href=\"http://coconut.readthedocs.io/en/master/DOCS.html\">Coconut\u2019s detailed documentation</a>.</li>\n</ol></li>\n<li>Talk Python episode coming in a week</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"https://choosealicense.com/\"><strong>Choose a licence</strong></a></p>\n\n<ul>\n<li>MIT : simple and permissive</li>\n<li>Apache 2.0 : something extra about patents.</li>\n<li>GPL v3 : this is the contagious one that requires derivitive work to also be GPL v3</li>\n<li>Nice list with overviews of what they all mean with color coded bullet points: <a href=\"https://choosealicense.com/licenses/\">https://choosealicense.com/licenses/</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://pythonforengineers.com/python-for-scientists-and-engineers/\"><strong>Python for Scientists and Engineers</strong></a></p>\n\n<ul>\n<li><strong>Table of contents</strong>:</li>\n<li><strong>Beginners Start Here:</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/create-a-word-counter-in-python/\"><strong>Create a Word Counter in Python</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/an-introduction-to-numpy-and-matplotlib/\"><strong>An introduction to Numpy and Matplotlib</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/introduction-to-pandas/\"><strong>Introduction to Pandas with Practical Examples (New)</strong></a></li>\n</ul></li>\n<li><strong>Main Book</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/image-and-video-processing-in-python/\"><strong>Image and Video Processing in Python</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/data-analysis-with-pandas/\"><strong>Data Analysis with Pandas</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/audio-and-digital-signal-processingdsp-in-python/\"><strong>Audio and Digital Signal Processing (DSP)</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/control-your-raspberry-pi-from-your-phone-tablet/\"><strong>Control Your Raspberry Pi From Your Phone / Tablet</strong></a></li>\n</ul></li>\n<li><strong>Machine Learning Section</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/machine-learning-with-an-amazon-like-recommendation-engine/\"><strong>Machine Learning with an Amazon like Recommendation Engine</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/machine-learning-for-complete-beginners/\"><strong>Machine Learning For Complete Beginners:</strong></a> <em><em></em></em>Learn how to predict how many Titanic survivors using machine learning. No previous knowledge needed!</li>\n<li><a href=\"http://pythonforengineers.com/cross-validation-and-model-selection/\"><strong>Cross Validation and Model Selection</strong></a>: In which we look at cross validation, and how to choose between different machine learning algorithms. Working with the Iris flower dataset and the Pima diabetes dataset.</li>\n</ul></li>\n<li><strong>Natural Language Processing</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/natural-language-processing-and-sentiment-analysis-with-python/\"><strong>Introduction to NLP and Sentiment Analysis</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/introduction-to-nltk-natural-language-processing-with-python/\"><strong>Natural Language Processing with NTLK</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/intro-to-nltk-part-2/\"><strong>Intro to NTLK, Part 2</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/build-a-sentiment-analysis-app-with-movie-reviews/\"><strong>Build a sentiment analysis program</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/practice-session-sentiment-analysis-with-twitter/\"><strong>Sentiment Analysis with Twitter</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/analysing-the-enron-email-corpus/\"><strong>Analysing the Enron Email Corpus</strong></a>: The Enron Email corpus has half a million files spread over 2.5 GB. When looking at data this size, the question is, where do you even start?</li>\n<li><a href=\"http://pythonforengineers.com/build-a-spam-filter/\"><strong>Build a Spam Filter using the Enron Corpus</strong></a></li>\n</ul></li>\n</ul>\n\n<p><strong>In other news</strong>:</p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> Beta release and initial feedback is going very well.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<ul>\n<li>All videos available: <a href=\"https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg\">https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg</a></li>\n<li>Lessons learned:\n<ul>\n<li>pick up swag on day one. vendors run out.</li>\n<li>take business cards with you and keep them on you</li>\n<li>Not your actual business cards unless you are representing your company.</li>\n<li>Cards that have your social media, github account, blog, or podcast or whatever on them.</li>\n<li>3x3 stickers are too big. 2x2 plenty big enough</li>\n<li>lightening talks are awesome, because they are a lot of ranges of speaking experience</li>\n<li>will definitely do that again</li>\n<li>try to go to the talks that are important to you, but don\u2019t over stress about it, since they are taped. However, it would be lame if all the rooms were empty, so don\u2019t everybody ditch.</li>\n<li>lastly: everyone knows Michael. </li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html\"><strong>How to Create Your First Python 3.6 AWS Lambda Function</strong></a></p>\n\n<ul>\n<li>Tutorial from <a href=\"https://www.fullstackpython.com/\">Full Stack Python</a></li>\n<li>Walks you through creating an account</li>\n<li>Select your Python version (3.6, yes!)</li>\n<li><code>def lambda_handler(event, context): \u2026</code> # write this function, done!</li>\n<li>Set and read environment variables (could be connection strings and API keys)</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/\"><strong>How to Publish Your Package on PYPI</strong></a></p>\n\n<ul>\n<li>jetbrains article\n<ul>\n<li>structure of the package</li>\n<li>oops. doesn't include src, see https://pythonbytes.fm/22</li>\n<li>decent discussion of a the contents of the setup.py file (but interestingly absent is an example setup.py file)</li>\n<li>good discussion of .pypirc file and links to the test and production PyPi</li>\n<li>example of using twine to push to PyPI</li>\n<li>overall: good discussion, but you'll still need a decent example.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"http://coconut-lang.org/\"><strong>Coconut: Simple, elegant, Pythonic functional programming</strong></a></p>\n\n<ul>\n<li>Coconut is a functional programming language that compiles to Python. </li>\n<li>Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python.</li>\n<li><code>pip install coconut</code>\n<ol>\n<li>Some of Coconut\u2019s major features include built-in, syntactic support for:</li>\n<li>Pattern-matching,</li>\n<li>Algebraic data-types,</li>\n<li>Tail call optimization,</li>\n<li>Partial application,</li>\n<li>Better lambdas,</li>\n<li>Parallelization primitives, and</li>\n<li>A whole lot more, all of which can be found in <a href=\"http://coconut.readthedocs.io/en/master/DOCS.html\">Coconut\u2019s detailed documentation</a>.</li>\n</ol></li>\n<li>Talk Python episode coming in a week</li>\n</ul>\n\n<p><strong>Brian #5:</strong>  <a href=\"https://choosealicense.com/\"><strong>Choose a licence</strong></a></p>\n\n<ul>\n<li>MIT : simple and permissive</li>\n<li>Apache 2.0 : something extra about patents.</li>\n<li>GPL v3 : this is the contagious one that requires derivitive work to also be GPL v3</li>\n<li>Nice list with overviews of what they all mean with color coded bullet points: <a href=\"https://choosealicense.com/licenses/\">https://choosealicense.com/licenses/</a></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://pythonforengineers.com/python-for-scientists-and-engineers/\"><strong>Python for Scientists and Engineers</strong></a></p>\n\n<ul>\n<li><strong>Table of contents</strong>:</li>\n<li><strong>Beginners Start Here:</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/create-a-word-counter-in-python/\"><strong>Create a Word Counter in Python</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/an-introduction-to-numpy-and-matplotlib/\"><strong>An introduction to Numpy and Matplotlib</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/introduction-to-pandas/\"><strong>Introduction to Pandas with Practical Examples (New)</strong></a></li>\n</ul></li>\n<li><strong>Main Book</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/image-and-video-processing-in-python/\"><strong>Image and Video Processing in Python</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/data-analysis-with-pandas/\"><strong>Data Analysis with Pandas</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/audio-and-digital-signal-processingdsp-in-python/\"><strong>Audio and Digital Signal Processing (DSP)</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/control-your-raspberry-pi-from-your-phone-tablet/\"><strong>Control Your Raspberry Pi From Your Phone / Tablet</strong></a></li>\n</ul></li>\n<li><strong>Machine Learning Section</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/machine-learning-with-an-amazon-like-recommendation-engine/\"><strong>Machine Learning with an Amazon like Recommendation Engine</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/machine-learning-for-complete-beginners/\"><strong>Machine Learning For Complete Beginners:</strong></a> <em><em></em></em>Learn how to predict how many Titanic survivors using machine learning. No previous knowledge needed!</li>\n<li><a href=\"http://pythonforengineers.com/cross-validation-and-model-selection/\"><strong>Cross Validation and Model Selection</strong></a>: In which we look at cross validation, and how to choose between different machine learning algorithms. Working with the Iris flower dataset and the Pima diabetes dataset.</li>\n</ul></li>\n<li><strong>Natural Language Processing</strong>\n<ul>\n<li><a href=\"http://pythonforengineers.com/natural-language-processing-and-sentiment-analysis-with-python/\"><strong>Introduction to NLP and Sentiment Analysis</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/introduction-to-nltk-natural-language-processing-with-python/\"><strong>Natural Language Processing with NTLK</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/intro-to-nltk-part-2/\"><strong>Intro to NTLK, Part 2</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/build-a-sentiment-analysis-app-with-movie-reviews/\"><strong>Build a sentiment analysis program</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/practice-session-sentiment-analysis-with-twitter/\"><strong>Sentiment Analysis with Twitter</strong></a></li>\n<li><a href=\"http://pythonforengineers.com/analysing-the-enron-email-corpus/\"><strong>Analysing the Enron Email Corpus</strong></a>: The Enron Email corpus has half a million files spread over 2.5 GB. When looking at data this size, the question is, where do you even start?</li>\n<li><a href=\"http://pythonforengineers.com/build-a-spam-filter/\"><strong>Build a Spam Filter using the Enron Corpus</strong></a></li>\n</ul></li>\n</ul>\n\n<p><strong>In other news</strong>:</p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest</a> Beta release and initial feedback is going very well.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 25 May 2017 00:00:00 -0800", "published_parsed": [2017, 5, 25, 8, 0, 0, 3, 145, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "The PyCon 2017 recap and functional Python", "itunes_episode": "27", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "* All videos available: <https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg> * Lessons learned: * pick up swag on day one. vendors run out. * take business cards with you and keep them on you * Not your actual business cards unless you are representing your company. * Cards that have your social media, github account, blog, or podcast or whatever on them. * 3x3 stickers are too big. 2x2 plenty big enough * lightening talks are awesome, because they are a lot of ranges of speaking experience * will definitely do that again * try to go to the talks that are important to you, but don\u2019t over stress about it, since they are taped. However, it would be lame if all the rooms were empty, so don\u2019t everybody ditch. * lastly: everyone knows Michael. **Michael #2:** [**How to Create Your First Python 3.6 AWS Lambda Function**](https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html) * Tutorial from [Full Stack Python](https://www.fullstackpython.com/) * Walks you through creating an account * Select your Python version (3.6, yes!) * `def lambda_handler(event, context): \u2026` # write this function, done! * Set and read environment variables (could be connection strings and API keys) **Brian #3:** [**How to Publish Your Package on PYPI**](https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your- package-on-pypi/) * jetbrains article * structure of the package * oops. doesn't include src, see https://pythonbytes.fm/22 * decent discussion of a the contents of the setup.py file (but interestingly absent is an example setup.py file) * good discussion of .pypirc file and links to the test and production PyPi * example of using twine to push to PyPI * overall: good discussion, but you'll still need a decent example. **Michael #4:** [**Coconut: Simple, elegant, Pythonic functional programming**](http://coconut-lang.org/) * Coconut is a functional programming language that compiles to Python. * Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python. * `pip install coconut` 1. Some of Coconut\u2019s major features include built-in, syntactic support for: 2. Pattern-matching, 3. Algebraic data-types, 4. Tail call optimization, 5. Partial application, 6. Better lambdas, 7. Parallelization primitives, and 8. A whole lot more, all of which can be found in [Coconut\u2019s detailed documentation](http://coconut.readthedocs.io/en/master/DOCS.html). * Talk Python episode coming in a week **Brian #5:** [**Choose a licence**](https://choosealicense.com/) * MIT : simple and permissive * Apache 2.0 : something extra about patents. * GPL v3 : this is the contagious one that requires derivitive work to also be GPL v3 * Nice list with overviews of what they all mean with color coded bullet points: <https://choosealicense.com/licenses/> **Michael #6:** [**Python for Scientists and Engineers**](http://pythonforengineers.com/python-for-scientists-and- engineers/) * **Table of contents** : * **Beginners Start Here:** * [**Create a Word Counter in Python**](http://pythonforengineers.com/create-a-word-counter-in-python/) * [**An introduction to Numpy and Matplotlib**](http://pythonforengineers.com/an-introduction-to-numpy-and-matplotlib/) * [**Introduction to Pandas with Practical Examples (New)**](http://pythonforengineers.com/introduction-to-pandas/) * **Main Book** * [**Image and Video Processing in Python**](http://pythonforengineers.com/image-and-video-processing-in-python/) * [**Data Analysis with Pandas**](http://pythonforengineers.com/data-analysis-with-pandas/) * [**Audio and Digital Signal Processing (DSP)**](http://pythonforengineers.com/audio-and-digital-signal-processingdsp-in-python/) * [**Control Your Raspberry Pi From Your Phone / Tablet**](http://pythonforengineers.com/control-your-raspberry-pi-from-your-phone-tablet/) * **Machine Learning Section** * [**Machine Learning with an Amazon like Recommendation Engine**](http://pythonforengineers.com/machine-learning-with-an-amazon-like-recommendation-engine/) * [**Machine Learning For Complete Beginners:**](http://pythonforengineers.com/machine-learning-for-complete-beginners/) ____Learn how to predict how many Titanic survivors using machine learning. No previous knowledge needed! * [**Cross Validation and Model Selection**](http://pythonforengineers.com/cross-validation-and-model-selection/): In which we look at cross validation, and how to choose between different machine learning algorithms. Working with the Iris flower dataset and the Pima diabetes dataset. * **Natural Language Processing** * [**Introduction to NLP and Sentiment Analysis**](http://pythonforengineers.com/natural-language-processing-and-sentiment-analysis-with-python/) * [**Natural Language Processing with NTLK**](http://pythonforengineers.com/introduction-to-nltk-natural-language-processing-with-python/) * [**Intro to NTLK, Part 2**](http://pythonforengineers.com/intro-to-nltk-part-2/) * [**Build a sentiment analysis program**](http://pythonforengineers.com/build-a-sentiment-analysis-app-with-movie-reviews/) * [**Sentiment Analysis with Twitter**](http://pythonforengineers.com/practice-session-sentiment-analysis-with-twitter/) * [**Analysing the Enron Email Corpus**](http://pythonforengineers.com/analysing-the-enron-email-corpus/): The Enron Email corpus has half a million files spread over 2.5 GB. When looking at data this size, the question is, where do you even start? * [**Build a Spam Filter using the Enron Corpus**](http://pythonforengineers.com/build-a-spam-filter/) **In other news** : * [Python Testing with pytest](https://pragprog.com/book/bopytest/python-testing-with-pytest) Beta release and initial feedback is going very well."}], "itunes_duration": "00:19:08"}}, "#26 How have you automated your life, or CLI, with Python?": {"info": {"title": "#26 How have you automated your life, or CLI, with Python?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#26 How have you automated your life, or CLI, with Python?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/26/how-have-you-automated-your-life-or-cli-with-python"}, {"length": "19084151", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/26/how-have-you-automated-your-life-or-cli-with-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/26/how-have-you-automated-your-life-or-cli-with-python", "id": "https://pythonbytes.fm/episodes/600cabd7-e211-49d2-bf4c-b2dd8f7dc73b", "guidislink": false, "summary": "<p>Sponsored by rollbar: <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1: Two part series on interactive terminal applications</strong></p>\n\n<p><strong>Part 1:</strong> <a href=\"https://opensource.com/article/17/5/4-terminal-apps\"><strong>4 terminal applications with great command-line UIs</strong></a></p>\n\n<ul>\n<li>For Comparison: both ok but could be better\n<ul>\n<li>MySQL REPL</li>\n<li>Python REPL</li>\n</ul></li>\n<li><a href=\"https://bpython-interpreter.org/\">bpython</a> adds autocompletion and other goodies\n<ul>\n<li>also check out <a href=\"https://pypi.python.org/pypi/ptpython\">ptpython</a> as a REPL replacement</li>\n</ul></li>\n<li><a href=\"http://mycli.net/\">mycli</a> adds context aware completion to MySQL\n<a href=\"http://mycli.net/\">mycli</a> - <a href=\"https://www.pgcli.com/\">pgcli</a> for postgress that adds fuzzy search</li>\n<li><a href=\"https://fishshell.com/\">fish</a> : like bash, but has better search history</li>\n</ul>\n\n<p><strong>Part 2:</strong> <a href=\"https://opensource.com/article/17/5/4-practical-python-libraries\"><strong>4 Python libraries for building great cli's</strong></a></p>\n\n<ul>\n<li><a href=\"https://python-prompt-toolkit.readthedocs.io/en/latest/\">prompt_toolkit</a> - for building a REPL like interface\n<ul>\n<li>includes command history, auto-suggestion, auto-completion</li>\n</ul></li>\n<li><a href=\"http://click.pocoo.org/5/\">click</a>\n<ul>\n<li>includes pager and ability to launch an editor</li>\n</ul></li>\n<li><a href=\"https://pypi.python.org/pypi/fuzzyfinder\">fuzzyfinder</a> - make suggestions\n<ul>\n<li>article shows how to combine that with prompt_toolkit</li>\n</ul></li>\n<li><a href=\"http://pygments.org/\">pygments</a> - syntax highlighting</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/Python/comments/69ba93/how_have_you_automated_your_life_with_python_if/\"><strong>How have you automated your life with python?</strong></a></p>\n\n<ul>\n<li>There is something magical about writing code that interacts with the physical world.</li>\n<li>I have a script which runs every 5 minutes between 17:00 and 17:30 which scrapes the train times website and sends me desktop notifications saying whether or not my trains home are delayed / cancelled.</li>\n<li>I recently wrote a quick python script that tells me when my girlfriend comes home: It sniffs the network for DHCP traffic, when her phone joins the wifi network outside it uses the say command to let me know.</li>\n<li>Wrote a script to check if nearby ice cream shops are stocking my favourite (rare) flavour by scanning their menu page for keywords.</li>\n<li>A script to check the drive time too/from work using a route with tolls or without tolls.. to try and save some money when the times aren't too different. Using google maps API and a flask site.</li>\n<li>I have a script that generates weekly status update emails based off my git commit messages and pull requests. It also creates timesheets in Harvest based on the projects I'm assigned.</li>\n<li>I have thrown together some python that automatically controls my reverse-cycle AC system so that it makes optimal use of my solar panels on my roof.</li>\n</ul>\n\n<p><strong>Brian #3</strong>: <a href=\"http://pybit.es/flask-sqlalchemy-bday-app.html\"><strong>Building a Simple Birthday App with Flask-SQLAlchemy</strong></a></p>\n\n<ul>\n<li>Nice simple application with a clear need.\n<ul>\n<li>Keep track of upcoming birthdays</li>\n<li>Avoid Faceboook</li>\n<li>Build a simple Flask app</li>\n<li>Try SQLAlchemy</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by Rollbar</strong>, try them at <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a> and don't forget to visit their booth at PyCon!</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.amin.space/blog/2017/5/elemental_speller/\"><strong>Spelling with Elemental Symbols</strong></a></p>\n\n<ul>\n<li>How does it work?\n<ul>\n<li>Input: \"Amputations\"</li>\n<li>Output: \"AmPuTaTiONS\", \"AmPUTaTiONS\"</li>\n</ul></li>\n<li>Generating Character Groupings: \n<ul>\n<li>'AmPuTaTiONS' <code>(2,2,2,2,1,1,1)</code></li>\n<li>'AmPUTaTiONS' <code>(2,1,1,2,2,1,1,1)</code></li>\n<li>How many are there in general for a given word? <code>fib(n + 1)</code>!</li>\n</ul></li>\n<li>Addressing Performance Issues: A few attempts don\u2019t add much but</li>\n<li>Memoization: The technique of saving a function's output and returning it if the function is called again with the same inputs. A memoized function only needs to generate output once for a given input. This can be very helpful with expensive functions that are called many times with the same few inputs, but only works for pure functions. \u2192 30% faster</li>\n<li>Algorithms: Switch to directed graphs and recursion, changes O(2^n) to O(n) and time from 16min to 10 sec.</li>\n<li>Learned a great deal along the way. This project introduced:\n<ul>\n<li>Combinatorics</li>\n<li>Performance profiling</li>\n<li>Time complexity</li>\n<li>Memoization</li>\n<li>Recursion</li>\n<li>Graphs and trees</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>IDE's for beginners</strong></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/Python/comments/6ahnsb/thonny_python_ide_for_beginners/\">Recent discussion on Reddit about Thonny</a></li>\n<li>I have mixed feelings about encouraging beginner IDE's.\n<ul>\n<li>Mostly negative feelings.</li>\n<li>And yet there is IDLE, there is Thonny, ...</li>\n</ul></li>\n<li>Are these useful? Anti-useful?</li>\n<li>Isn't learning a decent editor part of learning to program?</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://twitter.com/dtizzlenizzle/status/861024781273112576\"><strong>PDF Plumber</strong></a></p>\n\n<ul>\n<li>Plumb a PDF for detailed information about each char, rectangle, line, et cetera \u2014 and easily extract text and tables.</li>\n<li>Visual debugging with <code>.to_image()</code></li>\n<li>Extracting tables\n<ul>\n<li>pdfplumber's approach to table detection borrows heavily from Anssi Nurminen's master's thesis, and is inspired by Tabula. It works like this:</li>\n<li>For any given PDF page, find the lines that are (a) explicitly defined and/or (b) implied by the alignment of words on the page.</li>\n<li>Merge overlapping, or nearly-overlapping, lines.</li>\n<li>Find the intersections of all those lines.</li>\n<li>Find the most granular set of rectangles (i.e., cells) that use these intersections as their vertices.</li>\n<li>Group contiguous cells into tables.</li>\n<li>Check out the demonstrations section.</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Sponsored by rollbar: <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1: Two part series on interactive terminal applications</strong></p>\n\n<p><strong>Part 1:</strong> <a href=\"https://opensource.com/article/17/5/4-terminal-apps\"><strong>4 terminal applications with great command-line UIs</strong></a></p>\n\n<ul>\n<li>For Comparison: both ok but could be better\n<ul>\n<li>MySQL REPL</li>\n<li>Python REPL</li>\n</ul></li>\n<li><a href=\"https://bpython-interpreter.org/\">bpython</a> adds autocompletion and other goodies\n<ul>\n<li>also check out <a href=\"https://pypi.python.org/pypi/ptpython\">ptpython</a> as a REPL replacement</li>\n</ul></li>\n<li><a href=\"http://mycli.net/\">mycli</a> adds context aware completion to MySQL\n<a href=\"http://mycli.net/\">mycli</a> - <a href=\"https://www.pgcli.com/\">pgcli</a> for postgress that adds fuzzy search</li>\n<li><a href=\"https://fishshell.com/\">fish</a> : like bash, but has better search history</li>\n</ul>\n\n<p><strong>Part 2:</strong> <a href=\"https://opensource.com/article/17/5/4-practical-python-libraries\"><strong>4 Python libraries for building great cli's</strong></a></p>\n\n<ul>\n<li><a href=\"https://python-prompt-toolkit.readthedocs.io/en/latest/\">prompt_toolkit</a> - for building a REPL like interface\n<ul>\n<li>includes command history, auto-suggestion, auto-completion</li>\n</ul></li>\n<li><a href=\"http://click.pocoo.org/5/\">click</a>\n<ul>\n<li>includes pager and ability to launch an editor</li>\n</ul></li>\n<li><a href=\"https://pypi.python.org/pypi/fuzzyfinder\">fuzzyfinder</a> - make suggestions\n<ul>\n<li>article shows how to combine that with prompt_toolkit</li>\n</ul></li>\n<li><a href=\"http://pygments.org/\">pygments</a> - syntax highlighting</li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://www.reddit.com/r/Python/comments/69ba93/how_have_you_automated_your_life_with_python_if/\"><strong>How have you automated your life with python?</strong></a></p>\n\n<ul>\n<li>There is something magical about writing code that interacts with the physical world.</li>\n<li>I have a script which runs every 5 minutes between 17:00 and 17:30 which scrapes the train times website and sends me desktop notifications saying whether or not my trains home are delayed / cancelled.</li>\n<li>I recently wrote a quick python script that tells me when my girlfriend comes home: It sniffs the network for DHCP traffic, when her phone joins the wifi network outside it uses the say command to let me know.</li>\n<li>Wrote a script to check if nearby ice cream shops are stocking my favourite (rare) flavour by scanning their menu page for keywords.</li>\n<li>A script to check the drive time too/from work using a route with tolls or without tolls.. to try and save some money when the times aren't too different. Using google maps API and a flask site.</li>\n<li>I have a script that generates weekly status update emails based off my git commit messages and pull requests. It also creates timesheets in Harvest based on the projects I'm assigned.</li>\n<li>I have thrown together some python that automatically controls my reverse-cycle AC system so that it makes optimal use of my solar panels on my roof.</li>\n</ul>\n\n<p><strong>Brian #3</strong>: <a href=\"http://pybit.es/flask-sqlalchemy-bday-app.html\"><strong>Building a Simple Birthday App with Flask-SQLAlchemy</strong></a></p>\n\n<ul>\n<li>Nice simple application with a clear need.\n<ul>\n<li>Keep track of upcoming birthdays</li>\n<li>Avoid Faceboook</li>\n<li>Build a simple Flask app</li>\n<li>Try SQLAlchemy</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by Rollbar</strong>, try them at <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a> and don't forget to visit their booth at PyCon!</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.amin.space/blog/2017/5/elemental_speller/\"><strong>Spelling with Elemental Symbols</strong></a></p>\n\n<ul>\n<li>How does it work?\n<ul>\n<li>Input: \"Amputations\"</li>\n<li>Output: \"AmPuTaTiONS\", \"AmPUTaTiONS\"</li>\n</ul></li>\n<li>Generating Character Groupings: \n<ul>\n<li>'AmPuTaTiONS' <code>(2,2,2,2,1,1,1)</code></li>\n<li>'AmPUTaTiONS' <code>(2,1,1,2,2,1,1,1)</code></li>\n<li>How many are there in general for a given word? <code>fib(n + 1)</code>!</li>\n</ul></li>\n<li>Addressing Performance Issues: A few attempts don\u2019t add much but</li>\n<li>Memoization: The technique of saving a function's output and returning it if the function is called again with the same inputs. A memoized function only needs to generate output once for a given input. This can be very helpful with expensive functions that are called many times with the same few inputs, but only works for pure functions. \u2192 30% faster</li>\n<li>Algorithms: Switch to directed graphs and recursion, changes O(2^n) to O(n) and time from 16min to 10 sec.</li>\n<li>Learned a great deal along the way. This project introduced:\n<ul>\n<li>Combinatorics</li>\n<li>Performance profiling</li>\n<li>Time complexity</li>\n<li>Memoization</li>\n<li>Recursion</li>\n<li>Graphs and trees</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <strong>IDE's for beginners</strong></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/Python/comments/6ahnsb/thonny_python_ide_for_beginners/\">Recent discussion on Reddit about Thonny</a></li>\n<li>I have mixed feelings about encouraging beginner IDE's.\n<ul>\n<li>Mostly negative feelings.</li>\n<li>And yet there is IDLE, there is Thonny, ...</li>\n</ul></li>\n<li>Are these useful? Anti-useful?</li>\n<li>Isn't learning a decent editor part of learning to program?</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://twitter.com/dtizzlenizzle/status/861024781273112576\"><strong>PDF Plumber</strong></a></p>\n\n<ul>\n<li>Plumb a PDF for detailed information about each char, rectangle, line, et cetera \u2014 and easily extract text and tables.</li>\n<li>Visual debugging with <code>.to_image()</code></li>\n<li>Extracting tables\n<ul>\n<li>pdfplumber's approach to table detection borrows heavily from Anssi Nurminen's master's thesis, and is inspired by Tabula. It works like this:</li>\n<li>For any given PDF page, find the lines that are (a) explicitly defined and/or (b) implied by the alignment of words on the page.</li>\n<li>Merge overlapping, or nearly-overlapping, lines.</li>\n<li>Find the intersections of all those lines.</li>\n<li>Find the most granular set of rectangles (i.e., cells) that use these intersections as their vertices.</li>\n<li>Group contiguous cells into tables.</li>\n<li>Check out the demonstrations section.</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 19 May 2017 00:00:00 -0800", "published_parsed": [2017, 5, 19, 8, 0, 0, 4, 139, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "How have you automated your life, or CLI, with Python?", "itunes_episode": "26", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:44"}}, "#25 Could we have more in-database machine learning please?": {"info": {"title": "#25 Could we have more in-database machine learning please?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#25 Could we have more in-database machine learning please?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/25/could-we-have-more-in-database-machine-learning-please"}, {"length": "12147680", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/25/could-we-have-more-in-database-machine-learning-please.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/25/could-we-have-more-in-database-machine-learning-please", "id": "https://pythonbytes.fm/episodes/c29faaa9-abd3-443d-beec-67b77af55895", "guidislink": false, "summary": "<p><strong>Michael #1:</strong> <a href=\"https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/19/python-in-sql-server-2017-enhanced-in-database-machine-learning/\"><strong>Python in SQL Server 2017: enhanced in-database machine learning</strong></a></p>\n\n<ul>\n<li>in-database analytics and machine learning with Python in SQL Server.</li>\n<li>Why?\n<ul>\n<li><strong>Elimination of data movement:</strong> You no longer need to move data from the database to your Python application or model. Instead, you can build Python applications in the database. </li>\n<li><strong>Easy deployment:</strong> Once you have the Python model ready, deploying it in production is now as easy as embedding it in a T-SQL script</li>\n<li><strong>Rich extensibility:</strong> You can install and run any of the latest open source Python packages in SQL Server to build deep learning and AI applications on huge amounts of data in SQL Server.</li>\n<li>Works in express edition of SQL Server</li>\n</ul></li>\n<li>The standard open source CPython interpreter (version 3.5) and some Python packages commonly used for data science are downloaded and installed during SQL Server setup if you choose the Python option in the feature tree.</li>\n<li>Currently, a subset of packages from the popular Anaconda distribution is included along with Microsoft\u2019s RevoScalePy package. The set of packages available for download will evolve as we move toward general availability of this feature.</li>\n</ul>\n\n<p><strong>Brian #2</strong>: <a href=\"https://semaphoreci.com/community/tutorials/generating-fake-data-for-python-unit-tests-with-faker\"><strong>Generating Fake Data for Python Unit Tests with Faker</strong></a></p>\n\n<ul>\n<li>Used in <a href=\"http://cecilphillip.com/content-negotiation-with-the-pyramid-web-framework/\">Content Negotiation with the Pyramid Web Framework</a></li>\n<li><a href=\"https://pypi.python.org/pypi/Faker\">Faker</a> is great. From the pypi page:\n<ul>\n<li>\u201c<em>Faker</em> is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.\u201d</li>\n</ul></li>\n<li>The article above is a great introduction to show you what you can do with it.</li>\n<li>Faker includes localization, so you can get the output to match the proper language you want.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://stackoverflow.blog/2017/05/09/introducing-stack-overflow-trends/?cb=1\"><strong>Stack Overflow Trends tool</strong></a></p>\n\n<ul>\n<li>Stack overflow introduces a trends tool starting with a graph that shows the questions using the terms Python, PHP, and Perl, plotted year vs % of total questions.\n<ul>\n<li><a href=\"https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png\">https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png</a></li>\n</ul></li>\n<li>Python\u2019s growth since 2012 has been fairly steady, growing from ~3.5% to over 8%</li>\n<li>Plus, the trends tool looks fun.</li>\n</ul>\n\n<p><strong>Sponsorship slots are available right now. Please contact us if you\u2019re interested.</strong></p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.freecodecamp.com/we-asked-20-000-people-who-they-are-and-how-theyre-learning-to-code-fff5d668969\"><strong>We asked 20,000 people who they are and how they\u2019re learning to code</strong></a></p>\n\n<ul>\n<li>Thanks Alan Jones</li>\n<li><strong>Who participated? More than 20,000 new coders responded to this survey. These are people who have been coding for less than 5 years.</strong>\n<ul>\n<li>62% of them live outside the US</li>\n<li>their average age is 28 years old</li>\n<li>19% are women</li>\n<li>They\u2019ve been coding for an average of 21 months</li>\n<li>25% have already landed their first developer job</li>\n</ul></li>\n<li>40% of them would like to either freelance or start their own business.</li>\n<li>Most of them are interested in working as web developers, but are also interested in a wide variety of developer specializations.</li>\n<li>Most new coders haven\u2019t yet started listening to podcasts, but the ones who do listen to a wide range of them.</li>\n</ul>\n\n<p><strong>Brian #5</strong> <a href=\"http://www.datasciencecentral.com/profiles/blogs/introduction-to-anomaly-detection\"><strong>Introduction to Anomaly Detection</strong></a></p>\n\n<ul>\n<li><strong>Anomaly Detection Techniques</strong>\n<ul>\n<li>Simple Statistical Methods</li>\n<li>Challenges</li>\n</ul></li>\n<li><strong>Machine Learning-Based Approaches</strong>\n<ul>\n<li>Density-Based Anomaly Detection</li>\n<li>Clustering-Based Anomaly Detection</li>\n<li>Support Vector Machine-Based Anomaly Detection</li>\n<li>Building a Simple Detection Solution Using a Low-Pass Filter</li>\n<li>Moving Average Using Discrete Linear Convolution</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://pybee.org/news/buzz/a-request-for-your-help/\"><strong>Beeware: A request for your help</strong></a></p>\n\n<ul>\n<li>What is Beeware? Started 4 years ago. Since then, the BeeWare project has grown to encompass support for mobile platforms, two alternate Python implementations, and a cross platform widget set - as well as the developer tools that started the project originally.</li>\n<li>Lots of work done over the last 6 months:\n<ul>\n<li>Extensive improvements to Batavia and VOC;</li>\n<li>An Android backend for Toga;</li>\n<li>A Django backend for Toga, enabling Toga apps to be deployed as web apps;</li>\n<li>A Winforms backend for Toga, enabling Toga apps to run on Windows with a modern appearance;</li>\n</ul></li>\n<li>Unfortunately, my contract with Jambon is coming to a close - which means my contributions to BeeWare will go back to being what my spare time allows.</li>\n<li>So - this is an appeal to you - the Python community. If you are excited by the prospect of having access to Python on mobile platforms, or you would like to write applications in Python that have completely native user interfaces - <strong>I need your help</strong> for just <strong>US$10 a month</strong> - you can <a href=\"http://pybee.org/contributing/membership/\">join the BeeWare project as a member</a>,</li>\n</ul>\n\n<p><strong>Other news</strong></p>\n\n<p><a href=\"http://www.pycascades.com\">pycascades.com</a> is a regional PyCon for the Pacific Northwest.</p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Michael #1:</strong> <a href=\"https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/19/python-in-sql-server-2017-enhanced-in-database-machine-learning/\"><strong>Python in SQL Server 2017: enhanced in-database machine learning</strong></a></p>\n\n<ul>\n<li>in-database analytics and machine learning with Python in SQL Server.</li>\n<li>Why?\n<ul>\n<li><strong>Elimination of data movement:</strong> You no longer need to move data from the database to your Python application or model. Instead, you can build Python applications in the database. </li>\n<li><strong>Easy deployment:</strong> Once you have the Python model ready, deploying it in production is now as easy as embedding it in a T-SQL script</li>\n<li><strong>Rich extensibility:</strong> You can install and run any of the latest open source Python packages in SQL Server to build deep learning and AI applications on huge amounts of data in SQL Server.</li>\n<li>Works in express edition of SQL Server</li>\n</ul></li>\n<li>The standard open source CPython interpreter (version 3.5) and some Python packages commonly used for data science are downloaded and installed during SQL Server setup if you choose the Python option in the feature tree.</li>\n<li>Currently, a subset of packages from the popular Anaconda distribution is included along with Microsoft\u2019s RevoScalePy package. The set of packages available for download will evolve as we move toward general availability of this feature.</li>\n</ul>\n\n<p><strong>Brian #2</strong>: <a href=\"https://semaphoreci.com/community/tutorials/generating-fake-data-for-python-unit-tests-with-faker\"><strong>Generating Fake Data for Python Unit Tests with Faker</strong></a></p>\n\n<ul>\n<li>Used in <a href=\"http://cecilphillip.com/content-negotiation-with-the-pyramid-web-framework/\">Content Negotiation with the Pyramid Web Framework</a></li>\n<li><a href=\"https://pypi.python.org/pypi/Faker\">Faker</a> is great. From the pypi page:\n<ul>\n<li>\u201c<em>Faker</em> is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.\u201d</li>\n</ul></li>\n<li>The article above is a great introduction to show you what you can do with it.</li>\n<li>Faker includes localization, so you can get the output to match the proper language you want.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://stackoverflow.blog/2017/05/09/introducing-stack-overflow-trends/?cb=1\"><strong>Stack Overflow Trends tool</strong></a></p>\n\n<ul>\n<li>Stack overflow introduces a trends tool starting with a graph that shows the questions using the terms Python, PHP, and Perl, plotted year vs % of total questions.\n<ul>\n<li><a href=\"https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png\">https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png</a></li>\n</ul></li>\n<li>Python\u2019s growth since 2012 has been fairly steady, growing from ~3.5% to over 8%</li>\n<li>Plus, the trends tool looks fun.</li>\n</ul>\n\n<p><strong>Sponsorship slots are available right now. Please contact us if you\u2019re interested.</strong></p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.freecodecamp.com/we-asked-20-000-people-who-they-are-and-how-theyre-learning-to-code-fff5d668969\"><strong>We asked 20,000 people who they are and how they\u2019re learning to code</strong></a></p>\n\n<ul>\n<li>Thanks Alan Jones</li>\n<li><strong>Who participated? More than 20,000 new coders responded to this survey. These are people who have been coding for less than 5 years.</strong>\n<ul>\n<li>62% of them live outside the US</li>\n<li>their average age is 28 years old</li>\n<li>19% are women</li>\n<li>They\u2019ve been coding for an average of 21 months</li>\n<li>25% have already landed their first developer job</li>\n</ul></li>\n<li>40% of them would like to either freelance or start their own business.</li>\n<li>Most of them are interested in working as web developers, but are also interested in a wide variety of developer specializations.</li>\n<li>Most new coders haven\u2019t yet started listening to podcasts, but the ones who do listen to a wide range of them.</li>\n</ul>\n\n<p><strong>Brian #5</strong> <a href=\"http://www.datasciencecentral.com/profiles/blogs/introduction-to-anomaly-detection\"><strong>Introduction to Anomaly Detection</strong></a></p>\n\n<ul>\n<li><strong>Anomaly Detection Techniques</strong>\n<ul>\n<li>Simple Statistical Methods</li>\n<li>Challenges</li>\n</ul></li>\n<li><strong>Machine Learning-Based Approaches</strong>\n<ul>\n<li>Density-Based Anomaly Detection</li>\n<li>Clustering-Based Anomaly Detection</li>\n<li>Support Vector Machine-Based Anomaly Detection</li>\n<li>Building a Simple Detection Solution Using a Low-Pass Filter</li>\n<li>Moving Average Using Discrete Linear Convolution</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://pybee.org/news/buzz/a-request-for-your-help/\"><strong>Beeware: A request for your help</strong></a></p>\n\n<ul>\n<li>What is Beeware? Started 4 years ago. Since then, the BeeWare project has grown to encompass support for mobile platforms, two alternate Python implementations, and a cross platform widget set - as well as the developer tools that started the project originally.</li>\n<li>Lots of work done over the last 6 months:\n<ul>\n<li>Extensive improvements to Batavia and VOC;</li>\n<li>An Android backend for Toga;</li>\n<li>A Django backend for Toga, enabling Toga apps to be deployed as web apps;</li>\n<li>A Winforms backend for Toga, enabling Toga apps to run on Windows with a modern appearance;</li>\n</ul></li>\n<li>Unfortunately, my contract with Jambon is coming to a close - which means my contributions to BeeWare will go back to being what my spare time allows.</li>\n<li>So - this is an appeal to you - the Python community. If you are excited by the prospect of having access to Python on mobile platforms, or you would like to write applications in Python that have completely native user interfaces - <strong>I need your help</strong> for just <strong>US$10 a month</strong> - you can <a href=\"http://pybee.org/contributing/membership/\">join the BeeWare project as a member</a>,</li>\n</ul>\n\n<p><strong>Other news</strong></p>\n\n<p><a href=\"http://www.pycascades.com\">pycascades.com</a> is a regional PyCon for the Pacific Northwest.</p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Fri, 12 May 2017 00:00:00 -0800", "published_parsed": [2017, 5, 12, 8, 0, 0, 4, 132, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Could we have more in-database machine learning please?", "itunes_episode": "25", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:17:53"}}, "#24 I have a local PyPI server and so do you!": {"info": {"title": "#24 I have a local PyPI server and so do you!", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#24 I have a local PyPI server and so do you!"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you"}, {"length": "13632144", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/24/i-have-a-local-pypi-server-and-so-do-you.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you", "id": "https://pythonbytes.fm/episodes/2f4fd17a-4705-4ce8-b07d-3cb941912021", "guidislink": false, "summary": "<p>Welcome to Python bytes. Episode 24, recorded May 2, 2017. This episode is sponsored by rollbar: <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1: <a href=\"https://dbader.org/blog/python-intro-statements-variables-and-loops\">Learning Python Series by Doug Farrell</a>, published on dbader.org</strong></p>\n\n<ul>\n<li>Doug Ferrell wrote for <a href=\"https://roboticsandbeyond.org/\">Robotics and Beyond</a> , a STEM educational space</li>\n<li>This is part 1: <strong>Let\u2019s Program with Python: Statements, Variables, and Loops</strong></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://www.pgbovine.net/publications/older-adults-learning-programming_CHI-2017.pdf\"><strong>Geeking out in your older years</strong></a></p>\n\n<ul>\n<li>Over 500 respondents on <a href=\"http://pythontutor.com/\">http://pythontutor.com/</a></li>\n<li>Age group: 60-85</li>\n<li>Opportunities: Help older adults become software dev proficient to\n<ul>\n<li>Connect with their grand children</li>\n<li>Fill the growing tech / teacher gap</li>\n<li>Mentor others</li>\n<li>Keep mentally active</li>\n<li>Pursue their hobbies</li>\n</ul></li>\n<li>Used MOOCs, online courses, books, and more to learn</li>\n<li>Felt somewhat isolated and disconnected\n<ul>\n<li>How could we all help? Or help them help themselves as a group?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Local package store</strong></p>\n\n<ul>\n<li>Not a story, just something I used for the plane trip that didn\u2019t know worked before.</li>\n<li>Stops my quest for a easy to use local pypi server.</li>\n<li><p>Download without installing</p>\n\n<p><code>$ cd /tmp/wheelhouse</code> \n<code>$ python3.6 -m pip download &lt;somePackage&gt;</code> </p></li>\n<li><p>Then, later, probably within a virtual env</p>\n\n<p><code>$ python3.6 -m pip install --no-index --find-links=/tmp/wheelhouse somePackage</code>  </p></li>\n<li><p><strong>Does it work with requirements files? Yes!</strong></p></li>\n</ul>\n\n<p><code>pip3 download -r /full_path_to/requirements.txt</code></p>\n\n<p><strong>Sponsored by rollbar</strong> <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a></p>\n\n<ul>\n<li><strong>Adding the Rollbar Python SDK is as easy as <code>pip install rollbar</code>.</strong></li>\n<li><strong>Make sure to check out Rollbar at Pycon. Grab swag and get a product demo.</strong> </li>\n<li>Visit <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a> and get the get the Bootstrap Plan free for free\n<ul>\n<li>100,000 rollbar events / mo, 180 days retention</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14\"><strong>Modifying the Python language in 6 minutes</strong></a></p>\n\n<ul>\n<li>Anthony Shaw</li>\n<li>I\u2019m writing my findings on how CPython works and show you how easy it is to modify the Python syntax.</li>\n<li>I\u2019m going to show you how to add a new <strong>feature</strong> to the Python syntax.</li>\n<li><strong>Level 1: PEPs</strong></li>\n<li><strong>Level 2: Grammar</strong></li>\n<li>The <a href=\"https://github.com/python/cpython/blob/v3.6.1/Grammar/Grammar\">Grammar</a> file is simple text file describing all the elements of the Python language. This is used by not just CPython, but other implementations like PyPy to keep consistency and agree on the types of language semantics.\n<ul>\n<li>New statements\n<ul>\n<li><code>incr_stmt: '++'</code></li>\n<li><code>decr_stmt: '--'</code></li>\n</ul></li>\n</ul></li>\n<li><strong>Level 3 : Lexer:</strong> There are four steps that Python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens.</li>\n<li><strong>Level 4 : Parser</strong>: The parser takes those tokens and generates a structure that shows their relationship to each other. For Python and many other languages, this is the Abstract Syntax Tree (or AST). </li>\n<li><strong>Level 5: Compiler:</strong>  The compiler then takes the syntax tree and \u2018visits\u2019 each branch, the CPython compiler has a method for visiting a statement, called <code>compile_visit_stmt</code> which is just a big switch statement looking at the statement kind.</li>\n<li><a href=\"https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757\">https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757</a></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/timofurrer/colorful\"><strong>colorful</strong></a></p>\n\n<ul>\n<li>\u201cTerminal string styling done right, in Python\u201d</li>\n<li>Add color to terminal applications with a pretty easy to read syntax</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.reddit.com/r/Python/comments/65v1kx/five_steps_to_add_the_bling_factor_your_python/\"><strong>Five steps to add the _bling_ factor your Python package</strong></a> <em>*</em>*</p>\n\n<ul>\n<li>by Tjelvar Olsson</li>\n<li>Step 1: Host the documentation on readthedocs</li>\n<li>Step 2: Set up continuous integration testing on Travis Ci</li>\n<li>Step 3: Calculate your code coverage using Codecov</li>\n<li>Step 4: Upload your Package to PyPi</li>\n<li>Step 5: Add badges to your project\u2019s README file</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Welcome to Python bytes. Episode 24, recorded May 2, 2017. This episode is sponsored by rollbar: <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a></p>\n\n<p><strong>Brian #1: <a href=\"https://dbader.org/blog/python-intro-statements-variables-and-loops\">Learning Python Series by Doug Farrell</a>, published on dbader.org</strong></p>\n\n<ul>\n<li>Doug Ferrell wrote for <a href=\"https://roboticsandbeyond.org/\">Robotics and Beyond</a> , a STEM educational space</li>\n<li>This is part 1: <strong>Let\u2019s Program with Python: Statements, Variables, and Loops</strong></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"http://www.pgbovine.net/publications/older-adults-learning-programming_CHI-2017.pdf\"><strong>Geeking out in your older years</strong></a></p>\n\n<ul>\n<li>Over 500 respondents on <a href=\"http://pythontutor.com/\">http://pythontutor.com/</a></li>\n<li>Age group: 60-85</li>\n<li>Opportunities: Help older adults become software dev proficient to\n<ul>\n<li>Connect with their grand children</li>\n<li>Fill the growing tech / teacher gap</li>\n<li>Mentor others</li>\n<li>Keep mentally active</li>\n<li>Pursue their hobbies</li>\n</ul></li>\n<li>Used MOOCs, online courses, books, and more to learn</li>\n<li>Felt somewhat isolated and disconnected\n<ul>\n<li>How could we all help? Or help them help themselves as a group?</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>Local package store</strong></p>\n\n<ul>\n<li>Not a story, just something I used for the plane trip that didn\u2019t know worked before.</li>\n<li>Stops my quest for a easy to use local pypi server.</li>\n<li><p>Download without installing</p>\n\n<p><code>$ cd /tmp/wheelhouse</code> \n<code>$ python3.6 -m pip download &lt;somePackage&gt;</code> </p></li>\n<li><p>Then, later, probably within a virtual env</p>\n\n<p><code>$ python3.6 -m pip install --no-index --find-links=/tmp/wheelhouse somePackage</code>  </p></li>\n<li><p><strong>Does it work with requirements files? Yes!</strong></p></li>\n</ul>\n\n<p><code>pip3 download -r /full_path_to/requirements.txt</code></p>\n\n<p><strong>Sponsored by rollbar</strong> <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a></p>\n\n<ul>\n<li><strong>Adding the Rollbar Python SDK is as easy as <code>pip install rollbar</code>.</strong></li>\n<li><strong>Make sure to check out Rollbar at Pycon. Grab swag and get a product demo.</strong> </li>\n<li>Visit <a href=\"https://rollbar.com/pythonbytes\">https://rollbar.com/pythonbytes</a> and get the get the Bootstrap Plan free for free\n<ul>\n<li>100,000 rollbar events / mo, 180 days retention</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14\"><strong>Modifying the Python language in 6 minutes</strong></a></p>\n\n<ul>\n<li>Anthony Shaw</li>\n<li>I\u2019m writing my findings on how CPython works and show you how easy it is to modify the Python syntax.</li>\n<li>I\u2019m going to show you how to add a new <strong>feature</strong> to the Python syntax.</li>\n<li><strong>Level 1: PEPs</strong></li>\n<li><strong>Level 2: Grammar</strong></li>\n<li>The <a href=\"https://github.com/python/cpython/blob/v3.6.1/Grammar/Grammar\">Grammar</a> file is simple text file describing all the elements of the Python language. This is used by not just CPython, but other implementations like PyPy to keep consistency and agree on the types of language semantics.\n<ul>\n<li>New statements\n<ul>\n<li><code>incr_stmt: '++'</code></li>\n<li><code>decr_stmt: '--'</code></li>\n</ul></li>\n</ul></li>\n<li><strong>Level 3 : Lexer:</strong> There are four steps that Python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens.</li>\n<li><strong>Level 4 : Parser</strong>: The parser takes those tokens and generates a structure that shows their relationship to each other. For Python and many other languages, this is the Abstract Syntax Tree (or AST). </li>\n<li><strong>Level 5: Compiler:</strong>  The compiler then takes the syntax tree and \u2018visits\u2019 each branch, the CPython compiler has a method for visiting a statement, called <code>compile_visit_stmt</code> which is just a big switch statement looking at the statement kind.</li>\n<li><a href=\"https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757\">https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757</a></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://github.com/timofurrer/colorful\"><strong>colorful</strong></a></p>\n\n<ul>\n<li>\u201cTerminal string styling done right, in Python\u201d</li>\n<li>Add color to terminal applications with a pretty easy to read syntax</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://www.reddit.com/r/Python/comments/65v1kx/five_steps_to_add_the_bling_factor_your_python/\"><strong>Five steps to add the _bling_ factor your Python package</strong></a> <em>*</em>*</p>\n\n<ul>\n<li>by Tjelvar Olsson</li>\n<li>Step 1: Host the documentation on readthedocs</li>\n<li>Step 2: Set up continuous integration testing on Travis Ci</li>\n<li>Step 3: Calculate your code coverage using Codecov</li>\n<li>Step 4: Upload your Package to PyPi</li>\n<li>Step 5: Add badges to your project\u2019s README file</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 03 May 2017 00:00:00 -0800", "published_parsed": [2017, 5, 3, 8, 0, 0, 2, 123, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "I have a local PyPI server and so do you!", "itunes_episode": "24", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "Welcome to Python bytes. Episode 24, recorded May 2, 2017. This episode is sponsored by rollbar: <https://rollbar.com/pythonbytes> **Brian #1:[Learning Python Series by Doug Farrell](https://dbader.org/blog/python-intro-statements-variables-and-loops), published on dbader.org** * Doug Ferrell wrote for [Robotics and Beyond](https://roboticsandbeyond.org/) , a STEM educational space * This is part 1: **Let\u2019s Program with Python: Statements, Variables, and Loops** **Michael #2:** [**Geeking out in your older years**](http://www.pgbovine.net/publications/older-adults-learning- programming_CHI-2017.pdf) * Over 500 respondents on <http://pythontutor.com/> * Age group: 60-85 * Opportunities: Help older adults become software dev proficient to * Connect with their grand children * Fill the growing tech / teacher gap * Mentor others * Keep mentally active * Pursue their hobbies * Used MOOCs, online courses, books, and more to learn * Felt somewhat isolated and disconnected * How could we all help? Or help them help themselves as a group? **Brian #3:** **Local package store** * Not a story, just something I used for the plane trip that didn\u2019t know worked before. * Stops my quest for a easy to use local pypi server. * Download without installing `$ cd /tmp/wheelhouse` `$ python3.6 -m pip download <somePackage>` * Then, later, probably within a virtual env `$ python3.6 -m pip install --no-index --find-links=/tmp/wheelhouse somePackage` * **Does it work with requirements files? Yes!** `pip3 download -r /full_path_to/requirements.txt` **Sponsored by rollbar** <https://rollbar.com/pythonbytes> * **Adding the Rollbar Python SDK is as easy as`pip install rollbar`.** * **Make sure to check out Rollbar at Pycon. Grab swag and get a product demo.** * Visit <https://rollbar.com/pythonbytes> and get the get the Bootstrap Plan free for free * 100,000 rollbar events / mo, 180 days retention **Michael #4:** [**Modifying the Python language in 6 minutes**](https://hackernoon.com/modifying-the-python-language- in-7-minutes-b94b0a99ce14) * Anthony Shaw * I\u2019m writing my findings on how CPython works and show you how easy it is to modify the Python syntax. * I\u2019m going to show you how to add a new **feature** to the Python syntax. * **Level 1: PEPs** * **Level 2: Grammar** * The [Grammar](https://github.com/python/cpython/blob/v3.6.1/Grammar/Grammar) file is simple text file describing all the elements of the Python language. This is used by not just CPython, but other implementations like PyPy to keep consistency and agree on the types of language semantics. * New statements * `incr_stmt: '++'` * `decr_stmt: '--'` * **Level 3 : Lexer:** There are four steps that Python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens. * **Level 4 : Parser** : The parser takes those tokens and generates a structure that shows their relationship to each other. For Python and many other languages, this is the Abstract Syntax Tree (or AST). * **Level 5: Compiler:** The compiler then takes the syntax tree and \u2018visits\u2019 each branch, the CPython compiler has a method for visiting a statement, called `compile_visit_stmt` which is just a big switch statement looking at the statement kind. * <https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757> **Brian #5:** [**colorful**](https://github.com/timofurrer/colorful) * \u201cTerminal string styling done right, in Python\u201d * Add color to terminal applications with a pretty easy to read syntax **Michael #6:** [**Five steps to add the _bling_ factor your Python package**](https://www.reddit.com/r/Python/comments/65v1kx/five_steps_to_add_the_bling_factor_your_python/) _*_ * * by Tjelvar Olsson * Step 1: Host the documentation on readthedocs * Step 2: Set up continuous integration testing on Travis Ci * Step 3: Calculate your code coverage using Codecov * Step 4: Upload your Package to PyPi * Step 5: Add badges to your project\u2019s README file"}], "itunes_duration": "00:19:29"}}, "#23 Can you grok the GIL?": {"info": {"title": "#23 Can you grok the GIL?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#23 Can you grok the GIL?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/23/can-you-grok-the-gil"}, {"length": "14777638", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/23/can-you-grok-the-gil.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/23/can-you-grok-the-gil", "id": "https://pythonbytes.fm/episodes/download/23/can-you-grok-the-gil.mp3", "guidislink": false, "summary": "<p><strong>Sponsored by ADVANCE DIGITAL. Find your Python web job at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://opensource.com/article/17/4/grok-gil\"><strong>Grok the GIL</strong> - <strong>How to write fast and thread-safe Python</strong></a> </p>\n\n<ul>\n<li>A. Jesse Jiryu Davis teaches us about the GIL, and how to use that knowledge to decide between threads and processes for parallelism.</li>\n<li>From the article:\n<ul>\n<li>The GIL's effect on the threads in your program is simple enough that you can write the principle on the back of your hand: \"One thread runs Python, while N others sleep or await I/O.\"</li>\n</ul></li>\n<li>Discusses and Cooperative multitasking and Preemptive multitasking</li>\n<li>When can a Python process be interrupted? (between bytecodes)</li>\n<li>When do you need to use thread protection? (less than you think)</li>\n<li><em>A. Jesse Jiryu Davis will be speaking at</em> <a href=\"https://us.pycon.org/2017/\"><em>PyCon 2017</em></a><em>, which will be held May 17-25 in Portland, Oregon. Catch his talk,</em> <a href=\"https://us.pycon.org/2017/schedule/presentation/320/\"><em>Grok the GIL: Write Fast and Thread-Safe Python</em></a><em>, on Friday, May 19.</em></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/mcuban/status/846781342083923969\"><strong>The New NBA by Mark Cuban</strong></a></p>\n\n<ul>\n<li>Introduction to machine learning in Python &amp; Jupyter notebooks</li>\n<li>Mark Cuban using Python and ML to play with his NBA team</li>\n<li>\u201cWe have a team at the Mavs but I need to know it to help define strategy and make decisions\u201d</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://pyfound.blogspot.com/2017/04/the-ego-less-developer-community.html\"><strong>Ian Cordasco gets a Community Service Award from PSF</strong></a></p>\n\n<ul>\n<li>Ian was on <a href=\"http://testandcode.com/13\">Test &amp; Code, episode 13</a>, talking about Betamax</li>\n<li>From the announcement:\n<ul>\n<li>Ian Cordasco has been the PSF\u2019s Election Administrator since 2015, volunteering his efforts for this important role. </li>\n<li>Cordasco frequently mentors newer coders and supports their Python endeavors. </li>\n<li>The Python Software Foundation award the 2017 Q1 Community Service Award to Ian Cordasco for his contributions to PSF elections and active mentoring of women in Python community.</li>\n<li>Cordasco has a history of going out of his way to support and encourage female developers. When <a href=\"https://twitter.com/WillingCarol\">Carol Willing</a>, a developer for the Jupyter project, wanted to work on the Requests library, she got in touch with Cordasco. \u201cWe worked together on the project and my first commit to the Requests library got accepted!\u201d Cordasco later wrote a fantastic post about it on his <a href=\"http://www.coglib.com/~icordasc/blog/2014/11/sending-json-in-requests.html\">blog</a>.</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by ADVANCE DIGITAL</strong></p>\n\n<ul>\n<li>They have a small team of developers who work in an agile/devops environment\u2013 you will make an impact with your work quickly</li>\n<li>They are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale</li>\n<li>They fund employee development and conference attendance</li>\n<li>They are located in beautiful Jersey City, one stop from Manhattan on the PATH</li>\n<li>They are one of the 10 largest news sites by traffic in the US</li>\n<li>Apply at <strong><a href=\"http://python.advance.net/\">http://python.advance.net/</a></strong></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.jupyter.org/2017/04/19/release-of-ipython-6-0/\"><strong>Release of IPython 6.0</strong></a></p>\n\n<ul>\n<li>by Matthias Bussonnier</li>\n<li>IPython goes Python 3 only</li>\n<li>Our personal experience writing Python3-only source code.\n<ul>\n<li>The size of the IPython codebase has decreased by about 1500 lines of Python code relative to the last release. Of course, that\u2019s not solely due to the removal of Python 2 support, but a non-negligible amount is.</li>\n<li>even more remarkable in light of completely new features that required adding hundreds of lines of code</li>\n<li>This change eases the burden on contributors to IPython. Contributors can can spend less time thinking \u201cwhat about Python 2\u201d, or rewriting a pull request because the Python 2 test suite fails. </li>\n<li>At the same time, our tests now complete more quickly on continuous integration services because they need to run on fewer versions of Python.</li>\n<li>From a developer point of view we are extremely pleased with having the possibility to write Python3-only code, and are looking forward to even more improvements like <a href=\"https://docs.python.org/3/library/pathlib.html\">pathlib</a>.</li>\n<li>We hope you will enjoy this release. It will be the base for some awesome features, like async/await REPL.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://hynek.me/articles/testing-packaging/\"><strong>Testing &amp; Packaging</strong></a></p>\n\n<ul>\n<li>Hynek Schlawack describes why he was convinced to use a src directory in package distributions he works on.</li>\n<li>Just use a src dir (of course it doesn\u2019t have to be exactly \u201csrc\u201d but that\u2019s the convention and it should be different than your package name), it will make your life easier.</li>\n<li>Without it, it is easy to think you are testing an installed package, but you\u2019re really testing the modules before install. These can be different. Better to test as close to how your users will see the package as possible, and using a src dir helps that.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://aws.amazon.com/releasenotes/5198208415517126\"><strong>AWS Lambda adds Python 3.6 support</strong></a></p>\n\n<ul>\n<li>AWS Lambda is a compute service that lets you run code without provisioning or managing servers. </li>\n<li>AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. </li>\n<li>You pay only for the compute time you consume - there is no charge when your code is not running.</li>\n<li>You can also build <a href=\"https://aws.amazon.com/serverless\">serverless</a> applications composed of functions that are triggered by events and automatically deploy them using AWS CodePipeline and AWS CodeBuild. </li>\n<li>Already good things cometh: <a href=\"https://github.com/Miserlou/Zappa/issues/793\">Zappa has Python 3 support</a>.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Sponsored by ADVANCE DIGITAL. Find your Python web job at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></strong></p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://opensource.com/article/17/4/grok-gil\"><strong>Grok the GIL</strong> - <strong>How to write fast and thread-safe Python</strong></a> </p>\n\n<ul>\n<li>A. Jesse Jiryu Davis teaches us about the GIL, and how to use that knowledge to decide between threads and processes for parallelism.</li>\n<li>From the article:\n<ul>\n<li>The GIL's effect on the threads in your program is simple enough that you can write the principle on the back of your hand: \"One thread runs Python, while N others sleep or await I/O.\"</li>\n</ul></li>\n<li>Discusses and Cooperative multitasking and Preemptive multitasking</li>\n<li>When can a Python process be interrupted? (between bytecodes)</li>\n<li>When do you need to use thread protection? (less than you think)</li>\n<li><em>A. Jesse Jiryu Davis will be speaking at</em> <a href=\"https://us.pycon.org/2017/\"><em>PyCon 2017</em></a><em>, which will be held May 17-25 in Portland, Oregon. Catch his talk,</em> <a href=\"https://us.pycon.org/2017/schedule/presentation/320/\"><em>Grok the GIL: Write Fast and Thread-Safe Python</em></a><em>, on Friday, May 19.</em></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://twitter.com/mcuban/status/846781342083923969\"><strong>The New NBA by Mark Cuban</strong></a></p>\n\n<ul>\n<li>Introduction to machine learning in Python &amp; Jupyter notebooks</li>\n<li>Mark Cuban using Python and ML to play with his NBA team</li>\n<li>\u201cWe have a team at the Mavs but I need to know it to help define strategy and make decisions\u201d</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"http://pyfound.blogspot.com/2017/04/the-ego-less-developer-community.html\"><strong>Ian Cordasco gets a Community Service Award from PSF</strong></a></p>\n\n<ul>\n<li>Ian was on <a href=\"http://testandcode.com/13\">Test &amp; Code, episode 13</a>, talking about Betamax</li>\n<li>From the announcement:\n<ul>\n<li>Ian Cordasco has been the PSF\u2019s Election Administrator since 2015, volunteering his efforts for this important role. </li>\n<li>Cordasco frequently mentors newer coders and supports their Python endeavors. </li>\n<li>The Python Software Foundation award the 2017 Q1 Community Service Award to Ian Cordasco for his contributions to PSF elections and active mentoring of women in Python community.</li>\n<li>Cordasco has a history of going out of his way to support and encourage female developers. When <a href=\"https://twitter.com/WillingCarol\">Carol Willing</a>, a developer for the Jupyter project, wanted to work on the Requests library, she got in touch with Cordasco. \u201cWe worked together on the project and my first commit to the Requests library got accepted!\u201d Cordasco later wrote a fantastic post about it on his <a href=\"http://www.coglib.com/~icordasc/blog/2014/11/sending-json-in-requests.html\">blog</a>.</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by ADVANCE DIGITAL</strong></p>\n\n<ul>\n<li>They have a small team of developers who work in an agile/devops environment\u2013 you will make an impact with your work quickly</li>\n<li>They are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale</li>\n<li>They fund employee development and conference attendance</li>\n<li>They are located in beautiful Jersey City, one stop from Manhattan on the PATH</li>\n<li>They are one of the 10 largest news sites by traffic in the US</li>\n<li>Apply at <strong><a href=\"http://python.advance.net/\">http://python.advance.net/</a></strong></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://blog.jupyter.org/2017/04/19/release-of-ipython-6-0/\"><strong>Release of IPython 6.0</strong></a></p>\n\n<ul>\n<li>by Matthias Bussonnier</li>\n<li>IPython goes Python 3 only</li>\n<li>Our personal experience writing Python3-only source code.\n<ul>\n<li>The size of the IPython codebase has decreased by about 1500 lines of Python code relative to the last release. Of course, that\u2019s not solely due to the removal of Python 2 support, but a non-negligible amount is.</li>\n<li>even more remarkable in light of completely new features that required adding hundreds of lines of code</li>\n<li>This change eases the burden on contributors to IPython. Contributors can can spend less time thinking \u201cwhat about Python 2\u201d, or rewriting a pull request because the Python 2 test suite fails. </li>\n<li>At the same time, our tests now complete more quickly on continuous integration services because they need to run on fewer versions of Python.</li>\n<li>From a developer point of view we are extremely pleased with having the possibility to write Python3-only code, and are looking forward to even more improvements like <a href=\"https://docs.python.org/3/library/pathlib.html\">pathlib</a>.</li>\n<li>We hope you will enjoy this release. It will be the base for some awesome features, like async/await REPL.</li>\n</ul></li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://hynek.me/articles/testing-packaging/\"><strong>Testing &amp; Packaging</strong></a></p>\n\n<ul>\n<li>Hynek Schlawack describes why he was convinced to use a src directory in package distributions he works on.</li>\n<li>Just use a src dir (of course it doesn\u2019t have to be exactly \u201csrc\u201d but that\u2019s the convention and it should be different than your package name), it will make your life easier.</li>\n<li>Without it, it is easy to think you are testing an installed package, but you\u2019re really testing the modules before install. These can be different. Better to test as close to how your users will see the package as possible, and using a src dir helps that.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://aws.amazon.com/releasenotes/5198208415517126\"><strong>AWS Lambda adds Python 3.6 support</strong></a></p>\n\n<ul>\n<li>AWS Lambda is a compute service that lets you run code without provisioning or managing servers. </li>\n<li>AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. </li>\n<li>You pay only for the compute time you consume - there is no charge when your code is not running.</li>\n<li>You can also build <a href=\"https://aws.amazon.com/serverless\">serverless</a> applications composed of functions that are triggered by events and automatically deploy them using AWS CodePipeline and AWS CodeBuild. </li>\n<li>Already good things cometh: <a href=\"https://github.com/Miserlou/Zappa/issues/793\">Zappa has Python 3 support</a>.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 26 Apr 2017 00:00:00 -0800", "published_parsed": [2017, 4, 26, 8, 0, 0, 2, 116, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Can you grok the GIL?", "itunes_episode": "23", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:34"}}, "#22 PYTHONPATH considered harmful": {"info": {"title": "#22 PYTHONPATH considered harmful", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#22 PYTHONPATH considered harmful"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/22/pythonpath-considered-harmful"}, {"length": "15343080", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/22/pythonpath-considered-harmful.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/22/pythonpath-considered-harmful", "id": "https://pythonbytes.fm/episodes/download/22/pythonpath-considered-harmful.mp3", "guidislink": false, "summary": "<p><strong>Sponsored by <a href=\"http://python.advance.net/\">ADVANCE DIGITAL</a></strong>. Find your rewarding Python job at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"https://orbifold.xyz/pythonpath.html\"><strong>PYTHONPATH considered harmful</strong></a></p>\n\n<ul>\n<li>Don\u2019t do it.</li>\n<li>You might not regret it today. But later you will.</li>\n<li>Mucks up distribution searches, etc.\n<ul>\n<li>\u201cFor one, most directories are poorly suited to be on the Python search path. Consider, for example, the root directory of a typical Python project: it contains <code>setup.py</code> -- and so, if it were added to the current search path, <code>import setup</code> would become possible. (This is one reason to have <code>src/</code> directories.) Often, directories added unwisely to the Python search path cause files to be imported from paths they do not expect to, and surprisingly conflict.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/keon/algorithms\">keon/algorithms</a></p>\n\n<ul>\n<li>Minimal examples of data structures and algorithms in Python</li>\n<li>Topics include\n<ul>\n<li>Array</li>\n<li>circular_counter</li>\n<li>flatten</li>\n<li>garage</li>\n<li>merge_intervals</li>\n<li>graphs</li>\n<li>clone_graph</li>\n<li>find_path</li>\n<li>traversal</li>\n<li>trees</li>\n<li>etc.</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong><a href=\"https://glyph.twistedmatrix.com/2016/08/attrs.html\">Glyph on attrs</a></strong></p>\n\n<ul>\n<li>We talked about <code>attrs</code> in <a href=\"https://pythonbytes.fm/11\">episode 11</a>, and pointed to the project and the docs.</li>\n<li>I came across good article introducing why you should use <code>attrs</code>, by glyph, from 2016.</li>\n<li>The one Python library everyone needs: <a href=\"https://glyph.twistedmatrix.com/2016/08/attrs.html\">https://glyph.twistedmatrix.com/2016/08/attrs.html</a></li>\n<li>Discusses \n<ul>\n<li>problems with using lists and tuples as data structures.</li>\n<li>creating your own classes properly. </li>\n<li>possible problems with <code>namedtuple</code> (-ish. I still love <code>namedtuple</code>).</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by <a href=\"http://python.advance.net/\">ADVANCE DIGITAL</a></strong></p>\n\n<ul>\n<li>A small team of developers who work in an agile/devops environment\u2013 you will make an impact with your work quickly</li>\n<li>Are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale</li>\n<li>Fund employee development and conference attendance</li>\n<li>Are located in beautiful Jersey City, one stop from Manhattan on the PATH</li>\n<li>Are one of the 10 largest news sites by traffic in the US</li>\n<li>Apply at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/dabeaz/curio\"><strong>Curio for Python 3.5+ concurrency</strong></a></p>\n\n<ul>\n<li>Curio is a library for performing concurrent I/O and common system programming tasks such as launching subprocesses and farming work out to thread and process pools. </li>\n<li>Curio is solely concerned with the execution of coroutines. A coroutine is a function defined using async def.</li>\n<li>It uses Python coroutines and the explicit <code>async</code>/<code>await</code> syntax introduced in Python 3.5. </li>\n<li>Its programming model is based on cooperative multitasking and existing programming abstractions such as threads, sockets, files, subprocesses, locks, and queues. </li>\n<li>All sorts of cool constructs: <code>AsyncThreads</code>, <code>UniversalQueues</code>, async file I/O, <code>Tasks</code>, and more.</li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <strong>Python Package src-ery</strong></p>\n\n<ul>\n<li>\"Use the src, Luke\"</li>\n<li>\"To src, or not to src, that is the question\"</li>\n</ul>\n\n<p>Answering a listener question about Python packaging.\nIn episode 15: Digging into Python Packaging, we mentioned to articles about getting started with packaging. \nIn the comments, Kristof Claes noted that these references were in conflict with a couple of other references:</p>\n\n<ul>\n<li>pytest \u201cGood Integration Practices\u201d, <a href=\"https://docs.pytest.org/en/latest/goodpractices.html\">https://docs.pytest.org/en/latest/goodpractices.html</a></li>\n<li>ionel\u2019s \u201cPackaging a Python library\u201d, <a href=\"https://blog.ionelmc.ro/2014/05/25/python-packaging/\">https://blog.ionelmc.ro/2014/05/25/python-packaging/</a></li>\n</ul>\n\n<p>Both of these strongly encourage the use of a \u201csrc\u201d directory when setting up a package for distribution.\nThere seems to be good reasons to use \u201csrc\u201d. Many of the reasons are around the idea that during testing, you should be testing an installed version of the code. I have no reason to disagree with Ionel\u2019s arguments and the pytest documentation recommendation.</p>\n\n<p>However:</p>\n\n<ul>\n<li>The pypa doesn\u2019t bring this up when discussing distribution: \n<ul>\n<li><a href=\"https://packaging.python.org/distributing/\">https://packaging.python.org/distributing/</a></li>\n</ul></li>\n<li>The pypa sample project doesn\u2019t use \u201csrc\u201d:\n<ul>\n<li><a href=\"https://github.com/pypa/sampleproject\">https://github.com/pypa/sampleproject</a></li>\n</ul></li>\n<li>Many popular packages don\u2019t:\n<ul>\n<li>requests: <a href=\"https://github.com/kennethreitz/requests\">https://github.com/kennethreitz/requests</a></li>\n<li>pytest itself: <a href=\"https://github.com/pytest-dev/pytest\">https://github.com/pytest-dev/pytest</a></li>\n</ul></li>\n</ul>\n\n<p>Why not?</p>\n\n<ul>\n<li>The pytest recommendation is subtle. It recommends using \u201csrc\u201d if you need to include a dunder init file in the tests directory. Otherwise, the local code will be tested instead of the installed code, in part to test the installation and to test a library from the perspective of a user.</li>\n<li>pytest also recommends against having a top level dunder init in the tests directory. And this is a stronger recommendation.</li>\n<li>But Ionel\u2019s points are not just around the use of pytest.</li>\n<li>So this is still really an open question to the Python community.\n<ul>\n<li>If it\u2019s great to use \u201csrc\u201d instead of top level packages, why aren\u2019t more projects doing this?</li>\n<li>Why doesn\u2019t the PyPA mention it?</li>\n</ul></li>\n</ul>\n\n<p><strong># 6 Michael:</strong> <a href=\"http://fortune.com/2017/04/14/intel-openstack-project-rackspace/\"><strong>Intel Pulls Funding from OpenStack Effort It Founded With Rackspace</strong></a></p>\n\n<ul>\n<li>Intel and Rackspace were collaborating on a project called OpenStack Innovation Center</li>\n<li>Launched in July 2015. </li>\n<li>A source close to the effort said initial funding was supposed to last through 2018, but Intel pulled it early.</li>\n<li>A Rackspace spokeswoman said \u201cOSIC\u2019s objective was to create the world\u2019s largest OpenStack developer cloud and develop enterprise capabilities within OpenStack. It quickly accomplished the first goal, and has made great progress toward the second.\u201d</li>\n<li>Some 30 Rackspace employees who had been working at the innovation center have been given two weeks to find new jobs at the San Antonio-based company.</li>\n<li>Story here is we all need to think about funding projects and diversification.</li>\n</ul>\n\n<p><strong>Our news:</strong></p>\n\n<p><strong>Michael</strong>: \nHurry up and register for EuroPython: <a href=\"https://ep2017.europython.eu/en/\">https://ep2017.europython.eu/en/</a> Earlybird sold out.</p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Sponsored by <a href=\"http://python.advance.net/\">ADVANCE DIGITAL</a></strong>. Find your rewarding Python job at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"https://orbifold.xyz/pythonpath.html\"><strong>PYTHONPATH considered harmful</strong></a></p>\n\n<ul>\n<li>Don\u2019t do it.</li>\n<li>You might not regret it today. But later you will.</li>\n<li>Mucks up distribution searches, etc.\n<ul>\n<li>\u201cFor one, most directories are poorly suited to be on the Python search path. Consider, for example, the root directory of a typical Python project: it contains <code>setup.py</code> -- and so, if it were added to the current search path, <code>import setup</code> would become possible. (This is one reason to have <code>src/</code> directories.) Often, directories added unwisely to the Python search path cause files to be imported from paths they do not expect to, and surprisingly conflict.\u201d</li>\n</ul></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/keon/algorithms\">keon/algorithms</a></p>\n\n<ul>\n<li>Minimal examples of data structures and algorithms in Python</li>\n<li>Topics include\n<ul>\n<li>Array</li>\n<li>circular_counter</li>\n<li>flatten</li>\n<li>garage</li>\n<li>merge_intervals</li>\n<li>graphs</li>\n<li>clone_graph</li>\n<li>find_path</li>\n<li>traversal</li>\n<li>trees</li>\n<li>etc.</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong><a href=\"https://glyph.twistedmatrix.com/2016/08/attrs.html\">Glyph on attrs</a></strong></p>\n\n<ul>\n<li>We talked about <code>attrs</code> in <a href=\"https://pythonbytes.fm/11\">episode 11</a>, and pointed to the project and the docs.</li>\n<li>I came across good article introducing why you should use <code>attrs</code>, by glyph, from 2016.</li>\n<li>The one Python library everyone needs: <a href=\"https://glyph.twistedmatrix.com/2016/08/attrs.html\">https://glyph.twistedmatrix.com/2016/08/attrs.html</a></li>\n<li>Discusses \n<ul>\n<li>problems with using lists and tuples as data structures.</li>\n<li>creating your own classes properly. </li>\n<li>possible problems with <code>namedtuple</code> (-ish. I still love <code>namedtuple</code>).</li>\n</ul></li>\n</ul>\n\n<p><strong>Sponsored by <a href=\"http://python.advance.net/\">ADVANCE DIGITAL</a></strong></p>\n\n<ul>\n<li>A small team of developers who work in an agile/devops environment\u2013 you will make an impact with your work quickly</li>\n<li>Are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale</li>\n<li>Fund employee development and conference attendance</li>\n<li>Are located in beautiful Jersey City, one stop from Manhattan on the PATH</li>\n<li>Are one of the 10 largest news sites by traffic in the US</li>\n<li>Apply at <a href=\"http://python.advance.net/\">http://python.advance.net/</a></li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/dabeaz/curio\"><strong>Curio for Python 3.5+ concurrency</strong></a></p>\n\n<ul>\n<li>Curio is a library for performing concurrent I/O and common system programming tasks such as launching subprocesses and farming work out to thread and process pools. </li>\n<li>Curio is solely concerned with the execution of coroutines. A coroutine is a function defined using async def.</li>\n<li>It uses Python coroutines and the explicit <code>async</code>/<code>await</code> syntax introduced in Python 3.5. </li>\n<li>Its programming model is based on cooperative multitasking and existing programming abstractions such as threads, sockets, files, subprocesses, locks, and queues. </li>\n<li>All sorts of cool constructs: <code>AsyncThreads</code>, <code>UniversalQueues</code>, async file I/O, <code>Tasks</code>, and more.</li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <strong>Python Package src-ery</strong></p>\n\n<ul>\n<li>\"Use the src, Luke\"</li>\n<li>\"To src, or not to src, that is the question\"</li>\n</ul>\n\n<p>Answering a listener question about Python packaging.\nIn episode 15: Digging into Python Packaging, we mentioned to articles about getting started with packaging. \nIn the comments, Kristof Claes noted that these references were in conflict with a couple of other references:</p>\n\n<ul>\n<li>pytest \u201cGood Integration Practices\u201d, <a href=\"https://docs.pytest.org/en/latest/goodpractices.html\">https://docs.pytest.org/en/latest/goodpractices.html</a></li>\n<li>ionel\u2019s \u201cPackaging a Python library\u201d, <a href=\"https://blog.ionelmc.ro/2014/05/25/python-packaging/\">https://blog.ionelmc.ro/2014/05/25/python-packaging/</a></li>\n</ul>\n\n<p>Both of these strongly encourage the use of a \u201csrc\u201d directory when setting up a package for distribution.\nThere seems to be good reasons to use \u201csrc\u201d. Many of the reasons are around the idea that during testing, you should be testing an installed version of the code. I have no reason to disagree with Ionel\u2019s arguments and the pytest documentation recommendation.</p>\n\n<p>However:</p>\n\n<ul>\n<li>The pypa doesn\u2019t bring this up when discussing distribution: \n<ul>\n<li><a href=\"https://packaging.python.org/distributing/\">https://packaging.python.org/distributing/</a></li>\n</ul></li>\n<li>The pypa sample project doesn\u2019t use \u201csrc\u201d:\n<ul>\n<li><a href=\"https://github.com/pypa/sampleproject\">https://github.com/pypa/sampleproject</a></li>\n</ul></li>\n<li>Many popular packages don\u2019t:\n<ul>\n<li>requests: <a href=\"https://github.com/kennethreitz/requests\">https://github.com/kennethreitz/requests</a></li>\n<li>pytest itself: <a href=\"https://github.com/pytest-dev/pytest\">https://github.com/pytest-dev/pytest</a></li>\n</ul></li>\n</ul>\n\n<p>Why not?</p>\n\n<ul>\n<li>The pytest recommendation is subtle. It recommends using \u201csrc\u201d if you need to include a dunder init file in the tests directory. Otherwise, the local code will be tested instead of the installed code, in part to test the installation and to test a library from the perspective of a user.</li>\n<li>pytest also recommends against having a top level dunder init in the tests directory. And this is a stronger recommendation.</li>\n<li>But Ionel\u2019s points are not just around the use of pytest.</li>\n<li>So this is still really an open question to the Python community.\n<ul>\n<li>If it\u2019s great to use \u201csrc\u201d instead of top level packages, why aren\u2019t more projects doing this?</li>\n<li>Why doesn\u2019t the PyPA mention it?</li>\n</ul></li>\n</ul>\n\n<p><strong># 6 Michael:</strong> <a href=\"http://fortune.com/2017/04/14/intel-openstack-project-rackspace/\"><strong>Intel Pulls Funding from OpenStack Effort It Founded With Rackspace</strong></a></p>\n\n<ul>\n<li>Intel and Rackspace were collaborating on a project called OpenStack Innovation Center</li>\n<li>Launched in July 2015. </li>\n<li>A source close to the effort said initial funding was supposed to last through 2018, but Intel pulled it early.</li>\n<li>A Rackspace spokeswoman said \u201cOSIC\u2019s objective was to create the world\u2019s largest OpenStack developer cloud and develop enterprise capabilities within OpenStack. It quickly accomplished the first goal, and has made great progress toward the second.\u201d</li>\n<li>Some 30 Rackspace employees who had been working at the innovation center have been given two weeks to find new jobs at the San Antonio-based company.</li>\n<li>Story here is we all need to think about funding projects and diversification.</li>\n</ul>\n\n<p><strong>Our news:</strong></p>\n\n<p><strong>Michael</strong>: \nHurry up and register for EuroPython: <a href=\"https://ep2017.europython.eu/en/\">https://ep2017.europython.eu/en/</a> Earlybird sold out.</p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 18 Apr 2017 00:00:00 -0800", "published_parsed": [2017, 4, 18, 8, 0, 0, 1, 108, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "PYTHONPATH considered harmful", "itunes_episode": "22", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:15:50"}}, "#21 Python has a new star framework for RESTful APIs": {"info": {"title": "#21 Python has a new star framework for RESTful APIs", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#21 Python has a new star framework for RESTful APIs"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/21/python-has-a-new-star-framework-for-restful-apis"}, {"length": "20249840", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/21/python-has-a-new-star-framework-for-restful-apis.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/21/python-has-a-new-star-framework-for-restful-apis", "id": "https://pythonbytes.fm/episodes/download/21/python-has-a-new-star-framework-for-restful-apis.mp3", "guidislink": false, "summary": "<p>This episode has been <strong>sponsored by Rollbar</strong>. Get a special offer via <a href=\"http://rollbar.com/pythonbytes\">http://rollbar.com/pythonbytes</a></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"https://pymotw.com/3/profile/\"><strong>profile and pstats \u2014 Performance Analysis</strong></a></p>\n\n<ul>\n<li>Doug Hellman is working on the Python 3 MOTW series that was so successful for Python 2.</li>\n<li>Recent edition is profile and pstats, for profiling parts of your code you may have concerns with and finding out where the slow bits are.</li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/tomchristie/apistar\"><strong>API Star by Tom Christie</strong></a></p>\n\n<ul>\n<li>A smart Web API framework, designed for Python 3.</li>\n<li>A few things to try right away:</li>\n</ul>\n\n<pre><code>    $ pip3 install apistar\n    $ apistar new --template minimal\n    $ apistar run\n    $ apistar test\n</code></pre>\n\n<ul>\n<li>API Star allows you to dynamically inject various information about the incoming request into your views using type annotation.\n<ul>\n<li>e.g. </li>\n</ul></li>\n</ul>\n\n<pre><code>    def show_query_params(query_params: http.QueryParams):\n        return {\n            'params': dict(query_params)\n        }\n</code></pre>\n\n<ul>\n<li>You can instead set the status code or headers by annotating the view as returning a Response</li>\n</ul>\n\n<pre><code>def create_project() -&gt; Response: ...\n</code></pre>\n\n<ul>\n<li>Parameters are automatically passed into views from routes (annotations!):</li>\n</ul>\n\n<pre><code>    def echo_username(user_id: int):\n        return {'message': f'Welcome, user {user_id}!'}\n</code></pre>\n\n<ul>\n<li>Performance: Faster than sanic!</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://hackernoon.com/yes-python-is-slow-and-i-dont-care-13763980b5a1\"><strong>Yes, Python is Slow, and I Don\u2019t Care</strong></a></p>\n\n<ul>\n<li>Optimize for your most expensive resource. That\u2019s <strong>YOU</strong>, not the computer.</li>\n<li>Choose a language/framework/architecture that helps you develop quickly (such as Python). Do not choose technologies simply because they are fast.</li>\n<li>When you do have performance issues: find your bottleneck</li>\n<li>Your bottleneck is most likely not CPU or Python itself.</li>\n<li>If Python <strong>is</strong> your bottleneck (you\u2019ve already optimized algorithms/etc.), then move the hot-spot to Cython/C</li>\n<li>Go back to enjoying getting things done quickly</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://hackernoon.com/a-quick-introduction-hashing-c32d1dc91871\"><strong>A Quick Introduction: Hashing</strong></a></p>\n\n<ul>\n<li>Article by Gerald Nash</li>\n<li>Hashing is a method of determining the equivalence of two chunks of data. </li>\n<li>A cryptographic hash function is an irreversible function that generates a unique string for any set of data.</li>\n<li>Example</li>\n</ul>\n\n<pre><code>    import hashlib as hash\n    sha = hash.sha256()\n    # Insert the string we want to hash\n    sha.update('Hello World!')\n    # Print the hexadecimal format of the binary hash we just created\n    print(sha.hexdigest())\n    # 4d3cf15aa67c88742e63918825f3c80f203f2bd59f399c81be4705a095c9fa0e\n</code></pre>\n\n<ul>\n<li>Know when to choose \u201cweak\u201d hashes vs. strong ones</li>\n<li>Straight hashes are not enough for security (e.g. passwords). Use passlib and be done.</li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <a href=\"https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html\"><strong>Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding</strong></a></p>\n\n<ul>\n<li>gspread to access a google spreadsheet of guests and phone numbers</li>\n<li>SMS guests with twilio</li>\n<li>replies handled by a flask app</li>\n<li>gathered accept/decline/didn't reply statistics</li>\n<li>reminder texts</li>\n<li>food selections and replies and reminders, all handled by Python</li>\n</ul>\n\n<p><strong># 6 Michael:</strong> <a href=\"https://blog.njsnet.co/python-alexa\"><strong>python-alexa: A Python framework for Alexa Development</strong></a></p>\n\n<ul>\n<li>by Neil Stewart</li>\n<li>Ordered an amazon assistant.</li>\n<li>Before it arrived, I had challenged myself to develop something for it</li>\n<li>Project: VoiceOps, interact with an AWS account, such as telling me how many running and stopped instances there is or what RDS databases are in an account</li>\n<li>Wanted a framework that would make Alexa development super easy.</li>\n<li>Decided a new framework was needed: python-alexa</li>\n<li><a href=\"https://github.com/nmyster/python-alexa\">python-alexa on github</a></li>\n<li><a href=\"https://echosim.io/\">echo shim</a> for testing without hardware</li>\n</ul>\n\n<p><strong>Our news:</strong></p>\n\n<p><strong>Michael</strong>: Just added <a href=\"https://training.talkpython.fm/search\">full text search</a> (including within videos) to Talk Python courses.</p>\n\n<p><strong>Brian:</strong> <a href=\"http://testandcode.com/28\">Netflix chaos engineering interview on Test &amp; Code</a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This episode has been <strong>sponsored by Rollbar</strong>. Get a special offer via <a href=\"http://rollbar.com/pythonbytes\">http://rollbar.com/pythonbytes</a></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"https://pymotw.com/3/profile/\"><strong>profile and pstats \u2014 Performance Analysis</strong></a></p>\n\n<ul>\n<li>Doug Hellman is working on the Python 3 MOTW series that was so successful for Python 2.</li>\n<li>Recent edition is profile and pstats, for profiling parts of your code you may have concerns with and finding out where the slow bits are.</li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/tomchristie/apistar\"><strong>API Star by Tom Christie</strong></a></p>\n\n<ul>\n<li>A smart Web API framework, designed for Python 3.</li>\n<li>A few things to try right away:</li>\n</ul>\n\n<pre><code>    $ pip3 install apistar\n    $ apistar new --template minimal\n    $ apistar run\n    $ apistar test\n</code></pre>\n\n<ul>\n<li>API Star allows you to dynamically inject various information about the incoming request into your views using type annotation.\n<ul>\n<li>e.g. </li>\n</ul></li>\n</ul>\n\n<pre><code>    def show_query_params(query_params: http.QueryParams):\n        return {\n            'params': dict(query_params)\n        }\n</code></pre>\n\n<ul>\n<li>You can instead set the status code or headers by annotating the view as returning a Response</li>\n</ul>\n\n<pre><code>def create_project() -&gt; Response: ...\n</code></pre>\n\n<ul>\n<li>Parameters are automatically passed into views from routes (annotations!):</li>\n</ul>\n\n<pre><code>    def echo_username(user_id: int):\n        return {'message': f'Welcome, user {user_id}!'}\n</code></pre>\n\n<ul>\n<li>Performance: Faster than sanic!</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://hackernoon.com/yes-python-is-slow-and-i-dont-care-13763980b5a1\"><strong>Yes, Python is Slow, and I Don\u2019t Care</strong></a></p>\n\n<ul>\n<li>Optimize for your most expensive resource. That\u2019s <strong>YOU</strong>, not the computer.</li>\n<li>Choose a language/framework/architecture that helps you develop quickly (such as Python). Do not choose technologies simply because they are fast.</li>\n<li>When you do have performance issues: find your bottleneck</li>\n<li>Your bottleneck is most likely not CPU or Python itself.</li>\n<li>If Python <strong>is</strong> your bottleneck (you\u2019ve already optimized algorithms/etc.), then move the hot-spot to Cython/C</li>\n<li>Go back to enjoying getting things done quickly</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://hackernoon.com/a-quick-introduction-hashing-c32d1dc91871\"><strong>A Quick Introduction: Hashing</strong></a></p>\n\n<ul>\n<li>Article by Gerald Nash</li>\n<li>Hashing is a method of determining the equivalence of two chunks of data. </li>\n<li>A cryptographic hash function is an irreversible function that generates a unique string for any set of data.</li>\n<li>Example</li>\n</ul>\n\n<pre><code>    import hashlib as hash\n    sha = hash.sha256()\n    # Insert the string we want to hash\n    sha.update('Hello World!')\n    # Print the hexadecimal format of the binary hash we just created\n    print(sha.hexdigest())\n    # 4d3cf15aa67c88742e63918825f3c80f203f2bd59f399c81be4705a095c9fa0e\n</code></pre>\n\n<ul>\n<li>Know when to choose \u201cweak\u201d hashes vs. strong ones</li>\n<li>Straight hashes are not enough for security (e.g. passwords). Use passlib and be done.</li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <a href=\"https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html\"><strong>Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding</strong></a></p>\n\n<ul>\n<li>gspread to access a google spreadsheet of guests and phone numbers</li>\n<li>SMS guests with twilio</li>\n<li>replies handled by a flask app</li>\n<li>gathered accept/decline/didn't reply statistics</li>\n<li>reminder texts</li>\n<li>food selections and replies and reminders, all handled by Python</li>\n</ul>\n\n<p><strong># 6 Michael:</strong> <a href=\"https://blog.njsnet.co/python-alexa\"><strong>python-alexa: A Python framework for Alexa Development</strong></a></p>\n\n<ul>\n<li>by Neil Stewart</li>\n<li>Ordered an amazon assistant.</li>\n<li>Before it arrived, I had challenged myself to develop something for it</li>\n<li>Project: VoiceOps, interact with an AWS account, such as telling me how many running and stopped instances there is or what RDS databases are in an account</li>\n<li>Wanted a framework that would make Alexa development super easy.</li>\n<li>Decided a new framework was needed: python-alexa</li>\n<li><a href=\"https://github.com/nmyster/python-alexa\">python-alexa on github</a></li>\n<li><a href=\"https://echosim.io/\">echo shim</a> for testing without hardware</li>\n</ul>\n\n<p><strong>Our news:</strong></p>\n\n<p><strong>Michael</strong>: Just added <a href=\"https://training.talkpython.fm/search\">full text search</a> (including within videos) to Talk Python courses.</p>\n\n<p><strong>Brian:</strong> <a href=\"http://testandcode.com/28\">Netflix chaos engineering interview on Test &amp; Code</a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Thu, 13 Apr 2017 00:00:00 -0800", "published_parsed": [2017, 4, 13, 8, 0, 0, 3, 103, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python has a new star framework for RESTful APIs", "itunes_episode": "21", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:20:57"}}, "#20 Finding similar but not identical images in 128 bits via Python": {"info": {"title": "#20 Finding similar but not identical images in 128 bits via Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#20 Finding similar but not identical images in 128 bits via Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/20/finding-similar-but-not-identical-images-in-128-bits-via-python"}, {"length": "22990398", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/20/finding-similar-but-not-identical-images-in-128-bits-via-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/20/finding-similar-but-not-identical-images-in-128-bits-via-python", "id": "https://pythonbytes.fm/episodes/download/20/finding-similar-but-not-identical-images-in-128-bits-via-python.mp3", "guidislink": false, "summary": "<p><strong>Sponsored by Rollbar, thank you! <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a></strong></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"http://tech.jetsetter.com/2017/03/21/duplicate-image-detection/\"><strong>Duplicate image detection with perceptual hashing in Python</strong></a></p>\n\n<ul>\n<li>Ben Hoyt</li>\n<li>From <a href=\"https://www.jetsetter.com/\">Jetsetter.com</a>, Invitation-Only Travel Community</li>\n<li>We use a perceptual image hash called dHash (\u201cdifference hash\u201d), which was developed by Neal Krawetz in his work on photo forensics. It\u2019s a very simple but surprisingly effective algorithm that involves the following steps (to produce a 128-bit hash value)\n<ul>\n<li>Convert the image to grayscale</li>\n<li>Downsize to a 9x9 square of gray values (or 17x17 for a larger, 512-bit hash)</li>\n<li>Calculate the \u201crow hash\u201d: for each row, move from left to right, and output a 1 bit if the next gray value is greater than or equal to the previous one, or a 0 bit if it\u2019s less (each 9-pixel row produces 8 bits of output)</li>\n<li>Calculate the \u201ccolumn hash\u201d: same as above, but for each column, move top to bottom</li>\n<li>Concatenate the two 64-bit values together to get the final 128-bit hash</li>\n</ul></li>\n<li>Fast: Python is not very fast at bit twiddling, but all the hard work of converting to grayscale and downsizing is done by a C library: ImageMagick+wand or PIL.</li>\n<li>Available via github: <a href=\"https://github.com/Jetsetter/pybktree\">https://github.com/Jetsetter/pybktree</a></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://opensource.google.com/projects/search?q=python\"><strong>Google Open Source/Python</strong></a></p>\n\n<ul>\n<li>subprocess32: A reliable subprocess module for Python 2</li>\n<li>Grumpy: A Python to Go transcompiler and runtime</li>\n<li>Python Fire: Automatically turns any Python object or module into a command line interface (CLI)</li>\n<li>Python Client for Google Maps Services: Python client library for Google Maps API Web services</li>\n<li>Hyou: Pythonic Interface to manipulate Google Spreadsheet</li>\n<li>oauth2l: A simple CLI tool to get an OAuth token</li>\n<li>mock_maps_apis: Small AppEngine application that can mock some of the Google Maps APIs</li>\n<li>TensorFlow: TensorFlow is a fast, flexible, and scalable open source machine learning library </li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"http://machinelearningmastery.com/handle-missing-data-python/\"><strong>How to Handle Missing Data with Python</strong></a></p>\n\n<ul>\n<li>Jason Brownlee</li>\n<li>Real-world data often has missing values.</li>\n<li>Data can have missing values for a number of reasons such as observations that were not recorded and data corruption.</li>\n<li>Handling missing data is important as many machine learning algorithms do not support data with missing values.</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"http://www.hug.rest/\"><strong>hug REST framework</strong></a></p>\n\n<ul>\n<li>Drastically simplify API development over multiple interfaces</li>\n<li>With hug, design and develop your API once, then expose it however your clients need to consume it (locally, over HTTP, or through the command line)</li>\n<li>hug is the fastest and most modern way to create APIs on <strong>Python3</strong></li>\n<li>hug has been built from the ground up with performance in mind.\n<ul>\n<li>It is built to consume resources only when necessary</li>\n<li>compiled with Cython to achieve amazing performance</li>\n</ul></li>\n<li>Built in version management</li>\n<li>Automatic documentation</li>\n<li>Annotation powered validation</li>\n<li>Write once. Use everywhere (CLI, Python package, Web API)</li>\n</ul>\n\n<p><strong>#5 Brian</strong> <strong>CLI with Click</strong></p>\n\n<ul>\n<li>I needed a cli interface that apparently fell into the \u201ccomplex\u201d category, because of subcommands, go figure. argparse ticked me off, so I tried click. It\u2019s a joy to work with.</li>\n<li><a href=\"http://click.pocoo.org/\">http://click.pocoo.org/</a></li>\n<li><a href=\"https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/\">https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a> - Just enough click tutorial to do exactly what I wanted. From 2015, realpython blog. (But argparse tutorial is a bit broken. in 3.5/3.6 \ud83d\ude1e )</li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\"><strong>Python's Instance, Class, and Static Methods Demystified</strong></a></p>\n\n<ul>\n<li>From <a href=\"https://realpython.com\">realpython.com</a>, guest post from Dan Bader</li>\n<li>demystify what\u2019s behind class methods, static methods, and regular instance methods</li>\n<li>Python 3 by default</li>\n</ul>\n\n<pre><code>    class MyClass:\n        def method(self):\n            return 'instance method called', self\n\n        @classmethod\n        def classmethod(cls):\n            return 'class method called', cls\n\n        @staticmethod\n        def staticmethod():\n            return 'static method called'\n</code></pre>\n\n<ul>\n<li>Instances is clear but static and class are not so much\n<ul>\n<li>static and class methods are also available on instances</li>\n<li>choice between class vs static method (do you want inheritance?)</li>\n<li>instance methods can also access the class itself through the self.__class__ attribute</li>\n</ul></li>\n</ul>\n\n<p><strong>Follow ups</strong></p>\n\n<p>David Bieber from Google and Python Fire sent us this note: The program noted that Fire has one \"heavy\" dependency, IPython. Just wanted to chime in with this: we have a <a href=\"https://github.com/google/python-fire/issues/7#issuecomment-284266940\">game plan to remove IPython as a required dependency</a>, but we're not there yet. (Contributions are welcome!)</p>\n\n<ul>\n<li>pdir2 now supports color, <a href=\"https://github.com/laike9m/pdir2/wiki/User-Configuration\">https://github.com/laike9m/pdir2/wiki/User-Configuration</a>. With the example given, I\u2019ve added a .pdir2config file and changed doc-color to magenta, and I can see the doc lines in both a white and black terminal.</li>\n</ul>\n\n<p><strong>News from us</strong></p>\n\n<p><strong>Brian</strong> </p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest book</a> page has been spotted in the wild by Jakob Jarosz, <a href=\"https://twitter.com/qba73/status/848189279587229696\">https://twitter.com/qba73/status/848189279587229696</a>. That was unexpected and cool to see.</li>\n</ul>\n\n<p><strong>Michael</strong></p>\n\n<ul>\n<li>Launched / launching two new courses at Talk Python Training\n<ul>\n<li><a href=\"https://training.talkpython.fm/courses/explore_python_dependencies_course/managing-python-dependencies-with-pip-and-virtual-environments\">Managing Python Dependencies with pip and Virtual Environments</a></li>\n<li><a href=\"https://training.talkpython.fm/courses/explore_cookiecutter_course/using-and-mastering-cookiecutter-templates-for-project-creation\">Using and Mastering Cookiecutter</a></li>\n</ul></li>\n<li>Course bundles now available: <a href=\"https://training.talkpython.fm/courses/all\">https://training.talkpython.fm/courses/all</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Sponsored by Rollbar, thank you! <a href=\"http://rollbar.com/pythonbytes\">rollbar.com/pythonbytes</a></strong></p>\n\n<p><strong>#1 Brian:</strong> <a href=\"http://tech.jetsetter.com/2017/03/21/duplicate-image-detection/\"><strong>Duplicate image detection with perceptual hashing in Python</strong></a></p>\n\n<ul>\n<li>Ben Hoyt</li>\n<li>From <a href=\"https://www.jetsetter.com/\">Jetsetter.com</a>, Invitation-Only Travel Community</li>\n<li>We use a perceptual image hash called dHash (\u201cdifference hash\u201d), which was developed by Neal Krawetz in his work on photo forensics. It\u2019s a very simple but surprisingly effective algorithm that involves the following steps (to produce a 128-bit hash value)\n<ul>\n<li>Convert the image to grayscale</li>\n<li>Downsize to a 9x9 square of gray values (or 17x17 for a larger, 512-bit hash)</li>\n<li>Calculate the \u201crow hash\u201d: for each row, move from left to right, and output a 1 bit if the next gray value is greater than or equal to the previous one, or a 0 bit if it\u2019s less (each 9-pixel row produces 8 bits of output)</li>\n<li>Calculate the \u201ccolumn hash\u201d: same as above, but for each column, move top to bottom</li>\n<li>Concatenate the two 64-bit values together to get the final 128-bit hash</li>\n</ul></li>\n<li>Fast: Python is not very fast at bit twiddling, but all the hard work of converting to grayscale and downsizing is done by a C library: ImageMagick+wand or PIL.</li>\n<li>Available via github: <a href=\"https://github.com/Jetsetter/pybktree\">https://github.com/Jetsetter/pybktree</a></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://opensource.google.com/projects/search?q=python\"><strong>Google Open Source/Python</strong></a></p>\n\n<ul>\n<li>subprocess32: A reliable subprocess module for Python 2</li>\n<li>Grumpy: A Python to Go transcompiler and runtime</li>\n<li>Python Fire: Automatically turns any Python object or module into a command line interface (CLI)</li>\n<li>Python Client for Google Maps Services: Python client library for Google Maps API Web services</li>\n<li>Hyou: Pythonic Interface to manipulate Google Spreadsheet</li>\n<li>oauth2l: A simple CLI tool to get an OAuth token</li>\n<li>mock_maps_apis: Small AppEngine application that can mock some of the Google Maps APIs</li>\n<li>TensorFlow: TensorFlow is a fast, flexible, and scalable open source machine learning library </li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"http://machinelearningmastery.com/handle-missing-data-python/\"><strong>How to Handle Missing Data with Python</strong></a></p>\n\n<ul>\n<li>Jason Brownlee</li>\n<li>Real-world data often has missing values.</li>\n<li>Data can have missing values for a number of reasons such as observations that were not recorded and data corruption.</li>\n<li>Handling missing data is important as many machine learning algorithms do not support data with missing values.</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"http://www.hug.rest/\"><strong>hug REST framework</strong></a></p>\n\n<ul>\n<li>Drastically simplify API development over multiple interfaces</li>\n<li>With hug, design and develop your API once, then expose it however your clients need to consume it (locally, over HTTP, or through the command line)</li>\n<li>hug is the fastest and most modern way to create APIs on <strong>Python3</strong></li>\n<li>hug has been built from the ground up with performance in mind.\n<ul>\n<li>It is built to consume resources only when necessary</li>\n<li>compiled with Cython to achieve amazing performance</li>\n</ul></li>\n<li>Built in version management</li>\n<li>Automatic documentation</li>\n<li>Annotation powered validation</li>\n<li>Write once. Use everywhere (CLI, Python package, Web API)</li>\n</ul>\n\n<p><strong>#5 Brian</strong> <strong>CLI with Click</strong></p>\n\n<ul>\n<li>I needed a cli interface that apparently fell into the \u201ccomplex\u201d category, because of subcommands, go figure. argparse ticked me off, so I tried click. It\u2019s a joy to work with.</li>\n<li><a href=\"http://click.pocoo.org/\">http://click.pocoo.org/</a></li>\n<li><a href=\"https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/\">https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/</a> - Just enough click tutorial to do exactly what I wanted. From 2015, realpython blog. (But argparse tutorial is a bit broken. in 3.5/3.6 \ud83d\ude1e )</li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://realpython.com/blog/python/instance-class-and-static-methods-demystified/\"><strong>Python's Instance, Class, and Static Methods Demystified</strong></a></p>\n\n<ul>\n<li>From <a href=\"https://realpython.com\">realpython.com</a>, guest post from Dan Bader</li>\n<li>demystify what\u2019s behind class methods, static methods, and regular instance methods</li>\n<li>Python 3 by default</li>\n</ul>\n\n<pre><code>    class MyClass:\n        def method(self):\n            return 'instance method called', self\n\n        @classmethod\n        def classmethod(cls):\n            return 'class method called', cls\n\n        @staticmethod\n        def staticmethod():\n            return 'static method called'\n</code></pre>\n\n<ul>\n<li>Instances is clear but static and class are not so much\n<ul>\n<li>static and class methods are also available on instances</li>\n<li>choice between class vs static method (do you want inheritance?)</li>\n<li>instance methods can also access the class itself through the self.__class__ attribute</li>\n</ul></li>\n</ul>\n\n<p><strong>Follow ups</strong></p>\n\n<p>David Bieber from Google and Python Fire sent us this note: The program noted that Fire has one \"heavy\" dependency, IPython. Just wanted to chime in with this: we have a <a href=\"https://github.com/google/python-fire/issues/7#issuecomment-284266940\">game plan to remove IPython as a required dependency</a>, but we're not there yet. (Contributions are welcome!)</p>\n\n<ul>\n<li>pdir2 now supports color, <a href=\"https://github.com/laike9m/pdir2/wiki/User-Configuration\">https://github.com/laike9m/pdir2/wiki/User-Configuration</a>. With the example given, I\u2019ve added a .pdir2config file and changed doc-color to magenta, and I can see the doc lines in both a white and black terminal.</li>\n</ul>\n\n<p><strong>News from us</strong></p>\n\n<p><strong>Brian</strong> </p>\n\n<ul>\n<li><a href=\"https://pragprog.com/book/bopytest/python-testing-with-pytest\">Python Testing with pytest book</a> page has been spotted in the wild by Jakob Jarosz, <a href=\"https://twitter.com/qba73/status/848189279587229696\">https://twitter.com/qba73/status/848189279587229696</a>. That was unexpected and cool to see.</li>\n</ul>\n\n<p><strong>Michael</strong></p>\n\n<ul>\n<li>Launched / launching two new courses at Talk Python Training\n<ul>\n<li><a href=\"https://training.talkpython.fm/courses/explore_python_dependencies_course/managing-python-dependencies-with-pip-and-virtual-environments\">Managing Python Dependencies with pip and Virtual Environments</a></li>\n<li><a href=\"https://training.talkpython.fm/courses/explore_cookiecutter_course/using-and-mastering-cookiecutter-templates-for-project-creation\">Using and Mastering Cookiecutter</a></li>\n</ul></li>\n<li>Course bundles now available: <a href=\"https://training.talkpython.fm/courses/all\">https://training.talkpython.fm/courses/all</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 05 Apr 2017 00:00:00 -0800", "published_parsed": [2017, 4, 5, 8, 0, 0, 2, 95, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Finding similar but not identical images in 128 bits via Python", "itunes_episode": "20", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:23:48"}}, "#19 Put your Python dictionaries in a box and apparently Python is really wanted": {"info": {"title": "#19 Put your Python dictionaries in a box and apparently Python is really wanted", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#19 Put your Python dictionaries in a box and apparently Python is really wanted"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/19/put-your-python-dictionaries-in-a-box-and-apparently-python-is-really-wanted"}, {"length": "18969213", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/19/put-your-python-dictionaries-in-a-box-and-apparently-python-is-really-wanted.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/19/put-your-python-dictionaries-in-a-box-and-apparently-python-is-really-wanted", "id": "https://pythonbytes.fm/episodes/download/19/put-your-python-dictionaries-in-a-box-and-apparently-python-is-really-wanted.mp3", "guidislink": false, "summary": "<p><strong>#1 Brian: Better Exceptions and Python 3</strong></p>\n\n<ul>\n<li>reddit <a href=\"https://www.reddit.com/r/Python/comments/60scld/i_made_python_exceptions_a_little_better/\">https://www.reddit.com/r/Python/comments/60scld/i_made_python_exceptions_a_little_better/</a></li>\n<li>Qix (Josh), author of better_exceptions, <a href=\"https://github.com/Qix-/better-exceptions\">https://github.com/Qix-/better-exceptions</a></li>\n<li>paradoxxxzero (Josh &amp; Florian), author of <a href=\"https://github.com/Kozea/wdb\">https://github.com/Kozea/wdb</a></li>\n<li>also added a startup hook for better_exceptions, <a href=\"https://github.com/paradoxxxzero/better-exceptions-hook\">https://github.com/paradoxxxzero/better-exceptions-hook</a></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <strong><a href=\"https://stackoverflow.com/insights/survey/2017/\">Stack Overflow 2017 Developer Survey Results</a></strong></p>\n\n<ul>\n<li>Python is #5 total usage</li>\n<li>Python is #1 most wanted</li>\n<li>Many excellent graphs, be sure to scroll through</li>\n</ul>\n\n<p><strong>#3 Brian: <a href=\"http://www.codecalamity.com/?p=307\">Box : Python dictionaries with recursive dot notation access</a></strong></p>\n\n<p><strong>#4 Michael: <a href=\"https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-1\">Python 3.6.1 is released</a></strong> \n- Many small improvements and bug fixes. </p>\n\n<p><strong>#5 Brian: <a href=\"http://www.learndatasci.com/data-science-statistics-using-python/\">Essential Statistics for Data Science</a></strong></p>\n\n<p><strong>#6 Michael:  <a href=\"http://docs.hylang.org/en/latest/\">Hy: A wonderful dialect of Lisp that's embedded in Python</a></strong></p>\n\n<ul>\n<li>Since Hy transforms its Lisp code into the Python Abstract Syntax Tree, you have the whole beautiful world of Python at your fingertips, in Lisp form!</li>\n<li>Listener recommended: <a href=\"http://docs.hylang.org/en/latest/\">http://docs.hylang.org/en/latest/</a></li>\n<li>You must try: <a href=\"https://try-hy.appspot.com/\">https://try-hy.appspot.com/</a></li>\n<li>This is pretty cool because it means Hy is several things:\n<ul>\n<li>A Lisp that feels very Pythonic</li>\n<li>For Lispers, a great way to use Lisp\u2019s crazy powers but in the wide world of Python\u2019s libraries (why yes, you now can write a Django application in Lisp!)</li>\n<li>For Pythonistas, a great way to start exploring Lisp, from the comfort of Python!</li>\n<li>For everyone: a pleasant language that has a lot of neat ideas!</li>\n</ul></li>\n</ul>\n\n<p>Follow up: <a href=\"https://github.com/laike9m/pdir2/commit/124d3b7c09b4fbb92143bc6ced712542430f756e\">Removal of beer from readme, pdir2 now looks great at default pypi</a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>#1 Brian: Better Exceptions and Python 3</strong></p>\n\n<ul>\n<li>reddit <a href=\"https://www.reddit.com/r/Python/comments/60scld/i_made_python_exceptions_a_little_better/\">https://www.reddit.com/r/Python/comments/60scld/i_made_python_exceptions_a_little_better/</a></li>\n<li>Qix (Josh), author of better_exceptions, <a href=\"https://github.com/Qix-/better-exceptions\">https://github.com/Qix-/better-exceptions</a></li>\n<li>paradoxxxzero (Josh &amp; Florian), author of <a href=\"https://github.com/Kozea/wdb\">https://github.com/Kozea/wdb</a></li>\n<li>also added a startup hook for better_exceptions, <a href=\"https://github.com/paradoxxxzero/better-exceptions-hook\">https://github.com/paradoxxxzero/better-exceptions-hook</a></li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <strong><a href=\"https://stackoverflow.com/insights/survey/2017/\">Stack Overflow 2017 Developer Survey Results</a></strong></p>\n\n<ul>\n<li>Python is #5 total usage</li>\n<li>Python is #1 most wanted</li>\n<li>Many excellent graphs, be sure to scroll through</li>\n</ul>\n\n<p><strong>#3 Brian: <a href=\"http://www.codecalamity.com/?p=307\">Box : Python dictionaries with recursive dot notation access</a></strong></p>\n\n<p><strong>#4 Michael: <a href=\"https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-1\">Python 3.6.1 is released</a></strong> \n- Many small improvements and bug fixes. </p>\n\n<p><strong>#5 Brian: <a href=\"http://www.learndatasci.com/data-science-statistics-using-python/\">Essential Statistics for Data Science</a></strong></p>\n\n<p><strong>#6 Michael:  <a href=\"http://docs.hylang.org/en/latest/\">Hy: A wonderful dialect of Lisp that's embedded in Python</a></strong></p>\n\n<ul>\n<li>Since Hy transforms its Lisp code into the Python Abstract Syntax Tree, you have the whole beautiful world of Python at your fingertips, in Lisp form!</li>\n<li>Listener recommended: <a href=\"http://docs.hylang.org/en/latest/\">http://docs.hylang.org/en/latest/</a></li>\n<li>You must try: <a href=\"https://try-hy.appspot.com/\">https://try-hy.appspot.com/</a></li>\n<li>This is pretty cool because it means Hy is several things:\n<ul>\n<li>A Lisp that feels very Pythonic</li>\n<li>For Lispers, a great way to use Lisp\u2019s crazy powers but in the wide world of Python\u2019s libraries (why yes, you now can write a Django application in Lisp!)</li>\n<li>For Pythonistas, a great way to start exploring Lisp, from the comfort of Python!</li>\n<li>For everyone: a pleasant language that has a lot of neat ideas!</li>\n</ul></li>\n</ul>\n\n<p>Follow up: <a href=\"https://github.com/laike9m/pdir2/commit/124d3b7c09b4fbb92143bc6ced712542430f756e\">Removal of beer from readme, pdir2 now looks great at default pypi</a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 27 Mar 2017 00:00:00 -0800", "published_parsed": [2017, 3, 27, 8, 0, 0, 0, 86, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Put your Python dictionaries in a box and apparently Python is really wanted", "itunes_episode": "19", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}], "itunes_duration": "00:19:37"}}, "#18 Python 3 has some amazing types and you can now constructively insult your shell!": {"info": {"title": "#18 Python 3 has some amazing types and you can now constructively insult your shell!", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#18 Python 3 has some amazing types and you can now constructively insult your shell!"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/18/python-3-has-some-amazing-types-and-you-can-now-constructively-insult-your-shell"}, {"length": "17848246", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/18/python-3-has-some-amazing-types-and-you-can-now-constructively-insult-your-shell.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/18/python-3-has-some-amazing-types-and-you-can-now-constructively-insult-your-shell", "id": "https://pythonbytes.fm/episodes/download/18/python-3-has-some-amazing-types-and-you-can-now-constructively-insult-your-shell.mp3", "guidislink": false, "summary": "<p><strong>#1 Brian: <a href=\"https://github.com/laike9m/pdir2\">pdir2</a></strong></p>\n\n<ul>\n<li>Nice use of animated gif to showcase what it does.</li>\n<li>It\u2019s a replacement for <code>dir()</code> to use interactively.</li>\n<li><code>pip install pdir2</code> , but <code>import pdir</code> .</li>\n<li><code>pdir(something)</code> gives you all that <code>dir()</code> does, but splits things into categories like exceptions, functions, attributes, \u2026 </li>\n<li>each item on one line, and includes the first line of the docstring for the item.</li>\n<li>Also, uses colors nicely. (Except I need to run it in a shell with non-black background on my mac or I can\u2019t see the docstring output. )</li>\n<li>Hugely useful if you use <code>dir()</code> interactively. </li>\n<li>\ud83d\ude1e Readme is in markdown, pypi still can\u2019t handle that well. Maybe a listener can do a pull request on it to spiff up the pypi page: <a href=\"https://pypi.python.org/pypi/pdir2\">https://pypi.python.org/pypi/pdir2</a></li>\n<li>Consider pairing this with <a href=\"https://github.com/jonathanslenders/ptpython\"><strong>ptpython</strong></a>  </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12\"><strong>How to recover lost Python source code if it's still resident in-memory</strong></a></p>\n\n<ul>\n<li>Ooops: I screwed up using git (\"git checkout --\" on the wrong file) and managed to delete the code I had just written, but it was still running in memory.</li>\n<li>Uses\n<ul>\n<li><a href=\"http://pyrasite.com/\">http://pyrasite.com/</a> Tools for injecting code into running Python processes</li>\n<li><a href=\"https://github.com/rocky/python-uncompyle6/\">https://github.com/rocky/python-uncompyle6/</a> A Python cross-version decompiler</li>\n</ul></li>\n<li>Main take-away: Really cool to attach <strong>pyrasite</strong> and explore a running Python process for many reasons.</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://github.com/topper-123/Articles/blob/master/New-interesting-data-types-in-Python3.rst\"><strong>New Interesting Data Types in Python 3</strong></a></p>\n\n<ul>\n<li><code>types.MappingProxyType</code> - acts like a dictionary, but it\u2019s read only. Convenient for exposing a mutable data structure through an API and making it less convenient for the client code to modify things they aren\u2019t supposed to.</li>\n<li><code>types.SimpleNamespace</code>- kind of a general purpose class with attributes defined by the constructor parameters you pass in. May be useful in places where you would use <code>collections.namedtuple</code> . </li>\n<li><code>typ``ing.NamedTuple</code> - You define a class derived from <code>NamedTuple</code>, and define attributes with types and optionally a default value. Constructor automatically assigns the attributes in order.</li>\n<li>These types help you to create quick small classes/types allow concise and readable code.</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/gleitz/howdoi\"><strong>howdoi</strong></a></p>\n\n<ul>\n<li>Instant coding and shell answers via the command line </li>\n<li>Examples\n<ul>\n<li>howdoi print stack trace python</li>\n<li>howdoi connect sqlalchemy</li>\n<li>howdoi python save dict</li>\n<li>howdoi debug python</li>\n<li>howdoi install ohmyzsh</li>\n<li>howdoi change path macos</li>\n</ul></li>\n<li>Notable related \n<ul>\n<li><a href=\"https://github.com/nvbn/thefuck\">https://github.com/nvbn/thefuck</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian: A python project from a listener of the show converts to asyncio and speeds up by 150x</strong></p>\n\n<ul>\n<li>Project is a Python interface to a commercial cloud based CRM called Emarsys. But the specifics are kinda beside the point.</li>\n<li>Comment from episode 17: <a href=\"http://disq.us/p/1h43lc0\">http://disq.us/p/1h43lc0</a> From Diego Mora Cespedes</li>\n</ul>\n\n<p>_Another awesome episode, thanks Michael and Brian!_</p>\n\n<p>_About asyncio being awesome, I had my own experience. I had to send information about hundreds of thousands of users to a CRM through their public API daily. Without asyncio, it would have taken 50 hours daily, which we all know is just not possible! After developing a sync (using requests) and async (using aiohttp) client for their API, I managed to send the information about the users to the CRM asynchronously, and it takes... ... ... wait for it... ... ... 20 minutes!_</p>\n\n<p>_So that's 150 times faster than without asyncio!_</p>\n\n<p>_Anyway, if you wanna take a look at the client I open sourced, here is the link: <a href=\"https://github.com/transcovo/pymarsys\">https://github.com/transcovo/pymarsys</a>_</p>\n\n<p>_Oh yeah, fun fact: the first time I implemented the async functionality, I made too many API calls at the same time, my mac crashed and I think I DDoSed the CRM. Now I use semaphores, which allow you to limit the number of tasks you launch at the same time. So much Python awesomeness!_</p>\n\n<ul>\n<li>However, I can\u2019t find where in this code he uses semaphores, so here\u2019s an example that does use semaphores to limit how many connections to make at a time.\n<ul>\n<li><a href=\"https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html\">Making 1 million requests with python-aiohttp</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://github.com/mikeckennedy/cookiecutter-pyramid-talk-python-starter\"><strong>cookiecutter-pyramid-talk-python-starter</strong></a></p>\n\n<p>An opinionated Cookiecutter template for creating Pyramid web applications starting way further down the development chain. This cookiecutter template will create a new Pyramid web application with email, sqlalchemy, rollbar, and way more integrated.</p>\n\n<ul>\n<li><strong>Factored and organized</strong>: This code was generalized out of a large, professional web application</li>\n<li><strong>Master layout template</strong>: Comes pre-configured with a master layout template. Navigation, CSS, JS, etc is factored into a single template file and is reused across all views</li>\n<li><strong>Chameleon language</strong>: This template uses the chameleon template language (the cleanest template language for Python - we did say opinionated right?)</li>\n<li><strong>Pyramid Handlers</strong>: Code is factored into handler / controller classes. You have the full power of object-oriented programming immediately available</li>\n<li><strong>Secure user management</strong>: The app comes with full user management. Users can register, log in and out, and reset passwords. We use the passlib package for secure user storage using best practices SQLAlchemy data access: Comes with SQLAlchemy ORM preconfigured using sqlite</li>\n<li><strong>Bootstrap and modern design</strong>: As you can see from the screenshot below, the app comes with bootstrap and fontawesome. It uses a free, open-source theme and images used under CC-Attribution.</li>\n<li><strong>Logging with LogBook</strong>: A logging system for Python that replaces the standard library\u2019s logging module. It was designed with both complex and simple applications in mind and the idea to make logging fun</li>\n<li><strong>Runtime error monitoring with Rollbar</strong>: Rollbar adds runtime notifications and detailed error tracking and it comes pre-configured in this template</li>\n<li><strong>Mailing list integration</strong>: Comes with Mailchimp integration. Just enter your API key and list ID to start collecting and managing users for your mailing list</li>\n<li><strong>Outbound email with templates</strong>: The app has a set of static HTML files with placeholders that are loaded by the outbound email system and populated with user data</li>\n<li><strong>Bower static resource management</strong>: Most templates are based on out-of-date files (css templates, js, etc.). This template is uses bower for it's static files. This means a single CLI command will get you the latest everything.</li>\n<li><strong>Fast pages that are never stale</strong>: Every static resource is referenced with our own cache busting system. This means you can use extremely aggressive caching for performance on static files yet they immediately invalidate upon changes</li>\n<li><strong>Comes with an entire online course</strong>: This template is built from the final project in Python for Entrepreneurs, a 20 hour course on building professional web apps in Python and Pyramid from Talk Python Training</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>#1 Brian: <a href=\"https://github.com/laike9m/pdir2\">pdir2</a></strong></p>\n\n<ul>\n<li>Nice use of animated gif to showcase what it does.</li>\n<li>It\u2019s a replacement for <code>dir()</code> to use interactively.</li>\n<li><code>pip install pdir2</code> , but <code>import pdir</code> .</li>\n<li><code>pdir(something)</code> gives you all that <code>dir()</code> does, but splits things into categories like exceptions, functions, attributes, \u2026 </li>\n<li>each item on one line, and includes the first line of the docstring for the item.</li>\n<li>Also, uses colors nicely. (Except I need to run it in a shell with non-black background on my mac or I can\u2019t see the docstring output. )</li>\n<li>Hugely useful if you use <code>dir()</code> interactively. </li>\n<li>\ud83d\ude1e Readme is in markdown, pypi still can\u2019t handle that well. Maybe a listener can do a pull request on it to spiff up the pypi page: <a href=\"https://pypi.python.org/pypi/pdir2\">https://pypi.python.org/pypi/pdir2</a></li>\n<li>Consider pairing this with <a href=\"https://github.com/jonathanslenders/ptpython\"><strong>ptpython</strong></a>  </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://gist.github.com/simonw/8aa492e59265c1a021f5c5618f9e6b12\"><strong>How to recover lost Python source code if it's still resident in-memory</strong></a></p>\n\n<ul>\n<li>Ooops: I screwed up using git (\"git checkout --\" on the wrong file) and managed to delete the code I had just written, but it was still running in memory.</li>\n<li>Uses\n<ul>\n<li><a href=\"http://pyrasite.com/\">http://pyrasite.com/</a> Tools for injecting code into running Python processes</li>\n<li><a href=\"https://github.com/rocky/python-uncompyle6/\">https://github.com/rocky/python-uncompyle6/</a> A Python cross-version decompiler</li>\n</ul></li>\n<li>Main take-away: Really cool to attach <strong>pyrasite</strong> and explore a running Python process for many reasons.</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://github.com/topper-123/Articles/blob/master/New-interesting-data-types-in-Python3.rst\"><strong>New Interesting Data Types in Python 3</strong></a></p>\n\n<ul>\n<li><code>types.MappingProxyType</code> - acts like a dictionary, but it\u2019s read only. Convenient for exposing a mutable data structure through an API and making it less convenient for the client code to modify things they aren\u2019t supposed to.</li>\n<li><code>types.SimpleNamespace</code>- kind of a general purpose class with attributes defined by the constructor parameters you pass in. May be useful in places where you would use <code>collections.namedtuple</code> . </li>\n<li><code>typ``ing.NamedTuple</code> - You define a class derived from <code>NamedTuple</code>, and define attributes with types and optionally a default value. Constructor automatically assigns the attributes in order.</li>\n<li>These types help you to create quick small classes/types allow concise and readable code.</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/gleitz/howdoi\"><strong>howdoi</strong></a></p>\n\n<ul>\n<li>Instant coding and shell answers via the command line </li>\n<li>Examples\n<ul>\n<li>howdoi print stack trace python</li>\n<li>howdoi connect sqlalchemy</li>\n<li>howdoi python save dict</li>\n<li>howdoi debug python</li>\n<li>howdoi install ohmyzsh</li>\n<li>howdoi change path macos</li>\n</ul></li>\n<li>Notable related \n<ul>\n<li><a href=\"https://github.com/nvbn/thefuck\">https://github.com/nvbn/thefuck</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian: A python project from a listener of the show converts to asyncio and speeds up by 150x</strong></p>\n\n<ul>\n<li>Project is a Python interface to a commercial cloud based CRM called Emarsys. But the specifics are kinda beside the point.</li>\n<li>Comment from episode 17: <a href=\"http://disq.us/p/1h43lc0\">http://disq.us/p/1h43lc0</a> From Diego Mora Cespedes</li>\n</ul>\n\n<p>_Another awesome episode, thanks Michael and Brian!_</p>\n\n<p>_About asyncio being awesome, I had my own experience. I had to send information about hundreds of thousands of users to a CRM through their public API daily. Without asyncio, it would have taken 50 hours daily, which we all know is just not possible! After developing a sync (using requests) and async (using aiohttp) client for their API, I managed to send the information about the users to the CRM asynchronously, and it takes... ... ... wait for it... ... ... 20 minutes!_</p>\n\n<p>_So that's 150 times faster than without asyncio!_</p>\n\n<p>_Anyway, if you wanna take a look at the client I open sourced, here is the link: <a href=\"https://github.com/transcovo/pymarsys\">https://github.com/transcovo/pymarsys</a>_</p>\n\n<p>_Oh yeah, fun fact: the first time I implemented the async functionality, I made too many API calls at the same time, my mac crashed and I think I DDoSed the CRM. Now I use semaphores, which allow you to limit the number of tasks you launch at the same time. So much Python awesomeness!_</p>\n\n<ul>\n<li>However, I can\u2019t find where in this code he uses semaphores, so here\u2019s an example that does use semaphores to limit how many connections to make at a time.\n<ul>\n<li><a href=\"https://pawelmhm.github.io/asyncio/python/aiohttp/2016/04/22/asyncio-aiohttp.html\">Making 1 million requests with python-aiohttp</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://github.com/mikeckennedy/cookiecutter-pyramid-talk-python-starter\"><strong>cookiecutter-pyramid-talk-python-starter</strong></a></p>\n\n<p>An opinionated Cookiecutter template for creating Pyramid web applications starting way further down the development chain. This cookiecutter template will create a new Pyramid web application with email, sqlalchemy, rollbar, and way more integrated.</p>\n\n<ul>\n<li><strong>Factored and organized</strong>: This code was generalized out of a large, professional web application</li>\n<li><strong>Master layout template</strong>: Comes pre-configured with a master layout template. Navigation, CSS, JS, etc is factored into a single template file and is reused across all views</li>\n<li><strong>Chameleon language</strong>: This template uses the chameleon template language (the cleanest template language for Python - we did say opinionated right?)</li>\n<li><strong>Pyramid Handlers</strong>: Code is factored into handler / controller classes. You have the full power of object-oriented programming immediately available</li>\n<li><strong>Secure user management</strong>: The app comes with full user management. Users can register, log in and out, and reset passwords. We use the passlib package for secure user storage using best practices SQLAlchemy data access: Comes with SQLAlchemy ORM preconfigured using sqlite</li>\n<li><strong>Bootstrap and modern design</strong>: As you can see from the screenshot below, the app comes with bootstrap and fontawesome. It uses a free, open-source theme and images used under CC-Attribution.</li>\n<li><strong>Logging with LogBook</strong>: A logging system for Python that replaces the standard library\u2019s logging module. It was designed with both complex and simple applications in mind and the idea to make logging fun</li>\n<li><strong>Runtime error monitoring with Rollbar</strong>: Rollbar adds runtime notifications and detailed error tracking and it comes pre-configured in this template</li>\n<li><strong>Mailing list integration</strong>: Comes with Mailchimp integration. Just enter your API key and list ID to start collecting and managing users for your mailing list</li>\n<li><strong>Outbound email with templates</strong>: The app has a set of static HTML files with placeholders that are loaded by the outbound email system and populated with user data</li>\n<li><strong>Bower static resource management</strong>: Most templates are based on out-of-date files (css templates, js, etc.). This template is uses bower for it's static files. This means a single CLI command will get you the latest everything.</li>\n<li><strong>Fast pages that are never stale</strong>: Every static resource is referenced with our own cache busting system. This means you can use extremely aggressive caching for performance on static files yet they immediately invalidate upon changes</li>\n<li><strong>Comes with an entire online course</strong>: This template is built from the final project in Python for Entrepreneurs, a 20 hour course on building professional web apps in Python and Pyramid from Talk Python Training</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 21 Mar 2017 00:00:00 -0800", "published_parsed": [2017, 3, 21, 8, 0, 0, 1, 80, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python 3 has some amazing types and you can now constructively insult your shell!", "itunes_episode": "18", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "**#1 Brian:[pdir2](https://github.com/laike9m/pdir2)** * Nice use of animated gif to showcase what it does. * It\u2019s a replacement for `dir()` to use interactively. * `pip install pdir2` , but `import pdir` . * `pdir(something)` gives you all that `dir()` does, but splits things into categories like exceptions, functions, attributes, \u2026 * each item on one line, and includes the first line of the docstring for the item. * Also, uses colors nicely. (Except I need to run it in a shell with non-black background on my mac or I can\u2019t see the docstring output. ) * Hugely useful if you use `dir()` interactively. * \ud83d\ude1e Readme is in markdown, pypi still can\u2019t handle that well. Maybe a listener can do a pull request on it to spiff up the pypi page: <https://pypi.python.org/pypi/pdir2> * Consider pairing this with [**ptpython**](https://github.com/jonathanslenders/ptpython)"}], "itunes_duration": "00:18:27"}}, "#17 Google's Python is on fire and Simon says you have CPU load Pythonically": {"info": {"title": "#17 Google's Python is on fire and Simon says you have CPU load Pythonically", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#17 Google's Python is on fire and Simon says you have CPU load Pythonically"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/17/google-s-python-is-on-fire-and-simon-says-you-have-cpu-load-pythonically"}, {"length": "18881859", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/17/google-s-python-is-on-fire-and-simon-says-you-have-cpu-load-pythonically.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/17/google-s-python-is-on-fire-and-simon-says-you-have-cpu-load-pythonically", "id": "https://pythonbytes.fm/episodes/download/17/google-s-python-is-on-fire-and-simon-says-you-have-cpu-load-pythonically.mp3", "guidislink": false, "summary": "<p><strong>#1 Brian: <a href=\"https://github.com/google/python-fire\">python-fire</a></strong></p>\n\n<ul>\n<li>Suggested by several listeners</li>\n<li>Under the Google repo set on github but not a Google product.</li>\n<li>\u201cPython Fire is a library for automatically generating command line interfaces (CLIs) from absolutely any Python object.\u201d</li>\n</ul>\n\n<p><em>Some Benefits as listed on the project page</em></p>\n\n<ul>\n<li>a simple way to create a CLI in Python. </li>\n<li>a tool for exploring and debugging Python code. </li>\n<li>exploring existing code by turning other people's code into a CLI.</li>\n<li>makes transitioning between Bash and Python easier. </li>\n</ul>\n\n<p>My take: </p>\n\n<ul>\n<li>Enough documentation right in the github repo for me to try it out. </li>\n<li>Concise but thorough documentation, as well.</li>\n<li>I wouldn\u2019t ship a CLI with this, as it\u2019s too heavy.\n<ul>\n<li>depends on ipython and six</li>\n</ul></li>\n<li>It would be useful to very quickly throw together a CLI to try out some Python code from bash.</li>\n<li>For internal development and debugging tools.</li>\n<li>I think this week I\u2019m going to try to build a few CLI tools for directly sending and receiving commands to some test instruments.    </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/hcyrnd/simon\"><strong>Simon: Simple macOS menubar system monitor</strong></a><strong>, written in Python 3.6 + pyobjc</strong></p>\n\n<ul>\n<li>Shows how simple a menubar app can be</li>\n<li>Nice example of a platform-native Python app (we need more of these)</li>\n<li>Could use it as a starter app for your ideas on macOS</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong>Free Food</strong>\nA couple of amusing Reddit posts about free food.</p>\n\n<ul>\n<li><a href=\"http://jamesbvaughan.com/python-twilio-scraping/\">Finding Free Food with Python</a></li>\n<li><a href=\"https://www.reddit.com/r/Python/comments/5wec78/i_wrote_a_program_that_emails_me_when_one_of_my/\">Notification when friends order pizza</a> </li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://httpie.org/\"><strong>HTTPie</strong></a></p>\n\n<ul>\n<li>Pronounced aitch-tee-tee-pie</li>\n<li>A command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more.</li>\n<li>A picture is worth many words, have a look: https://httpie.org/</li>\n<li>Excellent support for JSON, XML, HTTP response headers, etc</li>\n<li>I spoke before about <a href=\"https://www.getpostman.com/\">Postman</a> as an API test client, this is the CLI version.</li>\n</ul>\n\n<p><strong>#5 Brian: <a href=\"https://pypi.python.org/pypi/pipdeptree\">pipdeptree</a></strong></p>\n\n<ul>\n<li>Sometimes when doing <code>pip list</code>  I see way more packages than I remember installing. That\u2019s due to dependent installs. </li>\n<li><code>pipdeptree</code> is a simple command line tool that shows you your installed packages in an ascii tree structure so you can see who depends on.</li>\n<li>Example. <code>arrow</code> ? I don\u2019t remember installing that. Ah. <code>arrow</code>  is a dependency of <code>jinja2-time</code> ,which is a dependency of <code>cookiecutter</code> , that I do remember installing.</li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://blog.signifai.io/not-your-fathers-python-amazing-powerful-frameworks/\"><strong>Not Your Father\u2019s Python: Amazing Powerful Frameworks</strong></a></p>\n\n<ul>\n<li>When we were getting SignifAI off the ground, one of the biggest decisions we had to make right at the beginning was what our stack would be.\n<ul>\n<li>We know Python but\u2026</li>\n<li>But it\u2019s important to note that our product and infrastructure must support hundreds of thousands of events per second.</li>\n<li>So we were happy to see that, with the recent widespread adoption of Python 3 and the introduction of tasks and coroutines as first-class citizens in the language, Python has recently stepped up its game.</li>\n<li>Python 3 has continued evolving into a new wave of libraries that disrupt and change old assumptions about Python performance for web applications.</li>\n<li>Python\u2019s GIL, is it a true roadblock?</li>\n<li>UVLoop is the first ultra-fast asynchronous framework, which is a drop-in replacement for Python 3.5\u2019s built-in asyncio event loop. Both Japronto and Sanic which are reviewed in this post are also based on UVLoop.</li>\n<li>The future of Python is here: Overall, it looks like fast, asynchronous Python might be here to stay. Now that asyncio appears to be a default in Python and the async/await syntax has found favor among developers, the GIL doesn\u2019t seem like such a roadblock anymore and speed doesn\u2019t need to be a sacrifice.</li>\n</ul></li>\n<li>Comment: https://blog.signifai.io/not-your-fathers-python-amazing-powerful-frameworks/#comment-3193753282 </li>\n<li>Sasha Cuerda\u200f\u2019s tweet: https://twitter.com/sashacuerda/status/839839014836453377\n<em>@mkennedy @brianokken Just used the aiohttp example you talked about to refactor a CLI scraper...went from &gt; 8' to &lt; 45\". Blown away.</em></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>#1 Brian: <a href=\"https://github.com/google/python-fire\">python-fire</a></strong></p>\n\n<ul>\n<li>Suggested by several listeners</li>\n<li>Under the Google repo set on github but not a Google product.</li>\n<li>\u201cPython Fire is a library for automatically generating command line interfaces (CLIs) from absolutely any Python object.\u201d</li>\n</ul>\n\n<p><em>Some Benefits as listed on the project page</em></p>\n\n<ul>\n<li>a simple way to create a CLI in Python. </li>\n<li>a tool for exploring and debugging Python code. </li>\n<li>exploring existing code by turning other people's code into a CLI.</li>\n<li>makes transitioning between Bash and Python easier. </li>\n</ul>\n\n<p>My take: </p>\n\n<ul>\n<li>Enough documentation right in the github repo for me to try it out. </li>\n<li>Concise but thorough documentation, as well.</li>\n<li>I wouldn\u2019t ship a CLI with this, as it\u2019s too heavy.\n<ul>\n<li>depends on ipython and six</li>\n</ul></li>\n<li>It would be useful to very quickly throw together a CLI to try out some Python code from bash.</li>\n<li>For internal development and debugging tools.</li>\n<li>I think this week I\u2019m going to try to build a few CLI tools for directly sending and receiving commands to some test instruments.    </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/hcyrnd/simon\"><strong>Simon: Simple macOS menubar system monitor</strong></a><strong>, written in Python 3.6 + pyobjc</strong></p>\n\n<ul>\n<li>Shows how simple a menubar app can be</li>\n<li>Nice example of a platform-native Python app (we need more of these)</li>\n<li>Could use it as a starter app for your ideas on macOS</li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong>Free Food</strong>\nA couple of amusing Reddit posts about free food.</p>\n\n<ul>\n<li><a href=\"http://jamesbvaughan.com/python-twilio-scraping/\">Finding Free Food with Python</a></li>\n<li><a href=\"https://www.reddit.com/r/Python/comments/5wec78/i_wrote_a_program_that_emails_me_when_one_of_my/\">Notification when friends order pizza</a> </li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://httpie.org/\"><strong>HTTPie</strong></a></p>\n\n<ul>\n<li>Pronounced aitch-tee-tee-pie</li>\n<li>A command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more.</li>\n<li>A picture is worth many words, have a look: https://httpie.org/</li>\n<li>Excellent support for JSON, XML, HTTP response headers, etc</li>\n<li>I spoke before about <a href=\"https://www.getpostman.com/\">Postman</a> as an API test client, this is the CLI version.</li>\n</ul>\n\n<p><strong>#5 Brian: <a href=\"https://pypi.python.org/pypi/pipdeptree\">pipdeptree</a></strong></p>\n\n<ul>\n<li>Sometimes when doing <code>pip list</code>  I see way more packages than I remember installing. That\u2019s due to dependent installs. </li>\n<li><code>pipdeptree</code> is a simple command line tool that shows you your installed packages in an ascii tree structure so you can see who depends on.</li>\n<li>Example. <code>arrow</code> ? I don\u2019t remember installing that. Ah. <code>arrow</code>  is a dependency of <code>jinja2-time</code> ,which is a dependency of <code>cookiecutter</code> , that I do remember installing.</li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"https://blog.signifai.io/not-your-fathers-python-amazing-powerful-frameworks/\"><strong>Not Your Father\u2019s Python: Amazing Powerful Frameworks</strong></a></p>\n\n<ul>\n<li>When we were getting SignifAI off the ground, one of the biggest decisions we had to make right at the beginning was what our stack would be.\n<ul>\n<li>We know Python but\u2026</li>\n<li>But it\u2019s important to note that our product and infrastructure must support hundreds of thousands of events per second.</li>\n<li>So we were happy to see that, with the recent widespread adoption of Python 3 and the introduction of tasks and coroutines as first-class citizens in the language, Python has recently stepped up its game.</li>\n<li>Python 3 has continued evolving into a new wave of libraries that disrupt and change old assumptions about Python performance for web applications.</li>\n<li>Python\u2019s GIL, is it a true roadblock?</li>\n<li>UVLoop is the first ultra-fast asynchronous framework, which is a drop-in replacement for Python 3.5\u2019s built-in asyncio event loop. Both Japronto and Sanic which are reviewed in this post are also based on UVLoop.</li>\n<li>The future of Python is here: Overall, it looks like fast, asynchronous Python might be here to stay. Now that asyncio appears to be a default in Python and the async/await syntax has found favor among developers, the GIL doesn\u2019t seem like such a roadblock anymore and speed doesn\u2019t need to be a sacrifice.</li>\n</ul></li>\n<li>Comment: https://blog.signifai.io/not-your-fathers-python-amazing-powerful-frameworks/#comment-3193753282 </li>\n<li>Sasha Cuerda\u200f\u2019s tweet: https://twitter.com/sashacuerda/status/839839014836453377\n<em>@mkennedy @brianokken Just used the aiohttp example you talked about to refactor a CLI scraper...went from &gt; 8' to &lt; 45\". Blown away.</em></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Sat, 18 Mar 2017 00:00:00 -0800", "published_parsed": [2017, 3, 18, 8, 0, 0, 5, 77, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Google's Python is on fire and Simon says you have CPU load Pythonically", "itunes_episode": "17", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "**#1 Brian:[python-fire](https://github.com/google/python-fire)** * Suggested by several listeners * Under the Google repo set on github but not a Google product. * \u201cPython Fire is a library for automatically generating command line interfaces (CLIs) from absolutely any Python object.\u201d _Some Benefits as listed on the project page_ * a simple way to create a CLI in Python. * a tool for exploring and debugging Python code. * exploring existing code by turning other people's code into a CLI. * makes transitioning between Bash and Python easier. My take: * Enough documentation right in the github repo for me to try it out. * Concise but thorough documentation, as well. * I wouldn\u2019t ship a CLI with this, as it\u2019s too heavy. * depends on ipython and six * It would be useful to very quickly throw together a CLI to try out some Python code from bash. * For internal development and debugging tools. * I think this week I\u2019m going to try to build a few CLI tools for directly sending and receiving commands to some test instruments."}], "itunes_duration": "00:19:31"}}, "#16 Postmodern Python and Open-source Financial Awards": {"info": {"title": "#16 Postmodern Python and Open-source Financial Awards", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#16 Postmodern Python and Open-source Financial Awards"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/16/postmodern-python-and-open-source-financial-awards"}, {"length": "18621053", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/16/postmodern-python-and-open-source-financial-awards.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/16/postmodern-python-and-open-source-financial-awards", "id": "https://pythonbytes.fm/episodes/download/16/postmodern-python-and-open-source-financial-awards.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 16, recorded on March 6th, 2017.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\"><strong>Rollbar: they help you take the pain out of errors</strong></a>.</p>\n\n<p><strong>#1 Brian</strong>: <a href=\"http://journalpanic.com/post/postmodern-error-handling/\"><strong>Postmodern Error Handling in Python 3.6</strong></a></p>\n\n<ul>\n<li>On \"Journal Panic\"</li>\n<li>An amusing look at error prevention\n<ul>\n<li>Enum class usage</li>\n<li>NamedTuple class usage</li>\n<li>type hints</li>\n<li>mypy</li>\n</ul></li>\n<li>Bonus, another recent pretty darn good mypy walkthrough: <a href=\"https://www.caktusgroup.com/blog/2017/02/22/python-type-annotations/\">Python Type Annotations</a> </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://blog.mozilla.org/blog/2016/08/04/mozilla-awards-585000-to-nine-open-source-projects-in-q2-2016/\"><strong>Mozilla Awards $585,000 to Nine Open Source Projects in Q2 2016</strong></a></p>\n\n<ul>\n<li>One of the new tracks is \u201c<a href=\"https://wiki.mozilla.org/MOSS/Mission_Partners\">Mission Partners</a>\u201d, which supports any open source project which meaningfully advances the Mozilla mission. We had a large number of applications in the initial round, of which we have <a href=\"https://blog.mozilla.org/blog/2016/06/22/mozilla-awards-385000-to-open-source-projects-as-part-of-moss-mission-partners-program/\">already funded eight</a> (for a total of $385,000) and are still considering several more. Applications for \u201cMission Partners\u201d <a href=\"https://docs.google.com/forms/d/1rwYQTT-9-eldS-kElY646bMwMzJpxfL8lDskX86xgCQ/viewform\">remain open</a> on an ongoing basis.</li>\n<li>The second is our \u201c<a href=\"https://wiki.mozilla.org/MOSS/Secure_Open_Source\">Secure Open Source</a>\u201d track, which works on improving the security of open source software by providing manual source code audits for important and widely-used pieces of free software.</li>\n<li>Our initial track, \u201c<a href=\"https://wiki.mozilla.org/MOSS/Foundational_Technology\">Foundational Technology</a>\u201d, which supports projects that Mozilla already uses, integrates or deploys in our infrastructure, was launched late last year and remained open during this quarter.\n<ul>\n<li>We made one additional award \u2013 to PyPy, the Python JIT compiler, for $200,000. </li>\n<li>Applications for a \u201cFoundational Technology\u201d award <a href=\"https://docs.google.com/a/mozilla.com/forms/d/1Pa5IsuhT6vMUfg0HUXxr7SzrSwq5fpiZfZIJVPxN1Mc/viewform\">remain open</a>.</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://software.intel.com/en-us/articles/intelr-distribution-for-python-2017-update-2\"><strong>Intel Distribution for Python 2017 Update 2 accelerates five key areas for impressive performance gains</strong></a></p>\n\n<ul>\n<li>\u201cBenchmarks for all these accelerations will be published soon. \u201c</li>\n<li>\"..widespread optimizations for NumPy and SciPy FFT.\" \"..performance may improve up to 60x over Update 1 and is now close to native C/Intel MKL.\"</li>\n<li>\"Arithmetic and transcendental expressions\" from NumPy can now use<code>umath</code> primitives which enables support for all available cores.</li>\n<li>Memory management optimizations</li>\n<li>Faster Machine Learning with Scikit-learn</li>\n<li>Looks like there is a free standalone version and a paid version.</li>\n<li>Supports Python 2.7 and 3.5. (When\u2019s 3.6 coming, folks?)</li>\n<li>Supports Windows, Linux, OSX</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://morepypy.blogspot.com/2017/03/async-http-benchmarks-on-pypy3.html\"><strong>Async HTTP benchmarks on PyPy3</strong></a></p>\n\n<ul>\n<li>Thanks for the heads up <a href=\"https://twitter.com/guyfig\">Guy Fighel, @guyfig</a>\n<ul>\n<li>Since <a href=\"https://blog.mozilla.org/blog/2016/08/04/mozilla-awards-585000-to-nine-open-source-projects-in-q2-2016/\">Mozilla announced funding</a>, we've been working quite hard on delivering you a working Python 3.5.</li>\n<li>We are almost ready to release an alpha version of PyPy 3.5</li>\n<li>Pyston faded and PyPy is surging. </li>\n<li>To show that the heart of Python 3 (asyncio) is already working we have prepared some benchmarks.</li>\n<li>HTTP workload on several asynchronous IO libraries, namely the relatively new <em>asyncio and</em> <em>curio libraries</em> and the battle-tested <em>tornado</em>, <em>gevent and Twisted libraries</em></li>\n<li>The purpose of the presented benchmarks is showing that the upcoming PyPy release is already working with unmodified code that runs on CPython 3.5</li>\n<li>Summary: 5-10x improvement across the board</li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian</strong>: <a href=\"https://nedbatchelder.com/blog/201701/a_tale_of_two_exceptions.html\"><strong>A tale of two exceptions, part 1</strong></a>, <a href=\"https://nedbatchelder.com/blog/201702/a_tale_of_two_exceptions_continued.html\"><strong>and part2</strong></a></p>\n\n<ul>\n<li>Ned Batchelder tried to get the <code>coverage.py</code> test suite to run on Jython.</li>\n<li>Jython doesn't have whatever coverage needs for the reporting part of coverage, so Ned went through some attempts to get the exceptions working ok and try to skip tests that required reporting.</li>\n<li>Headaches start and raise lots of design questions with a normal set of pragmatic decisions that have to be made. And following Ned's thought process is a cool look at problem solving.</li>\n<li>The first post ends with a solution that includes production code raising test exceptions.</li>\n<li>The second post replaces that with a solution that uses a metaclass to apply a decorator to each test function at object instantiation. The decorator looks for a custom exception and raises SkipTest. </li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"http://terriblecode.com/blog/asynchronous-http-requests-in-python/\"><strong>Asynchronous HTTP Requests in Python</strong></a></p>\n\n<ul>\n<li>If you\u2019re familiar with the popular Python library <code>requests</code> you can consider <code>aiohttp</code> as the asynchronous version of <code>requests</code>.</li>\n<li>Usage is very similar to <code>requests</code> but the potential performance benefits are, in some cases, absolutely insane.</li>\n<li>Requests: It\u2019s a fairly straightforward program and takes around 12 minutes of total time.</li>\n<li><code>aiohttp</code>'s <code>ClientSession.get()</code> and <code>aiofiles</code>: execution time is about <em>22 seconds</em>, which in my opinion is a ridiculous performance boost (that\u2019s 33x faster).</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 16, recorded on March 6th, 2017.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\"><strong>Rollbar: they help you take the pain out of errors</strong></a>.</p>\n\n<p><strong>#1 Brian</strong>: <a href=\"http://journalpanic.com/post/postmodern-error-handling/\"><strong>Postmodern Error Handling in Python 3.6</strong></a></p>\n\n<ul>\n<li>On \"Journal Panic\"</li>\n<li>An amusing look at error prevention\n<ul>\n<li>Enum class usage</li>\n<li>NamedTuple class usage</li>\n<li>type hints</li>\n<li>mypy</li>\n</ul></li>\n<li>Bonus, another recent pretty darn good mypy walkthrough: <a href=\"https://www.caktusgroup.com/blog/2017/02/22/python-type-annotations/\">Python Type Annotations</a> </li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://blog.mozilla.org/blog/2016/08/04/mozilla-awards-585000-to-nine-open-source-projects-in-q2-2016/\"><strong>Mozilla Awards $585,000 to Nine Open Source Projects in Q2 2016</strong></a></p>\n\n<ul>\n<li>One of the new tracks is \u201c<a href=\"https://wiki.mozilla.org/MOSS/Mission_Partners\">Mission Partners</a>\u201d, which supports any open source project which meaningfully advances the Mozilla mission. We had a large number of applications in the initial round, of which we have <a href=\"https://blog.mozilla.org/blog/2016/06/22/mozilla-awards-385000-to-open-source-projects-as-part-of-moss-mission-partners-program/\">already funded eight</a> (for a total of $385,000) and are still considering several more. Applications for \u201cMission Partners\u201d <a href=\"https://docs.google.com/forms/d/1rwYQTT-9-eldS-kElY646bMwMzJpxfL8lDskX86xgCQ/viewform\">remain open</a> on an ongoing basis.</li>\n<li>The second is our \u201c<a href=\"https://wiki.mozilla.org/MOSS/Secure_Open_Source\">Secure Open Source</a>\u201d track, which works on improving the security of open source software by providing manual source code audits for important and widely-used pieces of free software.</li>\n<li>Our initial track, \u201c<a href=\"https://wiki.mozilla.org/MOSS/Foundational_Technology\">Foundational Technology</a>\u201d, which supports projects that Mozilla already uses, integrates or deploys in our infrastructure, was launched late last year and remained open during this quarter.\n<ul>\n<li>We made one additional award \u2013 to PyPy, the Python JIT compiler, for $200,000. </li>\n<li>Applications for a \u201cFoundational Technology\u201d award <a href=\"https://docs.google.com/a/mozilla.com/forms/d/1Pa5IsuhT6vMUfg0HUXxr7SzrSwq5fpiZfZIJVPxN1Mc/viewform\">remain open</a>.</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <a href=\"https://software.intel.com/en-us/articles/intelr-distribution-for-python-2017-update-2\"><strong>Intel Distribution for Python 2017 Update 2 accelerates five key areas for impressive performance gains</strong></a></p>\n\n<ul>\n<li>\u201cBenchmarks for all these accelerations will be published soon. \u201c</li>\n<li>\"..widespread optimizations for NumPy and SciPy FFT.\" \"..performance may improve up to 60x over Update 1 and is now close to native C/Intel MKL.\"</li>\n<li>\"Arithmetic and transcendental expressions\" from NumPy can now use<code>umath</code> primitives which enables support for all available cores.</li>\n<li>Memory management optimizations</li>\n<li>Faster Machine Learning with Scikit-learn</li>\n<li>Looks like there is a free standalone version and a paid version.</li>\n<li>Supports Python 2.7 and 3.5. (When\u2019s 3.6 coming, folks?)</li>\n<li>Supports Windows, Linux, OSX</li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://morepypy.blogspot.com/2017/03/async-http-benchmarks-on-pypy3.html\"><strong>Async HTTP benchmarks on PyPy3</strong></a></p>\n\n<ul>\n<li>Thanks for the heads up <a href=\"https://twitter.com/guyfig\">Guy Fighel, @guyfig</a>\n<ul>\n<li>Since <a href=\"https://blog.mozilla.org/blog/2016/08/04/mozilla-awards-585000-to-nine-open-source-projects-in-q2-2016/\">Mozilla announced funding</a>, we've been working quite hard on delivering you a working Python 3.5.</li>\n<li>We are almost ready to release an alpha version of PyPy 3.5</li>\n<li>Pyston faded and PyPy is surging. </li>\n<li>To show that the heart of Python 3 (asyncio) is already working we have prepared some benchmarks.</li>\n<li>HTTP workload on several asynchronous IO libraries, namely the relatively new <em>asyncio and</em> <em>curio libraries</em> and the battle-tested <em>tornado</em>, <em>gevent and Twisted libraries</em></li>\n<li>The purpose of the presented benchmarks is showing that the upcoming PyPy release is already working with unmodified code that runs on CPython 3.5</li>\n<li>Summary: 5-10x improvement across the board</li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian</strong>: <a href=\"https://nedbatchelder.com/blog/201701/a_tale_of_two_exceptions.html\"><strong>A tale of two exceptions, part 1</strong></a>, <a href=\"https://nedbatchelder.com/blog/201702/a_tale_of_two_exceptions_continued.html\"><strong>and part2</strong></a></p>\n\n<ul>\n<li>Ned Batchelder tried to get the <code>coverage.py</code> test suite to run on Jython.</li>\n<li>Jython doesn't have whatever coverage needs for the reporting part of coverage, so Ned went through some attempts to get the exceptions working ok and try to skip tests that required reporting.</li>\n<li>Headaches start and raise lots of design questions with a normal set of pragmatic decisions that have to be made. And following Ned's thought process is a cool look at problem solving.</li>\n<li>The first post ends with a solution that includes production code raising test exceptions.</li>\n<li>The second post replaces that with a solution that uses a metaclass to apply a decorator to each test function at object instantiation. The decorator looks for a custom exception and raises SkipTest. </li>\n</ul>\n\n<p><strong>#6 Michael:</strong> <a href=\"http://terriblecode.com/blog/asynchronous-http-requests-in-python/\"><strong>Asynchronous HTTP Requests in Python</strong></a></p>\n\n<ul>\n<li>If you\u2019re familiar with the popular Python library <code>requests</code> you can consider <code>aiohttp</code> as the asynchronous version of <code>requests</code>.</li>\n<li>Usage is very similar to <code>requests</code> but the potential performance benefits are, in some cases, absolutely insane.</li>\n<li>Requests: It\u2019s a fairly straightforward program and takes around 12 minutes of total time.</li>\n<li><code>aiohttp</code>'s <code>ClientSession.get()</code> and <code>aiofiles</code>: execution time is about <em>22 seconds</em>, which in my opinion is a ridiculous performance boost (that\u2019s 33x faster).</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 07 Mar 2017 00:00:00 -0800", "published_parsed": [2017, 3, 7, 8, 0, 0, 1, 66, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Postmodern Python and Open-source Financial Awards", "itunes_episode": "16", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 16, recorded on March 6th, 2017."}], "itunes_duration": "00:19:15"}}, "#15 Digging into Python packaging": {"info": {"title": "#15 Digging into Python packaging", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#15 Digging into Python packaging"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/15/digging-into-python-packaging"}, {"length": "15568892", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/15/digging-into-python-packaging.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/15/digging-into-python-packaging", "id": "https://pythonbytes.fm/episodes/download/15/digging-into-python-packaging.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 15, recorded on February 27, 2017.  </p>\n\n<p><strong>#1 Brian:</strong>  <strong>Packaging</strong>\n<a href=\"https://medium.com/small-things-about-python/lets-talk-about-python-packaging-6d84b81f1bb5#.b9ww4h4xt\"><strong>A Simple Guide for Python Packaging</strong></a> <strong><em>*by *</em></strong>Jie Feng, <a href=\"https://twitter.com/flyfengjie\">@flyfengjie</a></p>\n\n<ul>\n<li>very simple bare bones example and tutorial</li>\n<li>When you create a \u2018.py\u2019 file, that is a module.</li>\n<li>One or more modules in a folder with add a __init__.py file is a package (named via the folder)</li>\n</ul>\n\n<p><a href=\"http://python-packaging.readthedocs.io/en/latest/\"><strong>How To Package Your Python Code</strong></a> <em>*</em>*by Scott Torborg, <a href=\"https://twitter.com/storborg\">@storborg</a></p>\n\n<ul>\n<li>The example from the previous article comes from this.</li>\n<li>The best mid level explanation I\u2019ve run across so far to describe packaging and distribution.</li>\n<li>Read the whole thing in a very short time.</li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/khornberg/elasticpypi\"><strong>elasticpypi by</strong></a> <a href=\"https://github.com/khornberg/elasticpypi\"><strong>Kyle Hornberg</strong></a></p>\n\n<ul>\n<li>A mostly functional simple pypi service running on AWS.</li>\n<li>Runs over Elastic Search and AWS Lambda</li>\n<li>Compare to\n<ul>\n<li>pypiserver: https://pypiserver.readthedocs.io/en/latest/</li>\n<li>devpi: http://doc.devpi.net/latest/</li>\n<li>pypiserver: https://pypi.python.org/pypi/pypiserver</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong>How to get Python new<em>*</strong>s (our process)</em>*</p>\n\n<ul>\n<li><a href=\"https://pythonbytes.fm\">PythonBytes.fm</a>, of course</li>\n<li>Twitter: \n<ul>\n<li>Brian: <a href=\"https://twitter.com/brianokken\">https://twitter.com/brianokken</a></li>\n<li>Michael: <a href=\"https://twitter.com/mkennedy\">https://twitter.com/mkennedy</a></li>\n<li>Talk Python: <a href=\"https://twitter.com/TalkPython\">https://twitter.com/TalkPython</a></li>\n<li>Python Bytes: <a href=\"https://twitter.com/PythonBytes\">https://twitter.com/PythonBytes</a></li>\n</ul></li>\n<li><a href=\"http://planetpython.org/\">http://planetpython.org/</a>, check out the titles only link, as well as reading this feed with Feedly or some other feed reader</li>\n<li>Newsletters:\n<ul>\n<li>Awesome Python: <a href=\"https://python.libhunt.com/newsletter\">https://python.libhunt.com/newsletter</a></li>\n<li>Python Weekly: <a href=\"http://www.PythonWeekly.com\">http://www.PythonWeekly.com</a></li>\n<li>Pycoders Weekly: <a href=\"http://www.pycoders.com/\">http://www.pycoders.com</a></li>\n<li>Import Python: <a href=\"http://importpython.com/newsletter/\">http://importpython.com/newsletter/</a></li>\n</ul></li>\n<li>Reddit: <a href=\"https://www.reddit.com/r/Python/\">https://www.reddit.com/r/Python/</a></li>\n<li>Python Trending on GitHub: <a href=\"https://github.com/trending?l=python\">https://github.com/trending?l=python</a></li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/dabeaz/curio\"><strong>Curio - The coroutine concurrency library</strong></a><strong>, by</strong> <strong>David Beazley,</strong> <a href=\"https://twitter.com/dabeaz\"><strong>@dabeaz</strong></a></p>\n\n<ul>\n<li>Curio is a library for performing concurrent I/O and common system programming tasks such as launching subprocesses and farming work out to thread and process pools.</li>\n<li>It uses Python coroutines and the explicit async/await syntax introduced in Python 3.5.</li>\n<li>Based on cooperative multitasking and existing programming abstractions such as threads, sockets, files, subprocesses, locks, and queues.</li>\n<li>Only works on POSIX systems</li>\n<li>The Big Question: Why?\n<ul>\n<li>Python 3.4 and 3.5 have added major new paradigms for async programming.Curio takes full advantage of these features and is not encumbered by issues of backwards compatibility with legacy Python code written 15 years ago.\n<ul>\n<li>Curio is a ground-up implementation that takes a different approach to the problem while relying upon known programming techniques involving sockets and files.</li>\n<li>The implementation of Curio aims to be simple. The API for using Curio aims to be intuitive.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <a href=\"https://www.reddit.com/r/Python/comments/5v6xsf/pandas_switching_to_use_pytest_as_testing/\"><strong>Pandas switching to use pytest as testing framework</strong></a></p>\n\n<ul>\n<li>Interesting look at the challenges and discussion of moving a large, highly visible project</li>\n</ul>\n\n<p><a href=\"https://talkpython.fm/episodes/show/100/python-past-present-and-future-with-guido-van-rossum\"><strong>#6 Michael: Talk Python #100: Python past, present, and future with Guido van Rossum</strong></a></p>\n\n<ul>\n<li>Excellent look back and forward with Guido</li>\n<li>Conversation <a href=\"https://www.reddit.com/r/Python/comments/5vmvtj/python_past_present_and_future_with_guido_van/\">on reddit</a></li>\n<li>Conversation <a href=\"https://news.ycombinator.com/item?id=13710803\">on hackernews</a></li>\n<li>We touch on\n<ul>\n<li>How he got started</li>\n<li>Early influences on Python</li>\n<li>Why Python succeeded</li>\n<li>How are we doing with: Diversity and moving to Python 3?</li>\n<li>His favorite features of Python 3</li>\n<li>Converting legacy code via mypy: <a href=\"https://github.com/trending?l=python\">http://mypy-lang.org/</a></li>\n</ul></li>\n</ul>\n\n<p><strong>In other news (as in our news)</strong></p>\n\n<ul>\n<li><p><a href=\"http://testandcode.com/27\">Test &amp; Code 27 is out, a great talk with Mahmoud Hashemi</a> on different levels of testing, the role of testing in SW development, TDD, and what he\u2019s been up to lately. Test &amp; Code migrating to <a href=\"http://testandcode.com\">testandcode.com</a>, to separate writing and podcast into two sites. When it gets cleaned up a little, I\u2019ll forward podcast related links from <a href=\"http://pythontesting.net\">pythontesting</a> to <a href=\"http://testandcode.com\">testandcode</a>.</p></li>\n\n<li><p><a href=\"http://pythontesting.net/book/pytest\">The pytest book</a> got sent out to a few reviewers, and we have a title and some cover art options. It\u2019s getting exciting. The rest of the reviewers will get the book when all chapters have gone through at least one editor iteration.</p></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 15, recorded on February 27, 2017.  </p>\n\n<p><strong>#1 Brian:</strong>  <strong>Packaging</strong>\n<a href=\"https://medium.com/small-things-about-python/lets-talk-about-python-packaging-6d84b81f1bb5#.b9ww4h4xt\"><strong>A Simple Guide for Python Packaging</strong></a> <strong><em>*by *</em></strong>Jie Feng, <a href=\"https://twitter.com/flyfengjie\">@flyfengjie</a></p>\n\n<ul>\n<li>very simple bare bones example and tutorial</li>\n<li>When you create a \u2018.py\u2019 file, that is a module.</li>\n<li>One or more modules in a folder with add a __init__.py file is a package (named via the folder)</li>\n</ul>\n\n<p><a href=\"http://python-packaging.readthedocs.io/en/latest/\"><strong>How To Package Your Python Code</strong></a> <em>*</em>*by Scott Torborg, <a href=\"https://twitter.com/storborg\">@storborg</a></p>\n\n<ul>\n<li>The example from the previous article comes from this.</li>\n<li>The best mid level explanation I\u2019ve run across so far to describe packaging and distribution.</li>\n<li>Read the whole thing in a very short time.</li>\n</ul>\n\n<p><strong>#2 Michael:</strong> <a href=\"https://github.com/khornberg/elasticpypi\"><strong>elasticpypi by</strong></a> <a href=\"https://github.com/khornberg/elasticpypi\"><strong>Kyle Hornberg</strong></a></p>\n\n<ul>\n<li>A mostly functional simple pypi service running on AWS.</li>\n<li>Runs over Elastic Search and AWS Lambda</li>\n<li>Compare to\n<ul>\n<li>pypiserver: https://pypiserver.readthedocs.io/en/latest/</li>\n<li>devpi: http://doc.devpi.net/latest/</li>\n<li>pypiserver: https://pypi.python.org/pypi/pypiserver</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 Brian:</strong> <strong>How to get Python new<em>*</strong>s (our process)</em>*</p>\n\n<ul>\n<li><a href=\"https://pythonbytes.fm\">PythonBytes.fm</a>, of course</li>\n<li>Twitter: \n<ul>\n<li>Brian: <a href=\"https://twitter.com/brianokken\">https://twitter.com/brianokken</a></li>\n<li>Michael: <a href=\"https://twitter.com/mkennedy\">https://twitter.com/mkennedy</a></li>\n<li>Talk Python: <a href=\"https://twitter.com/TalkPython\">https://twitter.com/TalkPython</a></li>\n<li>Python Bytes: <a href=\"https://twitter.com/PythonBytes\">https://twitter.com/PythonBytes</a></li>\n</ul></li>\n<li><a href=\"http://planetpython.org/\">http://planetpython.org/</a>, check out the titles only link, as well as reading this feed with Feedly or some other feed reader</li>\n<li>Newsletters:\n<ul>\n<li>Awesome Python: <a href=\"https://python.libhunt.com/newsletter\">https://python.libhunt.com/newsletter</a></li>\n<li>Python Weekly: <a href=\"http://www.PythonWeekly.com\">http://www.PythonWeekly.com</a></li>\n<li>Pycoders Weekly: <a href=\"http://www.pycoders.com/\">http://www.pycoders.com</a></li>\n<li>Import Python: <a href=\"http://importpython.com/newsletter/\">http://importpython.com/newsletter/</a></li>\n</ul></li>\n<li>Reddit: <a href=\"https://www.reddit.com/r/Python/\">https://www.reddit.com/r/Python/</a></li>\n<li>Python Trending on GitHub: <a href=\"https://github.com/trending?l=python\">https://github.com/trending?l=python</a></li>\n</ul>\n\n<p><strong>#4 Michael:</strong> <a href=\"https://github.com/dabeaz/curio\"><strong>Curio - The coroutine concurrency library</strong></a><strong>, by</strong> <strong>David Beazley,</strong> <a href=\"https://twitter.com/dabeaz\"><strong>@dabeaz</strong></a></p>\n\n<ul>\n<li>Curio is a library for performing concurrent I/O and common system programming tasks such as launching subprocesses and farming work out to thread and process pools.</li>\n<li>It uses Python coroutines and the explicit async/await syntax introduced in Python 3.5.</li>\n<li>Based on cooperative multitasking and existing programming abstractions such as threads, sockets, files, subprocesses, locks, and queues.</li>\n<li>Only works on POSIX systems</li>\n<li>The Big Question: Why?\n<ul>\n<li>Python 3.4 and 3.5 have added major new paradigms for async programming.Curio takes full advantage of these features and is not encumbered by issues of backwards compatibility with legacy Python code written 15 years ago.\n<ul>\n<li>Curio is a ground-up implementation that takes a different approach to the problem while relying upon known programming techniques involving sockets and files.</li>\n<li>The implementation of Curio aims to be simple. The API for using Curio aims to be intuitive.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>#5 Brian:</strong> <a href=\"https://www.reddit.com/r/Python/comments/5v6xsf/pandas_switching_to_use_pytest_as_testing/\"><strong>Pandas switching to use pytest as testing framework</strong></a></p>\n\n<ul>\n<li>Interesting look at the challenges and discussion of moving a large, highly visible project</li>\n</ul>\n\n<p><a href=\"https://talkpython.fm/episodes/show/100/python-past-present-and-future-with-guido-van-rossum\"><strong>#6 Michael: Talk Python #100: Python past, present, and future with Guido van Rossum</strong></a></p>\n\n<ul>\n<li>Excellent look back and forward with Guido</li>\n<li>Conversation <a href=\"https://www.reddit.com/r/Python/comments/5vmvtj/python_past_present_and_future_with_guido_van/\">on reddit</a></li>\n<li>Conversation <a href=\"https://news.ycombinator.com/item?id=13710803\">on hackernews</a></li>\n<li>We touch on\n<ul>\n<li>How he got started</li>\n<li>Early influences on Python</li>\n<li>Why Python succeeded</li>\n<li>How are we doing with: Diversity and moving to Python 3?</li>\n<li>His favorite features of Python 3</li>\n<li>Converting legacy code via mypy: <a href=\"https://github.com/trending?l=python\">http://mypy-lang.org/</a></li>\n</ul></li>\n</ul>\n\n<p><strong>In other news (as in our news)</strong></p>\n\n<ul>\n<li><p><a href=\"http://testandcode.com/27\">Test &amp; Code 27 is out, a great talk with Mahmoud Hashemi</a> on different levels of testing, the role of testing in SW development, TDD, and what he\u2019s been up to lately. Test &amp; Code migrating to <a href=\"http://testandcode.com\">testandcode.com</a>, to separate writing and podcast into two sites. When it gets cleaned up a little, I\u2019ll forward podcast related links from <a href=\"http://pythontesting.net\">pythontesting</a> to <a href=\"http://testandcode.com\">testandcode</a>.</p></li>\n\n<li><p><a href=\"http://pythontesting.net/book/pytest\">The pytest book</a> got sent out to a few reviewers, and we have a title and some cover art options. It\u2019s getting exciting. The rest of the reviewers will get the book when all chapters have gone through at least one editor iteration.</p></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 28 Feb 2017 00:00:00 -0800", "published_parsed": [2017, 2, 28, 8, 0, 0, 1, 59, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Digging into Python packaging", "itunes_episode": "15", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news delivered directly to your earbuds: episode 15, recorded on February 27, 2017."}], "itunes_duration": "00:16:04"}}, "#14 Lots of Python style and Python 3000 is 3000 days old": {"info": {"title": "#14 Lots of Python style and Python 3000 is 3000 days old", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#14 Lots of Python style and Python 3000 is 3000 days old"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/14/lots-of-python-style-and-python-3000-is-3000-days-old"}, {"length": "15167675", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/14/lots-of-python-style-and-python-3000-is-3000-days-old.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/14/lots-of-python-style-and-python-3000-is-3000-days-old", "id": "https://pythonbytes.fm/episodes/download/14/lots-of-python-style-and-python-3000-is-3000-days-old.mp3", "guidislink": false, "summary": "<p><strong>Brian #1:</strong> <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md\"><strong>Tiny Python 3.6 Notebook - Matt Harrison</strong></a></p>\n\n<ul>\n<li>README : <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md\">https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md</a></li>\n<li>Full Book on GitHub : <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/python.rst\">https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/python.rst</a></li>\n<li>\u201cThis is not so much an instructional manual, but rather notes, tables, and examples for Python syntax.\u201d</li>\n<li>Physical book is 134 pages, but looks like about 90 pages of content.  </li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@anthonypjshaw/oh-no-this-package-is-python-2-only-8e6316f9a02#.xrquwdh51\"><strong>Oh no! This package is Python 2 only - Anthony Shaw</strong></a></p>\n\n<ul>\n<li>You\u2019re head down, working on a new project and one of your dependencies still doesn\u2019t support Python 3\u200a-\u200aargh! Here\u2019s a quick guide on how to solve that problem, step by step.</li>\n<li>Step 0: Check that nobody else has solved this</li>\n<li>Step 1: Fork it</li>\n<li>Step 2: Print statements</li>\n<li>Step 3: Tests\n<ul>\n<li>Static Analysis: modernize</li>\n</ul></li>\n<li>Step 4: Update setup.py</li>\n<li>Step 5: Install it into your original project</li>\n<li>Step 6: Raise a pull request</li>\n<li>Step 7: 3 months later?</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/amontalenti/elements-of-python-style\"><strong>Elements of Python Style</strong></a> <strong>- Andrew Montalenti</strong></p>\n\n<ul>\n<li>More than PEP8, and opinionated. </li>\n<li>I admire the effort, and I may at some point fork it to remove/fix the few things I disagree with and to be able to use it as a style guide for my team.</li>\n<li>Great: most of it. \n<ul>\n<li>Use parens for continuation</li>\n<li>Use with for files and locks</li>\n</ul></li>\n<li>May need tweaking\n<ul>\n<li>Avoid custom exceptions</li>\n<li>I\u2019d prefer, \u201cAdd one custom base exception, and build specific exceptions off of that\u201d. </li>\n<li>This may be a controversial point, or I may be just confused about conventional practice here</li>\n<li>As with any style guide, more detail brings more controversy. </li>\n</ul></li>\n<li>Michael: I like this guidance: You can also choose to use CamelCase for things that are class-like but not quite classes -- the main benefit of CamelCase is calling attention to something as a \"global noun\", rather than a local label or a verb. Notice that Python names True, False, and None use CamelCase even though they are not classes.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/Python/comments/5v0tt6/python_3_created_via_pep_3000_is_exactly_3000/\"><strong>Python 3 was exactly 3000 days old this past Sunday</strong></a></p>\n\n<ul>\n<li>Reddit post about my tweet (wow)\n<ul>\n<li>537 upvotes, 71 comments</li>\n</ul></li>\n<li>Test it yourself:\nbackground = \n  \u201cPython 3 was released December 3, 2008 \u201d + \\\n  \u201cIts original working name was Python 3000\u201d\nrelease = datetime.date(year=2008, month=12, day=3)\ntoday = datetime.date(year=2017, month=2, day=19)\n(today - release).days # \u2192 3000</li>\n<li>Via @cclauss Christian Clauss</li>\n</ul>\n\n<p>Brian #5:\n<strong>From beginner to pro:</strong> <a href=\"http://pybit.es/python-resources.html\"><strong>Python books, videos and resources</strong></a>\n<a href=\"http://pybit.es/python-resources.html\"></a></p>\n\n<ul>\n<li>Bob Belderbos and Julian Sequeira</li>\n<li>Reddit thread: <a href=\"https://redd.it/5sjt3l\">https://redd.it/5sjt3l</a></li>\n<li>Post: <a href=\"http://pybit.es/python-resources.html\">http://pybit.es/python-resources.html</a></li>\n<li>\u201ca list of useful Python resources to boost up your skills\u201d</li>\n<li>Some very nice podcasts listed in \u201cother resources\u201d</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/stampery/mongoaudit\"><strong>mongoaudit</strong></a></p>\n\n<ul>\n<li>mongoaudit is a CLI tool for auditing MongoDB servers, detecting poor security settings and performing automated penetration testing.</li>\n<li>pip install mongoaudit</li>\n<li>Tests things like:\n<ul>\n<li>MongoDB listens on a port different to default one</li>\n<li>Server only accepts connections from whitelisted hosts / networks</li>\n<li>MongoDB HTTP status interface is not accessible on port 28017</li>\n<li>MongoDB is not exposing its version number</li>\n<li>MongoDB version is newer than 2.4</li>\n<li>TLS/SSL encryption is enabled</li>\n<li>Authentication is enabled</li>\n<li>SCRAM-SHA-1 authentication method is enabled</li>\n<li>Server-side Javascript is forbidden</li>\n<li>Roles granted to the user only permit CRUD operations</li>\n<li>The user has permissions over a single database</li>\n<li>Various security vulnerabilities </li>\n</ul></li>\n<li>From Michael: MongoDB is awesome. But please make sure at least one of the following is true.\n<ul>\n<li>You only listen on local loopback (127.0.0.1) and run mongo on the web server</li>\n<li>You run mongodb with authentication enabled (it\u2019s off by default)</li>\n<li>You run mongodb with SSL enabled (may be off by default too)</li>\n</ul></li>\n</ul>\n\n<p>What else? Launched my course at <a href=\"https://bit.ly/python-rest-course\">https://bit.ly/python-rest-course</a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p><strong>Brian #1:</strong> <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md\"><strong>Tiny Python 3.6 Notebook - Matt Harrison</strong></a></p>\n\n<ul>\n<li>README : <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md\">https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md</a></li>\n<li>Full Book on GitHub : <a href=\"https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/python.rst\">https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/python.rst</a></li>\n<li>\u201cThis is not so much an instructional manual, but rather notes, tables, and examples for Python syntax.\u201d</li>\n<li>Physical book is 134 pages, but looks like about 90 pages of content.  </li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://medium.com/@anthonypjshaw/oh-no-this-package-is-python-2-only-8e6316f9a02#.xrquwdh51\"><strong>Oh no! This package is Python 2 only - Anthony Shaw</strong></a></p>\n\n<ul>\n<li>You\u2019re head down, working on a new project and one of your dependencies still doesn\u2019t support Python 3\u200a-\u200aargh! Here\u2019s a quick guide on how to solve that problem, step by step.</li>\n<li>Step 0: Check that nobody else has solved this</li>\n<li>Step 1: Fork it</li>\n<li>Step 2: Print statements</li>\n<li>Step 3: Tests\n<ul>\n<li>Static Analysis: modernize</li>\n</ul></li>\n<li>Step 4: Update setup.py</li>\n<li>Step 5: Install it into your original project</li>\n<li>Step 6: Raise a pull request</li>\n<li>Step 7: 3 months later?</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/amontalenti/elements-of-python-style\"><strong>Elements of Python Style</strong></a> <strong>- Andrew Montalenti</strong></p>\n\n<ul>\n<li>More than PEP8, and opinionated. </li>\n<li>I admire the effort, and I may at some point fork it to remove/fix the few things I disagree with and to be able to use it as a style guide for my team.</li>\n<li>Great: most of it. \n<ul>\n<li>Use parens for continuation</li>\n<li>Use with for files and locks</li>\n</ul></li>\n<li>May need tweaking\n<ul>\n<li>Avoid custom exceptions</li>\n<li>I\u2019d prefer, \u201cAdd one custom base exception, and build specific exceptions off of that\u201d. </li>\n<li>This may be a controversial point, or I may be just confused about conventional practice here</li>\n<li>As with any style guide, more detail brings more controversy. </li>\n</ul></li>\n<li>Michael: I like this guidance: You can also choose to use CamelCase for things that are class-like but not quite classes -- the main benefit of CamelCase is calling attention to something as a \"global noun\", rather than a local label or a verb. Notice that Python names True, False, and None use CamelCase even though they are not classes.</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://www.reddit.com/r/Python/comments/5v0tt6/python_3_created_via_pep_3000_is_exactly_3000/\"><strong>Python 3 was exactly 3000 days old this past Sunday</strong></a></p>\n\n<ul>\n<li>Reddit post about my tweet (wow)\n<ul>\n<li>537 upvotes, 71 comments</li>\n</ul></li>\n<li>Test it yourself:\nbackground = \n  \u201cPython 3 was released December 3, 2008 \u201d + \\\n  \u201cIts original working name was Python 3000\u201d\nrelease = datetime.date(year=2008, month=12, day=3)\ntoday = datetime.date(year=2017, month=2, day=19)\n(today - release).days # \u2192 3000</li>\n<li>Via @cclauss Christian Clauss</li>\n</ul>\n\n<p>Brian #5:\n<strong>From beginner to pro:</strong> <a href=\"http://pybit.es/python-resources.html\"><strong>Python books, videos and resources</strong></a>\n<a href=\"http://pybit.es/python-resources.html\"></a></p>\n\n<ul>\n<li>Bob Belderbos and Julian Sequeira</li>\n<li>Reddit thread: <a href=\"https://redd.it/5sjt3l\">https://redd.it/5sjt3l</a></li>\n<li>Post: <a href=\"http://pybit.es/python-resources.html\">http://pybit.es/python-resources.html</a></li>\n<li>\u201ca list of useful Python resources to boost up your skills\u201d</li>\n<li>Some very nice podcasts listed in \u201cother resources\u201d</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://github.com/stampery/mongoaudit\"><strong>mongoaudit</strong></a></p>\n\n<ul>\n<li>mongoaudit is a CLI tool for auditing MongoDB servers, detecting poor security settings and performing automated penetration testing.</li>\n<li>pip install mongoaudit</li>\n<li>Tests things like:\n<ul>\n<li>MongoDB listens on a port different to default one</li>\n<li>Server only accepts connections from whitelisted hosts / networks</li>\n<li>MongoDB HTTP status interface is not accessible on port 28017</li>\n<li>MongoDB is not exposing its version number</li>\n<li>MongoDB version is newer than 2.4</li>\n<li>TLS/SSL encryption is enabled</li>\n<li>Authentication is enabled</li>\n<li>SCRAM-SHA-1 authentication method is enabled</li>\n<li>Server-side Javascript is forbidden</li>\n<li>Roles granted to the user only permit CRUD operations</li>\n<li>The user has permissions over a single database</li>\n<li>Various security vulnerabilities </li>\n</ul></li>\n<li>From Michael: MongoDB is awesome. But please make sure at least one of the following is true.\n<ul>\n<li>You only listen on local loopback (127.0.0.1) and run mongo on the web server</li>\n<li>You run mongodb with authentication enabled (it\u2019s off by default)</li>\n<li>You run mongodb with SSL enabled (may be off by default too)</li>\n</ul></li>\n</ul>\n\n<p>What else? Launched my course at <a href=\"https://bit.ly/python-rest-course\">https://bit.ly/python-rest-course</a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 22 Feb 2017 00:00:00 -0800", "published_parsed": [2017, 2, 22, 8, 0, 0, 2, 53, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Lots of Python style and Python 3000 is 3000 days old", "itunes_episode": "14", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "**Brian #1:** [**Tiny Python 3.6 Notebook - Matt Harrison**](https://github.com/mattharrison/Tiny- Python-3.6-Notebook/blob/master/README.md) * README : <https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/README.md> * Full Book on GitHub : <https://github.com/mattharrison/Tiny-Python-3.6-Notebook/blob/master/python.rst> * \u201cThis is not so much an instructional manual, but rather notes, tables, and examples for Python syntax.\u201d * Physical book is 134 pages, but looks like about 90 pages of content."}], "itunes_duration": "00:15:39"}}, "#13 Python making the move to GitHub and Dropbox is stepping back from Pyston": {"info": {"title": "#13 Python making the move to GitHub and Dropbox is stepping back from Pyston", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#13 Python making the move to GitHub and Dropbox is stepping back from Pyston"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/13/python-making-the-move-to-github-and-dropbox-is-stepping-back-from-pyston"}, {"length": "17526000", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/13/python-making-the-move-to-github-and-dropbox-is-stepping-back-from-pyston.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/13/python-making-the-move-to-github-and-dropbox-is-stepping-back-from-pyston", "id": "https://pythonbytes.fm/episodes/download/13/python-making-the-move-to-github-and-dropbox-is-stepping-back-from-pyston.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 13, recorded on February 13, 2017. In this episode we discuss Python making the move to GitHub and Dropbox stepping back from Pyston.  </p>\n\n<p>This episode was brought to you by <a href=\"http://thisismetis.com/talkpython\">Metis: The Data Science Bootcamp company</a>.</p>\n\n<p><a href=\"https://blog.pyston.org/2017/01/31/pyston-0-6-1-released-and-future-plans/\"><strong>#1 Brian:Pyston no longer sponsored by Dropbox</strong></a></p>\n\n<p>Personal follow up post by Kevin Modzelewski\n<a href=\"http://blog.kevmod.com/2017/02/personal-thoughts-about-pystons-outcome/\">http://blog.kevmod.com/2017/02/personal-thoughts-about-pystons-outcome/</a></p>\n\n<ul>\n<li>Pyston (pronounced piston) is a Python JIT implementation started at Dropbox</li>\n<li>It was based on CPython and supported a bunch of 2.7, but wasn\u2019t complete.</li>\n<li>Bottom line: It\u2019s open source, and the repo will be left for whoever wants to work on it. But the core developers from Dropbox won\u2019t be working on it, and Dropbox won\u2019t be spending any more time/money on it.</li>\n</ul>\n\n<p><a href=\"https://github.com/python/cpython\"><strong>#2 Michael: CPython is coming to GitHub</strong></a></p>\n\n<ul>\n<li>Mailing list announcment: <a href=\"https://mail.python.org/pipermail/python-dev/2017-February/147341.html\">https://mail.python.org/pipermail/python-dev/2017-February/147341.html</a></li>\n<li>Reddit discussion <a href=\"https://www.reddit.com/r/Python/comments/5ssx9w/cpython_moves_to_github_this_friday/\">https://www.reddit.com/r/Python/comments/5ssx9w/cpython_moves_to_github_this_friday/</a></li>\n</ul>\n\n<p>Brett Cannon\u2019s excellent background story: <a href=\"https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/\">https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/</a></p>\n\n<ul>\n<li>Interesting that some people (voiced via reddit) sadness about leaving Hg\u2026</li>\n<li>2006: Python moves to SVN</li>\n<li>2011: Python moves to Hg</li>\n<li>2017: Python moves to GitHub</li>\n<li>By 2014 it had become obvious to some of us that the Python development process had in fact become a burden. The rate at which patches were being submitted was much greater than the rate at which they were being reviewed. This was leading to external contributors getting frustrated because they would put in the effort to write a patch but would occasionally end up with waiting years for a review from a core developer.</li>\n<li>I wanted was the ability to review an external contribution -- from submission to commit -- all on a tablet while at a beach with WiFi (which I actually have in Vancouver so this wasn't entirely a silly request). My thinking was that if we got the process to be that simple, core developers could do a review at lunch time while at work, or when they had some down time at home without having to be on some special machine that had their SSH keys installed on it.</li>\n</ul>\n\n<p><a href=\"http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/func_py/func_py.ipynb\"><strong>#3 Brian: Using functional programming in Python like a boss: Generators, Iterators and Decorators</strong></a></p>\n\n<ul>\n<li>I\u2019m liking the trend of more Jupiter notebook based articles. This one is a pretty gentle introduction into functions, generators, iterators, decorators, containers, and how they all work together to make your code more expressive.</li>\n</ul>\n\n<p><a href=\"https://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/meta_alltheway/meta_alltheway.ipynb\"><strong>#4 Michael: It's metaclasses all the way down</strong></a></p>\n\n<ul>\n<li>What is metaprogramming? Metaprogramming is a technique of writing computer programs that can treat themselves as data, so you can introspect, generate, and/or modify them while running</li>\n<li>Metaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don\u2019t (Tim Peters)</li>\n<li>However: The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization. </li>\n<li>Nice examples: \n<ul>\n<li>Django ORM models</li>\n<li>Abstract vehicle class</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://dbader.org/blog/python-lambda-functions\"><strong>#5 Brian: Lambda Functions in Python: What Are They Good For?</strong></a></p>\n\n<ul>\n<li>Lambdas are part of the language, and if used sparingly and in the right context, can make your code more readable. It\u2019s super important for intermediate and experienced Python folks to understand lambdas and not be afraid of them.</li>\n<li>This article is a good tutorial on them.</li>\n<li>When you finally grok them, you might be tempted to use them all over the place. Dan presents a couple of places where using lambdas is a bad choice:\n<ul>\n<li>creating class methods. Definitions are definitely preferred over assigning lambdas to attributes. </li>\n<li>generating a list with <code>list(fliter(&lt;lambda expression&gt;, &lt;iterable&gt;))</code> . I agree with Dan that comprehensions are way easier to read.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"http://charlesleifer.com/blog/multi-threaded-sqlite-without-the-operationalerrors/\"><strong>#6 Michael: Multi-threaded SQLite without the OperationalErrors</strong></a></p>\n\n<ul>\n<li>Unless you are very diligent about keeping your write transactions as short as possible, you can easily wind up with one thread accidentally holding a write transaction open for an unnecessarily long time. </li>\n<li>I've had success using a very simple approach: I eliminate the possibility of lock contention by dedicating one thread to the task of issuing all writes for the application.</li>\n<li>The entire source listing can be found here, if you're curious: <a href=\"https://github.com/coleifer/peewee/blob/master/playhouse/sqliteq.py\">https://github.com/coleifer/peewee/blob/master/playhouse/sqliteq.py</a></li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>Followup:</strong></a> <a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>J</strong></a><a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>apronto not production ready</strong></a>:\n\u201cJapronto author here: As stated in the README you should not build anything serious with Japronto now because it's gonna probably eat your laundry. Remember it's hand coded in C and this needs a lot of testing. On the top of that I plan to do several iterations of API changes in a largely incompatible ways. I hope though it's gonna make a serious player in the field one day.</p>\n\n<p>If you wanna a decent async framework then go with aiohttp or Sanic. If you are gonna do typical REST app frontend to a database go with Flask or Pyramid. If you need a scaffolded admin go with Django.\u201d</p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 13, recorded on February 13, 2017. In this episode we discuss Python making the move to GitHub and Dropbox stepping back from Pyston.  </p>\n\n<p>This episode was brought to you by <a href=\"http://thisismetis.com/talkpython\">Metis: The Data Science Bootcamp company</a>.</p>\n\n<p><a href=\"https://blog.pyston.org/2017/01/31/pyston-0-6-1-released-and-future-plans/\"><strong>#1 Brian:Pyston no longer sponsored by Dropbox</strong></a></p>\n\n<p>Personal follow up post by Kevin Modzelewski\n<a href=\"http://blog.kevmod.com/2017/02/personal-thoughts-about-pystons-outcome/\">http://blog.kevmod.com/2017/02/personal-thoughts-about-pystons-outcome/</a></p>\n\n<ul>\n<li>Pyston (pronounced piston) is a Python JIT implementation started at Dropbox</li>\n<li>It was based on CPython and supported a bunch of 2.7, but wasn\u2019t complete.</li>\n<li>Bottom line: It\u2019s open source, and the repo will be left for whoever wants to work on it. But the core developers from Dropbox won\u2019t be working on it, and Dropbox won\u2019t be spending any more time/money on it.</li>\n</ul>\n\n<p><a href=\"https://github.com/python/cpython\"><strong>#2 Michael: CPython is coming to GitHub</strong></a></p>\n\n<ul>\n<li>Mailing list announcment: <a href=\"https://mail.python.org/pipermail/python-dev/2017-February/147341.html\">https://mail.python.org/pipermail/python-dev/2017-February/147341.html</a></li>\n<li>Reddit discussion <a href=\"https://www.reddit.com/r/Python/comments/5ssx9w/cpython_moves_to_github_this_friday/\">https://www.reddit.com/r/Python/comments/5ssx9w/cpython_moves_to_github_this_friday/</a></li>\n</ul>\n\n<p>Brett Cannon\u2019s excellent background story: <a href=\"https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/\">https://snarky.ca/the-history-behind-the-decision-to-move-python-to-github/</a></p>\n\n<ul>\n<li>Interesting that some people (voiced via reddit) sadness about leaving Hg\u2026</li>\n<li>2006: Python moves to SVN</li>\n<li>2011: Python moves to Hg</li>\n<li>2017: Python moves to GitHub</li>\n<li>By 2014 it had become obvious to some of us that the Python development process had in fact become a burden. The rate at which patches were being submitted was much greater than the rate at which they were being reviewed. This was leading to external contributors getting frustrated because they would put in the effort to write a patch but would occasionally end up with waiting years for a review from a core developer.</li>\n<li>I wanted was the ability to review an external contribution -- from submission to commit -- all on a tablet while at a beach with WiFi (which I actually have in Vancouver so this wasn't entirely a silly request). My thinking was that if we got the process to be that simple, core developers could do a review at lunch time while at work, or when they had some down time at home without having to be on some special machine that had their SSH keys installed on it.</li>\n</ul>\n\n<p><a href=\"http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/func_py/func_py.ipynb\"><strong>#3 Brian: Using functional programming in Python like a boss: Generators, Iterators and Decorators</strong></a></p>\n\n<ul>\n<li>I\u2019m liking the trend of more Jupiter notebook based articles. This one is a pretty gentle introduction into functions, generators, iterators, decorators, containers, and how they all work together to make your code more expressive.</li>\n</ul>\n\n<p><a href=\"https://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/meta_alltheway/meta_alltheway.ipynb\"><strong>#4 Michael: It's metaclasses all the way down</strong></a></p>\n\n<ul>\n<li>What is metaprogramming? Metaprogramming is a technique of writing computer programs that can treat themselves as data, so you can introspect, generate, and/or modify them while running</li>\n<li>Metaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don\u2019t (Tim Peters)</li>\n<li>However: The potential uses for metaclasses are boundless. Some ideas that have been explored include logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization. </li>\n<li>Nice examples: \n<ul>\n<li>Django ORM models</li>\n<li>Abstract vehicle class</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://dbader.org/blog/python-lambda-functions\"><strong>#5 Brian: Lambda Functions in Python: What Are They Good For?</strong></a></p>\n\n<ul>\n<li>Lambdas are part of the language, and if used sparingly and in the right context, can make your code more readable. It\u2019s super important for intermediate and experienced Python folks to understand lambdas and not be afraid of them.</li>\n<li>This article is a good tutorial on them.</li>\n<li>When you finally grok them, you might be tempted to use them all over the place. Dan presents a couple of places where using lambdas is a bad choice:\n<ul>\n<li>creating class methods. Definitions are definitely preferred over assigning lambdas to attributes. </li>\n<li>generating a list with <code>list(fliter(&lt;lambda expression&gt;, &lt;iterable&gt;))</code> . I agree with Dan that comprehensions are way easier to read.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"http://charlesleifer.com/blog/multi-threaded-sqlite-without-the-operationalerrors/\"><strong>#6 Michael: Multi-threaded SQLite without the OperationalErrors</strong></a></p>\n\n<ul>\n<li>Unless you are very diligent about keeping your write transactions as short as possible, you can easily wind up with one thread accidentally holding a write transaction open for an unnecessarily long time. </li>\n<li>I've had success using a very simple approach: I eliminate the possibility of lock contention by dedicating one thread to the task of issuing all writes for the application.</li>\n<li>The entire source listing can be found here, if you're curious: <a href=\"https://github.com/coleifer/peewee/blob/master/playhouse/sqliteq.py\">https://github.com/coleifer/peewee/blob/master/playhouse/sqliteq.py</a></li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>Followup:</strong></a> <a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>J</strong></a><a href=\"https://www.reddit.com/r/Python/comments/5ryiq7/sticking_with_flask_vs_switching_to_one_of_the/\"><strong>apronto not production ready</strong></a>:\n\u201cJapronto author here: As stated in the README you should not build anything serious with Japronto now because it's gonna probably eat your laundry. Remember it's hand coded in C and this needs a lot of testing. On the top of that I plan to do several iterations of API changes in a largely incompatible ways. I hope though it's gonna make a serious player in the field one day.</p>\n\n<p>If you wanna a decent async framework then go with aiohttp or Sanic. If you are gonna do typical REST app frontend to a database go with Flask or Pyramid. If you need a scaffolded admin go with Django.\u201d</p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 14 Feb 2017 00:00:00 -0800", "published_parsed": [2017, 2, 14, 8, 0, 0, 1, 45, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python making the move to GitHub and Dropbox is stepping back from Pyston", "itunes_episode": "13", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 13, recorded on February 13, 2017. In this episode we discuss Python making the move to GitHub and Dropbox stepping back from Pyston."}], "itunes_duration": "00:18:06"}}, "#12 Expanding your Python mental model and serving millions of requests per second with Python": {"info": {"title": "#12 Expanding your Python mental model and serving millions of requests per second with Python", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#12 Expanding your Python mental model and serving millions of requests per second with Python"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/12/expanding-your-python-mental-model-and-serving-millions-of-requests-per-second-with-python"}, {"length": "18446346", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/12/expanding-your-python-mental-model-and-serving-millions-of-requests-per-second-with-python.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/12/expanding-your-python-mental-model-and-serving-millions-of-requests-per-second-with-python", "id": "https://pythonbytes.fm/episodes/download/12/expanding-your-python-mental-model-and-serving-millions-of-requests-per-second-with-python.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 12, recorded on February 6th, 2017. In this episode we discuss expanding your Python mental model and serving millions of requests per second with Python.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p><strong>BO 1:  A couple of mental model articles</strong></p>\n\n<ul>\n<li><strong>Python Functions aren\u2019t what you think.</strong>\n<ul>\n<li>http://powerfulpython.com/blog/python-functions-arent-what-you-think/</li>\n<li>Functions are objects. The name of a function is just a variable name referring to the object.</li>\n</ul></li>\n<li><strong>The Tao of Python</strong>\n<ul>\n<li>http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/tao_mro/tao_of_python.ipynb</li>\n<li>Jupiter notebook discussion of the relationship between objects, classes, and metaclasses.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://dbader.org/blog/why-learn-python\"><strong>Why Learn Python? Here Are 8 Data-Driven Reasons</strong></a> <strong>by Dan Bader</strong></p>\n\n<ul>\n<li>Is Python worth learning? We\u2019ve interviewed experts and surveyed the job market to identify the key reasons why you should learn Python today.</li>\n<li>Python is also one of the hottest skills to have according to <a href=\"http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/\">research by Dice</a></li>\n<li>The 2nd most popular programming language in the world based on the <a href=\"http://pypl.github.io/PYPL.html\">PYPL Popularity of Programming Language Index</a>.\n<ul>\n<li><ol>\n<li>You Can Use Python for Pretty Much Anything</li>\n</ol></li>\n<li><ol>\n<li>Python Is Widely Used in Data Science</li>\n</ol></li>\n<li><ol>\n<li>Python Pays Well: Indeed\u2019s salary calculator gives an even larger figure\u2014a whopping $116,000 per year. (second only to ruby according to gooroo but has 3 times the job openings)</li>\n</ol></li>\n<li><ol>\n<li>Demand for Python Developers Is High (And Growing)</li>\n</ol></li>\n<li><ol>\n<li>Python Saves Time</li>\n</ol></li>\n<li><ol>\n<li>Python Is Beginner Friendly</li>\n</ol></li>\n<li><ol>\n<li>All the Big Names Use Python</li>\n</ol></li>\n<li>Python could be your way into major tech companies: YouTube, IBM, Yahoo, Dropbox, Quora, Mozilla, Instagram, and many others </li>\n<li><ol>\n<li>Python Has an Amazing Ecosystem</li>\n</ol></li>\n<li>Segments from: Michael Kennedy, Ankur Gupta (Curator at ImportPython), and Sebastian Vetter (Python Engineer at Eventbase)</li>\n</ul></li>\n</ul>\n\n<p><strong>B<em>*</strong>rian #<strong></em>*3:</strong> <a href=\"https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest\"><strong>Testing Python Applications with Pytest - Kevin Ndung\u2019u</strong></a>\nHow could I resist? Do a decent job explaining something about pytest, and I\u2019m happy. \nWhat I liked:</p>\n\n<ul>\n<li>good really fast intro to pytest extreme basics</li>\n<li>Refactoring test code with fixtures. Pulling out common starting state into a fixture.</li>\n<li>Paramterizing tests to send multiple data sets into the same test function</li>\n<li>Using both fixtures and paratmerization in the same test function</li>\n</ul>\n\n<p>There\u2019s so much power and functionality in pytest. But just starting to use it as a better test framework for Python is a good thing. This article is a good kick in the pants for someone new to pytest. Easy intro, plus a couple of cool goodies.</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.freecodecamp.com/million-requests-per-second-with-python-95c137af319#.ju1j76oli\"><strong>A million requests per second with Python</strong></a></p>\n\n<ul>\n<li>Screaming-fast Python 3.5+ web micro-framework integrated with pipelining HTTP server based on uvloop and picohttpparser.</li>\n<li>We spoke about sanic recently. Apparently this is much faster.</li>\n<li>https://github.com/squeaky-pl/japronto 2.6k stars</li>\n<li>Is it possible to hit a million requests per second with Python? Probably not until recently.</li>\n<li>Covers perf improvements found in 3.6 and coming in 3.7.</li>\n<li>It lets you do both synchronous and asynchronous programming thanks to asyncio. And it\u2019s shamelessly fast. Even faster than NodeJS and Go.</li>\n<li>Japronto tries hard to delay creation of Python counterparts of its internal structures until asked explicitly. For example, a headers dictionary won\u2019t be created until it\u2019s requested in a view.</li>\n</ul>\n\n<p><strong>Brian#5:</strong> <a href=\"https://rethinkdb.com/blog/rethinkdb-joins-linux-foundation/\"><strong>RethinkDB is alive and well</strong></a></p>\n\n<ul>\n<li>RethinkDB joins The Linux Foundation\n<ul>\n<li>https://rethinkdb.com/blog/rethinkdb-joins-linux-foundation/</li>\n</ul></li>\n<li>The liberation of RethinkDB\n<ul>\n<li>https://www.joyent.com/blog/the-liberation-of-rethinkdb</li>\n</ul></li>\n<li>Company behind RethinkDB shut down Sept 2016</li>\n<li>Announced today that Cloud Native Computing Foundation purchased the rights to source code and contributed it to the Linux Foundation under Apache license ASLv2.</li>\n<li>Website, GitHub org, social media accounts will continue to operate.</li>\n<li>They can take donations, and stripe has ponied up 25k in donation matching.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.mybridge.co/python-top-10-articles-for-the-past-year-v-2017-6033ae8c65c9#.mhn051vv5\"><strong>Python Top 10 Articles for the Past Year (v.2017)</strong></a></p>\n\n<ol>\n<li>The Hitchhiker\u2019s Guide to Python: Best practices guidebook written for Humans.</li>\n<li>Scipy Lecture Notes\u200a\u2014\u200aLearn numerics, science, and data with Python.</li>\n<li>30 Essential Python Tips and Tricks for Programmers.</li>\n<li>Computational and Inferential Thinking for Data Science. Courtesy of UC Berkeley</li>\n<li>Welcome to Python cheatsheet.</li>\n<li>Data Mining in Python: A Guide.</li>\n<li>Python FAQ: Why should I use Python 3? (by eevee)</li>\n<li>An Introduction to Stock Market Data Analysis with Python</li>\n<li>NumPy Tutorial: Data analysis with Python.</li>\n<li>Build Your First Python and Django Application</li>\n</ol>\n\n<p><strong>Michael: Follow up on RHL:</strong> <a href=\"https://developers.redhat.com/products/softwarecollections/hello-world/\"><strong>Red Hat Software Collections</strong></a>\nThank you <a href=\"http://disq.us/p/1fua8rv\">Chip Warden</a></p>\n\n<ul>\n<li>The latest, stable updates of development technologies for Red Hat Enterprise Linux</li>\n<li>Add latest for:\n<ul>\n<li>Node </li>\n<li>Perl </li>\n<li>PHP </li>\n<li>Python [YES! Python 3]</li>\n<li>Ruby</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 12, recorded on February 6th, 2017. In this episode we discuss expanding your Python mental model and serving millions of requests per second with Python.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p><strong>BO 1:  A couple of mental model articles</strong></p>\n\n<ul>\n<li><strong>Python Functions aren\u2019t what you think.</strong>\n<ul>\n<li>http://powerfulpython.com/blog/python-functions-arent-what-you-think/</li>\n<li>Functions are objects. The name of a function is just a variable name referring to the object.</li>\n</ul></li>\n<li><strong>The Tao of Python</strong>\n<ul>\n<li>http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/tao_mro/tao_of_python.ipynb</li>\n<li>Jupiter notebook discussion of the relationship between objects, classes, and metaclasses.</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://dbader.org/blog/why-learn-python\"><strong>Why Learn Python? Here Are 8 Data-Driven Reasons</strong></a> <strong>by Dan Bader</strong></p>\n\n<ul>\n<li>Is Python worth learning? We\u2019ve interviewed experts and surveyed the job market to identify the key reasons why you should learn Python today.</li>\n<li>Python is also one of the hottest skills to have according to <a href=\"http://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/\">research by Dice</a></li>\n<li>The 2nd most popular programming language in the world based on the <a href=\"http://pypl.github.io/PYPL.html\">PYPL Popularity of Programming Language Index</a>.\n<ul>\n<li><ol>\n<li>You Can Use Python for Pretty Much Anything</li>\n</ol></li>\n<li><ol>\n<li>Python Is Widely Used in Data Science</li>\n</ol></li>\n<li><ol>\n<li>Python Pays Well: Indeed\u2019s salary calculator gives an even larger figure\u2014a whopping $116,000 per year. (second only to ruby according to gooroo but has 3 times the job openings)</li>\n</ol></li>\n<li><ol>\n<li>Demand for Python Developers Is High (And Growing)</li>\n</ol></li>\n<li><ol>\n<li>Python Saves Time</li>\n</ol></li>\n<li><ol>\n<li>Python Is Beginner Friendly</li>\n</ol></li>\n<li><ol>\n<li>All the Big Names Use Python</li>\n</ol></li>\n<li>Python could be your way into major tech companies: YouTube, IBM, Yahoo, Dropbox, Quora, Mozilla, Instagram, and many others </li>\n<li><ol>\n<li>Python Has an Amazing Ecosystem</li>\n</ol></li>\n<li>Segments from: Michael Kennedy, Ankur Gupta (Curator at ImportPython), and Sebastian Vetter (Python Engineer at Eventbase)</li>\n</ul></li>\n</ul>\n\n<p><strong>B<em>*</strong>rian #<strong></em>*3:</strong> <a href=\"https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest\"><strong>Testing Python Applications with Pytest - Kevin Ndung\u2019u</strong></a>\nHow could I resist? Do a decent job explaining something about pytest, and I\u2019m happy. \nWhat I liked:</p>\n\n<ul>\n<li>good really fast intro to pytest extreme basics</li>\n<li>Refactoring test code with fixtures. Pulling out common starting state into a fixture.</li>\n<li>Paramterizing tests to send multiple data sets into the same test function</li>\n<li>Using both fixtures and paratmerization in the same test function</li>\n</ul>\n\n<p>There\u2019s so much power and functionality in pytest. But just starting to use it as a better test framework for Python is a good thing. This article is a good kick in the pants for someone new to pytest. Easy intro, plus a couple of cool goodies.</p>\n\n<p><strong>Michael #4:</strong> <a href=\"https://medium.freecodecamp.com/million-requests-per-second-with-python-95c137af319#.ju1j76oli\"><strong>A million requests per second with Python</strong></a></p>\n\n<ul>\n<li>Screaming-fast Python 3.5+ web micro-framework integrated with pipelining HTTP server based on uvloop and picohttpparser.</li>\n<li>We spoke about sanic recently. Apparently this is much faster.</li>\n<li>https://github.com/squeaky-pl/japronto 2.6k stars</li>\n<li>Is it possible to hit a million requests per second with Python? Probably not until recently.</li>\n<li>Covers perf improvements found in 3.6 and coming in 3.7.</li>\n<li>It lets you do both synchronous and asynchronous programming thanks to asyncio. And it\u2019s shamelessly fast. Even faster than NodeJS and Go.</li>\n<li>Japronto tries hard to delay creation of Python counterparts of its internal structures until asked explicitly. For example, a headers dictionary won\u2019t be created until it\u2019s requested in a view.</li>\n</ul>\n\n<p><strong>Brian#5:</strong> <a href=\"https://rethinkdb.com/blog/rethinkdb-joins-linux-foundation/\"><strong>RethinkDB is alive and well</strong></a></p>\n\n<ul>\n<li>RethinkDB joins The Linux Foundation\n<ul>\n<li>https://rethinkdb.com/blog/rethinkdb-joins-linux-foundation/</li>\n</ul></li>\n<li>The liberation of RethinkDB\n<ul>\n<li>https://www.joyent.com/blog/the-liberation-of-rethinkdb</li>\n</ul></li>\n<li>Company behind RethinkDB shut down Sept 2016</li>\n<li>Announced today that Cloud Native Computing Foundation purchased the rights to source code and contributed it to the Linux Foundation under Apache license ASLv2.</li>\n<li>Website, GitHub org, social media accounts will continue to operate.</li>\n<li>They can take donations, and stripe has ponied up 25k in donation matching.</li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"https://medium.mybridge.co/python-top-10-articles-for-the-past-year-v-2017-6033ae8c65c9#.mhn051vv5\"><strong>Python Top 10 Articles for the Past Year (v.2017)</strong></a></p>\n\n<ol>\n<li>The Hitchhiker\u2019s Guide to Python: Best practices guidebook written for Humans.</li>\n<li>Scipy Lecture Notes\u200a\u2014\u200aLearn numerics, science, and data with Python.</li>\n<li>30 Essential Python Tips and Tricks for Programmers.</li>\n<li>Computational and Inferential Thinking for Data Science. Courtesy of UC Berkeley</li>\n<li>Welcome to Python cheatsheet.</li>\n<li>Data Mining in Python: A Guide.</li>\n<li>Python FAQ: Why should I use Python 3? (by eevee)</li>\n<li>An Introduction to Stock Market Data Analysis with Python</li>\n<li>NumPy Tutorial: Data analysis with Python.</li>\n<li>Build Your First Python and Django Application</li>\n</ol>\n\n<p><strong>Michael: Follow up on RHL:</strong> <a href=\"https://developers.redhat.com/products/softwarecollections/hello-world/\"><strong>Red Hat Software Collections</strong></a>\nThank you <a href=\"http://disq.us/p/1fua8rv\">Chip Warden</a></p>\n\n<ul>\n<li>The latest, stable updates of development technologies for Red Hat Enterprise Linux</li>\n<li>Add latest for:\n<ul>\n<li>Node </li>\n<li>Perl </li>\n<li>PHP </li>\n<li>Python [YES! Python 3]</li>\n<li>Ruby</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 07 Feb 2017 00:00:00 -0800", "published_parsed": [2017, 2, 7, 8, 0, 0, 1, 38, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Expanding your Python mental model and serving millions of requests per second with Python", "itunes_episode": "12", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 12, recorded on February 6th, 2017. In this episode we discuss expanding your Python mental model and serving millions of requests per second with Python."}], "itunes_duration": "00:19:04"}}, "#11 Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation": {"info": {"title": "#11 Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#11 Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/11/django-2.0-is-dropping-python-2-entirely-pipenv-for-profile-functionality-and-pythonic-home-automation"}, {"length": "20213477", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/11/django-2.0-is-dropping-python-2-entirely-pipenv-for-profile-functionality-and-pythonic-home-automation.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/11/django-2.0-is-dropping-python-2-entirely-pipenv-for-profile-functionality-and-pythonic-home-automation", "id": "https://pythonbytes.fm/episodes/download/11/django-2.0-is-dropping-python-2-entirely-pipenv-for-profile-functionality-and-pythonic-home-automation.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 11, recorded on <strong>January 30th, 2017</strong>.  </p>\n\n<p><strong>#1 (Brian) <a href=\"https://www.kennethreitz.org/essays/announcing-pipenv\">pipenv</a> - Pipfile, pip, and virtualenv</strong></p>\n\n<ul>\n<li><a href=\"https://www.kennethreitz.org/essays/announcing-pipenv\">announcement from Kenneth Reitz</a> </li>\n<li><a href=\"https://www.reddit.com/r/Python/comments/5pmb8o/announcing_pipenv_from_kenneth_reitz/\">reddit thread</a> </li>\n<li>Features\n<ul>\n<li>Automatically finds your project home, recursively, by looking for a Pipfile.</li>\n<li>Automatically generates a Pipfile, if one doesn't exist.</li>\n<li>Automatically generates a Pipfile.lock, if one doesn't exist.</li>\n<li>Automatically creates a virtualenv in a standard location (project/.venv).</li>\n<li>Automatically adds packages to a Pipfile when they are installed.</li>\n<li>Automatically removes packages from a Pipfile when they are un-installed.</li>\n<li>Also automatically updates pip.</li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"https://news.ycombinator.com/item?id=13433927\"><strong>Django 2.0 is dropping support for legacy Python</strong></a></p>\n\n<ul>\n<li>Django changing docs to default to Python 3</li>\n<li>The next release, Django 1.11, will be a long-term support release, and the one after that, Django 2.0, will no longer support Python 2.</li>\n</ul>\n\n<p><strong>#3 (Brian)</strong> <a href=\"https://attrs.readthedocs.io/en/stable/overview.html\"><strong>attrs</strong></a></p>\n\n<ul>\n<li>Hynek Schlawack</li>\n<li>pypi: <a href=\"https://pypi.python.org/pypi/attrs\">https://pypi.python.org/pypi/attrs</a></li>\n<li>readthedocs: <a href=\"https://attrs.readthedocs.io/en/stable/overview.html\">https://attrs.readthedocs.io/en/stable/overview.html</a></li>\n<li>I know this has been around for a while. But I\u2019ve just stumbled across it while reading a <a href=\"http://www.coglib.com/~icordasc/blog/2017/01/some-better-practices-for-using-requests-in-api-clients.html\">blog post about requests</a>, which was good, but we\u2019ve covered requests a lot lately, so I\u2019m gonna skip that article today.</li>\n<li>pip install attrs, with an s, even though you import without the s</li>\n<li>Does all of the grunt work of writing dunder functions for you so you can write classes with a small amount of code that behave like classes and objects should. Especially if you come from a C++ background, this makes writing classes more intuitive.</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://alimanfoo.github.io/2017/01/23/go-faster-python.html\"><strong>Go faster Python</strong></a></p>\n\n<ul>\n<li>This blog post gives an introduction to some techniques for benchmarking, profiling and optimising Python code.</li>\n<li>If you have a Python program that\u2019s running slowly, what are your options?\n<ul>\n<li>Benchmarking and profiling</li>\n<li>Our intuition is often wrong</li>\n<li>Benchmarking: %time, %timeit, timeit</li>\n<li>Function profiling: %prun, cProfile</li>\n<li>Line profiling: %lprun, line_profiler (requires  <a href=\"https://github.com/rkern/line_profiler\">line_profiler</a>)</li>\n<li>Cython</li>\n</ul></li>\n</ul>\n\n<p><strong>#5 (Brian):</strong> <strong>Getting Python 3 into distributions</strong></p>\n\n<ul>\n<li>Not an article but a couple of pleas.</li>\n<li>Many OS distributions, including Red Hat, ship with Python 2.7.</li>\n<li>Many developers don\u2019t have the authority to install Python 3.x for projects.</li>\n<li>Two pleas:\n<ul>\n<li>distributions: ship with both if you have to, but let 3.6  be an option for people.</li>\n<li>companies: install Python 3.6 and let some projects use that</li>\n</ul></li>\n<li>We can\u2019t just encourage users to switch to Python 3 if it\u2019s not their choice.</li>\n</ul>\n\n<p><strong>#6 (Michael)</strong> <a href=\"https://home-assistant.io/\"><strong>Home Assistant</strong></a></p>\n\n<ul>\n<li>Home Assistant is an open-source home automation platform running on Python 3. \n<ul>\n<li>Track and control all devices at home and automate control</li>\n<li>Installation in less than a minute.</li>\n<li>Observe: Track the state of all the devices in your home, so you don't have to.</li>\n<li>Control: All your devices from a single, mobile-friendly, interface.</li>\n<li>Automate: Setup advanced rules to control devices and bring your home alive.</li>\n<li>have the lights turn on when the sun sets and you are home?</li>\n<li>have the lights turn on when anyone comes home and it is dark?</li>\n<li>dim the lights when you start watching a movie on your Chromecast?</li>\n<li>receive a message when the lights turn on while you are not at home?</li>\n</ul></li>\n<li>Demo: <a href=\"https://home-assistant.io/demo/\">https://home-assistant.io/demo/</a></li>\n<li><a href=\"https://aiohttp.readthedocs.io/en/stable/\">aiohttp</a>: Asynchronous HTTP Client/Server</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 11, recorded on <strong>January 30th, 2017</strong>.  </p>\n\n<p><strong>#1 (Brian) <a href=\"https://www.kennethreitz.org/essays/announcing-pipenv\">pipenv</a> - Pipfile, pip, and virtualenv</strong></p>\n\n<ul>\n<li><a href=\"https://www.kennethreitz.org/essays/announcing-pipenv\">announcement from Kenneth Reitz</a> </li>\n<li><a href=\"https://www.reddit.com/r/Python/comments/5pmb8o/announcing_pipenv_from_kenneth_reitz/\">reddit thread</a> </li>\n<li>Features\n<ul>\n<li>Automatically finds your project home, recursively, by looking for a Pipfile.</li>\n<li>Automatically generates a Pipfile, if one doesn't exist.</li>\n<li>Automatically generates a Pipfile.lock, if one doesn't exist.</li>\n<li>Automatically creates a virtualenv in a standard location (project/.venv).</li>\n<li>Automatically adds packages to a Pipfile when they are installed.</li>\n<li>Automatically removes packages from a Pipfile when they are un-installed.</li>\n<li>Also automatically updates pip.</li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"https://news.ycombinator.com/item?id=13433927\"><strong>Django 2.0 is dropping support for legacy Python</strong></a></p>\n\n<ul>\n<li>Django changing docs to default to Python 3</li>\n<li>The next release, Django 1.11, will be a long-term support release, and the one after that, Django 2.0, will no longer support Python 2.</li>\n</ul>\n\n<p><strong>#3 (Brian)</strong> <a href=\"https://attrs.readthedocs.io/en/stable/overview.html\"><strong>attrs</strong></a></p>\n\n<ul>\n<li>Hynek Schlawack</li>\n<li>pypi: <a href=\"https://pypi.python.org/pypi/attrs\">https://pypi.python.org/pypi/attrs</a></li>\n<li>readthedocs: <a href=\"https://attrs.readthedocs.io/en/stable/overview.html\">https://attrs.readthedocs.io/en/stable/overview.html</a></li>\n<li>I know this has been around for a while. But I\u2019ve just stumbled across it while reading a <a href=\"http://www.coglib.com/~icordasc/blog/2017/01/some-better-practices-for-using-requests-in-api-clients.html\">blog post about requests</a>, which was good, but we\u2019ve covered requests a lot lately, so I\u2019m gonna skip that article today.</li>\n<li>pip install attrs, with an s, even though you import without the s</li>\n<li>Does all of the grunt work of writing dunder functions for you so you can write classes with a small amount of code that behave like classes and objects should. Especially if you come from a C++ background, this makes writing classes more intuitive.</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://alimanfoo.github.io/2017/01/23/go-faster-python.html\"><strong>Go faster Python</strong></a></p>\n\n<ul>\n<li>This blog post gives an introduction to some techniques for benchmarking, profiling and optimising Python code.</li>\n<li>If you have a Python program that\u2019s running slowly, what are your options?\n<ul>\n<li>Benchmarking and profiling</li>\n<li>Our intuition is often wrong</li>\n<li>Benchmarking: %time, %timeit, timeit</li>\n<li>Function profiling: %prun, cProfile</li>\n<li>Line profiling: %lprun, line_profiler (requires  <a href=\"https://github.com/rkern/line_profiler\">line_profiler</a>)</li>\n<li>Cython</li>\n</ul></li>\n</ul>\n\n<p><strong>#5 (Brian):</strong> <strong>Getting Python 3 into distributions</strong></p>\n\n<ul>\n<li>Not an article but a couple of pleas.</li>\n<li>Many OS distributions, including Red Hat, ship with Python 2.7.</li>\n<li>Many developers don\u2019t have the authority to install Python 3.x for projects.</li>\n<li>Two pleas:\n<ul>\n<li>distributions: ship with both if you have to, but let 3.6  be an option for people.</li>\n<li>companies: install Python 3.6 and let some projects use that</li>\n</ul></li>\n<li>We can\u2019t just encourage users to switch to Python 3 if it\u2019s not their choice.</li>\n</ul>\n\n<p><strong>#6 (Michael)</strong> <a href=\"https://home-assistant.io/\"><strong>Home Assistant</strong></a></p>\n\n<ul>\n<li>Home Assistant is an open-source home automation platform running on Python 3. \n<ul>\n<li>Track and control all devices at home and automate control</li>\n<li>Installation in less than a minute.</li>\n<li>Observe: Track the state of all the devices in your home, so you don't have to.</li>\n<li>Control: All your devices from a single, mobile-friendly, interface.</li>\n<li>Automate: Setup advanced rules to control devices and bring your home alive.</li>\n<li>have the lights turn on when the sun sets and you are home?</li>\n<li>have the lights turn on when anyone comes home and it is dark?</li>\n<li>dim the lights when you start watching a movie on your Chromecast?</li>\n<li>receive a message when the lights turn on while you are not at home?</li>\n</ul></li>\n<li>Demo: <a href=\"https://home-assistant.io/demo/\">https://home-assistant.io/demo/</a></li>\n<li><a href=\"https://aiohttp.readthedocs.io/en/stable/\">aiohttp</a>: Asynchronous HTTP Client/Server</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 31 Jan 2017 00:00:00 -0800", "published_parsed": [2017, 1, 31, 8, 0, 0, 1, 31, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Django 2.0 is dropping Python 2 entirely, pipenv for profile functionality, and Pythonic home automation", "itunes_episode": "11", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 11, recorded on **January 30th, 2017**."}], "itunes_duration": "00:20:55"}}, "#10 Dismissing Python's Garbage Collection,  PyPI Name Reservations, and Hackers Exfiltrate US Government Data to Save Itself": {"info": {"title": "#10 Dismissing Python's Garbage Collection,  PyPI Name Reservations, and Hackers Exfiltrate US Government Data to Save Itself", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#10 Dismissing Python's Garbage Collection,  PyPI Name Reservations, and Hackers Exfiltrate US Government Data to Save Itself"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/10/dismissing-python-s-garbage-collection-pypi-name-reservations-and-hackers-exfiltrate-us-government-data-to-save-itself"}, {"length": "24863691", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/10/dismissing-python-s-garbage-collection-pypi-name-reservations-and-hackers-exfiltrate-us-government-data-to-save-itself.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/10/dismissing-python-s-garbage-collection-pypi-name-reservations-and-hackers-exfiltrate-us-government-data-to-save-itself", "id": "https://pythonbytes.fm/episodes/download/10/dismissing-python-s-garbage-collection-pypi-name-reservations-and-hackers-exfiltrate-us-government-data-to-save-itself.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 10, recorded on <strong>Monday, January 23rd, 2016</strong>.   </p>\n\n<p><strong>#1 (Brian): <a href=\"http://www.blackarbs.com/blog/advanced-time-series-plots-in-python/1/6/2017\">Advanced Time Series Plots in Python</a> from blackarbs.com</strong></p>\n\n<ul>\n<li>matplotlib 2.0 official release on Jan 17\n<ul>\n<li><a href=\"https://pythonbytes.fm/7\">mentioned it was coming in episode 7</a></li>\n<li><a href=\"http://matplotlib.org/\">matplotlib.org</a></li>\n</ul></li>\n<li>A tutorial for using pandas, numpy, matplotlib, and seaborn for collecting, analyzing, and plotting time series plots.\n<ul>\n<li>start with an empty xy chart</li>\n<li>grab some yahoo finance data, do some manipulation, and plot it.</li>\n<li>add shaded areas, in the example, recession times</li>\n<li>chart titles</li>\n<li>axis labels</li>\n<li>legend styling</li>\n<li>horizontal line, at the 0 value, in this example</li>\n<li>formatting x and y tick labels</li>\n<li>controlling the font</li>\n<li>turning on data points by specifying a marker shape</li>\n<li>add some chart annotations with arrows pointing to specific data points</li>\n<li>add a logo and watermark over the top of everything</li>\n</ul></li>\n<li><a href=\"http://seaborn.pydata.org/\">seaborn</a> is a statistical data visualization tool for use with matplotlib</li>\n<li>See the seaborn site has tutorials for:\n<ul>\n<li>Style functions, Color palettes, Distribution plots, Regression plots, Categorical plots, and Axis grid objects. </li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"https://engineering.instagram.com/dismissing-python-garbage-collection-at-instagram-4dca40b29172#.q23x90dch\"><strong>Dismissing Python Garbage Collection at Instagram</strong></a></p>\n\n<ul>\n<li>By dismissing the Python garbage collection (GC) mechanism, which reclaims memory by collecting and freeing unused data, Instagram can run 10% more efficiently.</li>\n<li>How We Run Our Web Server: Instagram\u2019s web server runs on Django in a multi-process mode with a master process that forks itself to create dozens of worker processes that take incoming user requests. For the application server, we use uWSGI with pre-fork mode to leverage memory sharing between master and worker processes. </li>\n<li>Attempt 1: Disable reference count on code objects (no effect)</li>\n<li>Attempt 2: Let\u2019s try disabling GC\n<ul>\n<li>With that, we successfully raised the shared memory of each worker process from 140MB to 225MB, and the total memory usage on the host dropped by 8GB per machine. This saved 25% RAM for the whole Django fleet. With such big head room, we're capable of running a lot more processes or running with a much higher RSS memory threshold. In effect, this improves the throughput of Django tier by more than 10%.</li>\n</ul></li>\n<li>Attempt 3: Completely shutdown GC takes churns (bad)</li>\n<li>Attempt 4: Final step for shutting down GC: No cleanup (success)</li>\n</ul>\n\n<p><strong>#3 (Brian): <a href=\"https://snarky.ca/my-experience-with-type-hints-and-mypy/\">My experience with type hints and mypy</a></strong></p>\n\n<p>Brett Cannon on his blog <a href=\"https://snarky.ca/my-experience-with-type-hints-and-mypy/\">snarky.ca</a></p>\n\n<ul>\n<li>Here's an example including the pull request of changes, of a project adding static types and static analysis of those types.</li>\n<li>Trying to use type hints to increase code quality and readability for a project.</li>\n<li>The project is CLA enforcement bot for the PSF, to make sure that all pull requests contributions to a python project is done by someone who has signed a PSF Contributor Licence Agreement.</li>\n<li>Process\n<ul>\n<li>Run mypy against your code with no types, then slowly add types, one object at a time.</li>\n<li><a href=\"http://mypy-lang.org/\">mypy</a> is a static analysis tool to make sure your typehints are correct. </li>\n</ul></li>\n<li>Issues:\n<ul>\n<li>supports Python 3.5, but not new types in Python 3.6, specifically typying. Collection. Workaround was to use typing.AbstractSet</li>\n<li>f-strings not supported yet, but coming</li>\n<li>Skipped type hinting for test suite. </li>\n<li>It wouldn't occur to me to even try to add static types to tests.</li>\n<li>Most linters would have caught the problems as well as mypy.</li>\n</ul></li>\n<li>Benefit\n<ul>\n<li>The act of adding static types increased the readability of the code. Did not detract from readability.</li>\n<li>\u201cWhat mypy really got me was better documentation. While I was adding the type hints there were a couple of times where I had to examine the code to realize what the appropriate type was. Now that I have the functions and methods all hinted I don't have to guess anymore. That should make long-term maintenance a bit easier\u201d</li>\n</ul></li>\n<li>Conclusion\n\"\u2026would I bother typing new Python 3 code? \u2026 yes once mypy supports f-strings. \n\u201cWhen I design an API I already have to think about what type of objects would be acceptable, so quickly writing down my assumptions doesn't hurt anything, it's relatively quick, and it benefits anyone having to work with my code. But I also wouldn't contort my code to fit within the confines of type hints (i.e. if type hints forces me to write cleaner code then that's great, but if something is so dynamic that it can't have type hints then that's fine and I'll happily use typing.Any as an escape hatch). \u201c\n\u201cIn the end I view type hints as enhanced documentation that has tooling to help verify that the documentation about types is accurate. And for that use-case I see type hints worth doing and not at all a burden.\u201d</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc#.imwnkwoux\"><strong>Understanding the underscore( _ ) of Python</strong></a></p>\n\n<ul>\n<li>The <em>underscore</em> (_) is special in Python.</li>\n<li>If you are python programmer, for _ in range(10) , __init__(self) like syntax may be familiar.</li>\n<li>There are 5 cases for using the underscore in Python.\n<ul>\n<li>For storing the value of last expression in interpreter.</li>\n<li>For ignoring the specific values. (so-called \u201cI don\u2019t care\u201d)</li>\n<li>To give special meanings and functions to name of vartiables or functions.</li>\n<li>_protected-ish, __<em>private-ish, conflicting: in_</em>, __magic__</li>\n<li>To use as \u2018Internationalization(i18n)\u2019 or \u2018Localization(l10n)\u2019 functions.</li>\n<li>To separate the digits of number literal value.</li>\n</ul></li>\n</ul>\n\n<p><strong>#5: (Brian): <a href=\"https://www.python.org/dev/peps/pep-0541/\">PEP 541 -- Package Index Name Retention</a></strong>\nDraft status currently; was just submitted on the 12th by Donald Stufft.\n\u201c Abstract:\nThis PEP proposes an extension to the Terms of Use of the Package Index, clarifying expectations of package owners regarding ownership of a package name on the Package Index, specifically with regards to conflict resolution.</p>\n\n<p>Existing package repositories such as CPAN , NPM , and GitHub will be investigated as prior art in this field.</p>\n\n<p>Rationale\nGiven that package names on the Index are sharing a single flat namespace, a unique name is a finite resource. The growing age of the Package Index causes a constant rise of situations of conflict between the current use of the name and a different suggested use of the same name.</p>\n\n<p>This document aims to provide general guidelines for solving the most typical cases of such conflicts.\u201d</p>\n\n<p><strong>#6 (Michael):</strong> <a href=\"https://flipboard.com/@flipboard/flip.it%2FIRwdse-hackers-downloaded-us-government-climat/f-1d75a23f08%2Fqz.com\"><strong>Hackers downloaded US government climate data and stored it on European servers as Trump was being inaugurated</strong></a></p>\n\n<ul>\n<li>As Donald Trump was sworn into office as the new president of the US on Jan. 20, a group of around 60 programmers and scientists were gathered in the Department of Information Studies building at the University of California-Los Angeles, harvesting government data.</li>\n<li>A spreadsheet detailed their targets: \n<ul>\n<li>Webpages dedicated to the Department of Energy\u2019s solar power initiative</li>\n<li>Energy Information Administration data sets that compared fossil fuels to renewable energy sources</li>\n<li>fuel cell research from the National Renewable Energy Laboratory, to name a few out of hundreds.</li>\n</ul></li>\n<li>Volunteer \u201cdata rescue\u201d events in Toronto, Philadelphia, Chicago, Indianapolis, and Michigan over the last few weeks have managed to scrape hundreds of thousands of pages off of EPA.gov, NASA.gov, DOE.gov, and whitehouse.gov, uploading them to the Internet Archive. Another is planned for early February at New York University.</li>\n<li>Suddenly, at exactly noon on Friday as Trump was sworn in, and just as the UCLA event kicked off, some of their fears began to come true: The climate change-related pages on whitehouse.gov disappeared.</li>\n<li>There will, thanks to Michael Riedyk, CEO of the Canadian data-archiving company Page Freezer, also be a copy stored outside the US.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 10, recorded on <strong>Monday, January 23rd, 2016</strong>.   </p>\n\n<p><strong>#1 (Brian): <a href=\"http://www.blackarbs.com/blog/advanced-time-series-plots-in-python/1/6/2017\">Advanced Time Series Plots in Python</a> from blackarbs.com</strong></p>\n\n<ul>\n<li>matplotlib 2.0 official release on Jan 17\n<ul>\n<li><a href=\"https://pythonbytes.fm/7\">mentioned it was coming in episode 7</a></li>\n<li><a href=\"http://matplotlib.org/\">matplotlib.org</a></li>\n</ul></li>\n<li>A tutorial for using pandas, numpy, matplotlib, and seaborn for collecting, analyzing, and plotting time series plots.\n<ul>\n<li>start with an empty xy chart</li>\n<li>grab some yahoo finance data, do some manipulation, and plot it.</li>\n<li>add shaded areas, in the example, recession times</li>\n<li>chart titles</li>\n<li>axis labels</li>\n<li>legend styling</li>\n<li>horizontal line, at the 0 value, in this example</li>\n<li>formatting x and y tick labels</li>\n<li>controlling the font</li>\n<li>turning on data points by specifying a marker shape</li>\n<li>add some chart annotations with arrows pointing to specific data points</li>\n<li>add a logo and watermark over the top of everything</li>\n</ul></li>\n<li><a href=\"http://seaborn.pydata.org/\">seaborn</a> is a statistical data visualization tool for use with matplotlib</li>\n<li>See the seaborn site has tutorials for:\n<ul>\n<li>Style functions, Color palettes, Distribution plots, Regression plots, Categorical plots, and Axis grid objects. </li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"https://engineering.instagram.com/dismissing-python-garbage-collection-at-instagram-4dca40b29172#.q23x90dch\"><strong>Dismissing Python Garbage Collection at Instagram</strong></a></p>\n\n<ul>\n<li>By dismissing the Python garbage collection (GC) mechanism, which reclaims memory by collecting and freeing unused data, Instagram can run 10% more efficiently.</li>\n<li>How We Run Our Web Server: Instagram\u2019s web server runs on Django in a multi-process mode with a master process that forks itself to create dozens of worker processes that take incoming user requests. For the application server, we use uWSGI with pre-fork mode to leverage memory sharing between master and worker processes. </li>\n<li>Attempt 1: Disable reference count on code objects (no effect)</li>\n<li>Attempt 2: Let\u2019s try disabling GC\n<ul>\n<li>With that, we successfully raised the shared memory of each worker process from 140MB to 225MB, and the total memory usage on the host dropped by 8GB per machine. This saved 25% RAM for the whole Django fleet. With such big head room, we're capable of running a lot more processes or running with a much higher RSS memory threshold. In effect, this improves the throughput of Django tier by more than 10%.</li>\n</ul></li>\n<li>Attempt 3: Completely shutdown GC takes churns (bad)</li>\n<li>Attempt 4: Final step for shutting down GC: No cleanup (success)</li>\n</ul>\n\n<p><strong>#3 (Brian): <a href=\"https://snarky.ca/my-experience-with-type-hints-and-mypy/\">My experience with type hints and mypy</a></strong></p>\n\n<p>Brett Cannon on his blog <a href=\"https://snarky.ca/my-experience-with-type-hints-and-mypy/\">snarky.ca</a></p>\n\n<ul>\n<li>Here's an example including the pull request of changes, of a project adding static types and static analysis of those types.</li>\n<li>Trying to use type hints to increase code quality and readability for a project.</li>\n<li>The project is CLA enforcement bot for the PSF, to make sure that all pull requests contributions to a python project is done by someone who has signed a PSF Contributor Licence Agreement.</li>\n<li>Process\n<ul>\n<li>Run mypy against your code with no types, then slowly add types, one object at a time.</li>\n<li><a href=\"http://mypy-lang.org/\">mypy</a> is a static analysis tool to make sure your typehints are correct. </li>\n</ul></li>\n<li>Issues:\n<ul>\n<li>supports Python 3.5, but not new types in Python 3.6, specifically typying. Collection. Workaround was to use typing.AbstractSet</li>\n<li>f-strings not supported yet, but coming</li>\n<li>Skipped type hinting for test suite. </li>\n<li>It wouldn't occur to me to even try to add static types to tests.</li>\n<li>Most linters would have caught the problems as well as mypy.</li>\n</ul></li>\n<li>Benefit\n<ul>\n<li>The act of adding static types increased the readability of the code. Did not detract from readability.</li>\n<li>\u201cWhat mypy really got me was better documentation. While I was adding the type hints there were a couple of times where I had to examine the code to realize what the appropriate type was. Now that I have the functions and methods all hinted I don't have to guess anymore. That should make long-term maintenance a bit easier\u201d</li>\n</ul></li>\n<li>Conclusion\n\"\u2026would I bother typing new Python 3 code? \u2026 yes once mypy supports f-strings. \n\u201cWhen I design an API I already have to think about what type of objects would be acceptable, so quickly writing down my assumptions doesn't hurt anything, it's relatively quick, and it benefits anyone having to work with my code. But I also wouldn't contort my code to fit within the confines of type hints (i.e. if type hints forces me to write cleaner code then that's great, but if something is so dynamic that it can't have type hints then that's fine and I'll happily use typing.Any as an escape hatch). \u201c\n\u201cIn the end I view type hints as enhanced documentation that has tooling to help verify that the documentation about types is accurate. And for that use-case I see type hints worth doing and not at all a burden.\u201d</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc#.imwnkwoux\"><strong>Understanding the underscore( _ ) of Python</strong></a></p>\n\n<ul>\n<li>The <em>underscore</em> (_) is special in Python.</li>\n<li>If you are python programmer, for _ in range(10) , __init__(self) like syntax may be familiar.</li>\n<li>There are 5 cases for using the underscore in Python.\n<ul>\n<li>For storing the value of last expression in interpreter.</li>\n<li>For ignoring the specific values. (so-called \u201cI don\u2019t care\u201d)</li>\n<li>To give special meanings and functions to name of vartiables or functions.</li>\n<li>_protected-ish, __<em>private-ish, conflicting: in_</em>, __magic__</li>\n<li>To use as \u2018Internationalization(i18n)\u2019 or \u2018Localization(l10n)\u2019 functions.</li>\n<li>To separate the digits of number literal value.</li>\n</ul></li>\n</ul>\n\n<p><strong>#5: (Brian): <a href=\"https://www.python.org/dev/peps/pep-0541/\">PEP 541 -- Package Index Name Retention</a></strong>\nDraft status currently; was just submitted on the 12th by Donald Stufft.\n\u201c Abstract:\nThis PEP proposes an extension to the Terms of Use of the Package Index, clarifying expectations of package owners regarding ownership of a package name on the Package Index, specifically with regards to conflict resolution.</p>\n\n<p>Existing package repositories such as CPAN , NPM , and GitHub will be investigated as prior art in this field.</p>\n\n<p>Rationale\nGiven that package names on the Index are sharing a single flat namespace, a unique name is a finite resource. The growing age of the Package Index causes a constant rise of situations of conflict between the current use of the name and a different suggested use of the same name.</p>\n\n<p>This document aims to provide general guidelines for solving the most typical cases of such conflicts.\u201d</p>\n\n<p><strong>#6 (Michael):</strong> <a href=\"https://flipboard.com/@flipboard/flip.it%2FIRwdse-hackers-downloaded-us-government-climat/f-1d75a23f08%2Fqz.com\"><strong>Hackers downloaded US government climate data and stored it on European servers as Trump was being inaugurated</strong></a></p>\n\n<ul>\n<li>As Donald Trump was sworn into office as the new president of the US on Jan. 20, a group of around 60 programmers and scientists were gathered in the Department of Information Studies building at the University of California-Los Angeles, harvesting government data.</li>\n<li>A spreadsheet detailed their targets: \n<ul>\n<li>Webpages dedicated to the Department of Energy\u2019s solar power initiative</li>\n<li>Energy Information Administration data sets that compared fossil fuels to renewable energy sources</li>\n<li>fuel cell research from the National Renewable Energy Laboratory, to name a few out of hundreds.</li>\n</ul></li>\n<li>Volunteer \u201cdata rescue\u201d events in Toronto, Philadelphia, Chicago, Indianapolis, and Michigan over the last few weeks have managed to scrape hundreds of thousands of pages off of EPA.gov, NASA.gov, DOE.gov, and whitehouse.gov, uploading them to the Internet Archive. Another is planned for early February at New York University.</li>\n<li>Suddenly, at exactly noon on Friday as Trump was sworn in, and just as the UCLA event kicked off, some of their fears began to come true: The climate change-related pages on whitehouse.gov disappeared.</li>\n<li>There will, thanks to Michael Riedyk, CEO of the Canadian data-archiving company Page Freezer, also be a copy stored outside the US.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 23 Jan 2017 00:00:00 -0800", "published_parsed": [2017, 1, 23, 8, 0, 0, 0, 23, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Dismissing Python's Garbage Collection,  PyPI Name Reservations, and Hackers Exfiltrate US Government Data to Save Itself", "itunes_episode": "10", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 10, recorded on **Monday, January 23rd, 2016**."}], "itunes_duration": "00:25:45"}}, "#9 Walking with async coroutines, diving deep into requests, and a universe of options (for AIs)": {"info": {"title": "#9 Walking with async coroutines, diving deep into requests, and a universe of options (for AIs)", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#9 Walking with async coroutines, diving deep into requests, and a universe of options (for AIs)"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/9/walking-with-async-coroutines-diving-deep-into-requests-and-a-universe-of-options-for-ais"}, {"length": "22843493", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/9/walking-with-async-coroutines-diving-deep-into-requests-and-a-universe-of-options-for-ais.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/9/walking-with-async-coroutines-diving-deep-into-requests-and-a-universe-of-options-for-ais", "id": "https://pythonbytes.fm/episodes/download/9/walking-with-async-coroutines-diving-deep-into-requests-and-a-universe-of-options-for-ais.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 9, recorded on <strong>Tuesday, January 17th</strong>. In this episode we discuss <strong>walking with async coroutines, diving deep into requests, and a universe of options (for AIs)</strong>.  </p>\n\n<p><strong>#1 (Brian): <a href=\"http://pgbovine.net/python-async-io-walkthrough.htm\">Python Asynchronous I/O Walkthrough</a></strong></p>\n\n<ul>\n<li>In July, there was an open source book published called <a href=\"http://aosabook.org/en/index.html\">500 Lines or Less</a>.</li>\n<li>One of the chapters was called <a href=\"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html\">A Web Crawler With asyncio Coroutines</a>, written by A. Jesse Jiryu Davis and Guido van Rossum. It explains async networking, showing how non-blocking sockets work and how Python 3\u2019s coroutines improve asynchronous network programs.</li>\n<li>As mentioned recently on A. Jesse Jiryu Davis\u2019s blog <a href=\"https://emptysqua.re/blog/video-walkthrough-web-crawler-with-coroutines/\">emptysqua.re</a>, the chapter may be difficult for a novice or intermediate developer to follow.</li>\n<li>This month, Philip Guo, an Assistant Professor at UC San Diego, has released an 8 part video series, 90 minutes total, so on the order of 10 minutes each, that walks through the article, including some coding examples that he walks through.</li>\n<li>Since async is something that takes a while to get your head around, I appreciate the multi-sensory education experience. Listening to Philip talk about it, watching him walk through the code and talk about the article, and having the article as a reference, is super helpful.</li>\n<li><a href=\"https://talkpython.fm/episodes/show/22/cpython-internals-and-learning-python-with-pythontutor.com\">Talk Python #22: CPython Internals and Learning Python with pythontutor.com</a></li>\n<li><a href=\"https://talkpython.fm/episodes/show/69/write-an-excellent-programming-blog\">Talk Python #69: Write an Excellent Programming Blog</a></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"http://www.infoworld.com/article/3146967/application-development/4-likely-future-twists-for-python.html\"><strong>4 likely future twists for Python</strong></a>\nby <em>Serdar Yegulalp</em></p>\n\n<ol>\n<li><p><strong>Python 2.x may live on</strong></p>\n\n<ul>\n<li>Python 2.x might also get a continued lease on life if independent developers decide to keep the branch going on their own.</li>\n<li>At least one such effort exists -- Naftali Harris's \"<a href=\"https://github.com/naftaliharris/python2.8\">Python 2.8</a>\" project, which backports improvements and bug fixes from Python 3 into the Python 2.x branch.</li>\n<li>it makes sense to make the 3.x leap, but it's likely we'll see a lot of keep-the-2.x-flame-alive efforts</li>\n</ul></li>\n<li><p><strong>Requirements.txt may be replaced with something better</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/pypa/pipfile\">Pipfile</a> has been proposed as a possible replacement by the folks at the Python Packaging Authority, which is \"the working group that maintains many of the relevant projects in Python packaging.\"</li>\n<li>Pipfile will be superior to requirements.txt file in a number of ways:\n    1. TOML syntax for declaring all types of Python dependencies.\n    2. One Pipfile (as opposed to multiple requirements.txt files).\n    3. Existing requirements files tend to proliferate into multiple files - e.g. dev-requirements.txt, test-requirements.txt, etc. - but a Pipfile will allow seamlessly specifying groups of dependencies in one place.\n    4. This will be surfaced as only two built-in groups (default &amp; development). (see note below)\n    5. Fully specified (and deterministic) environments in the form of Pipfile.freeze. A deployed application can then be completely redeployed with the same exact versions of all recursive dependencies, by referencing the Pipfile.freeze file.</li>\n<li><p>Example pipfile:  </p>\n\n<p>[[source]]\nurl = 'https://pypi.org/'\nverify_ssl = true</p>\n\n<p>[requires]\npython_version = '2.7'</p>\n\n<p>[packages]\nrequests = { extras = ['socks'] }\nDjango = '>1.10'\npinax = { git = 'git://github.com/pinax/pinax.git', ref = '1.4', editable = true }</p>\n\n<p>[dev-packages]\nnose = '*'  </p></li>\n</ul></li>\n<li><p><strong>Python could get more enterprise editions</strong></p>\n\n<ul>\n<li>As the language has gained traction across the board, it's also appearing in versions aimed specifically at solving enterprise-grade problems.</li>\n<li>Intel, for instance, elected to <a href=\"http://www.infoworld.com/article/3117239/data-science/intels-python-distribution-turbocharges-data-science.html\">repackage</a> the Anaconda science-and-math distribution of Python after outfitting it with extensions that give it a speed boost, albeit only on Intel processors. </li>\n<li>Anaconda is itself produced by Continuum Analytics, no stranger to enterprise data-analysis needs.</li>\n</ul></li>\n<li><strong>Python's new software repository system could lead to enterprise-friendly Python package management</strong>\n<ul>\n<li>One possibility being floated in this vein is the concept of an enterprise-grade package index for Python, as <a href=\"https://medium.com/python-pandemonium/the-trusted-packaging-index-d16986de73c6\">discussed by Cristian Medina of Nimble Storage</a>:</li>\n<li>Businesses always have a need for an on-premises, secure, encrypted and highly available distribution mechanism of compiled binaries. Together with setuptools providing various install capabilities that can cover non-Python code just as well, it seems like we could put together a decent product. Something like a Docker Trusted Registry.</li>\n<li>I\u2019m working on something here too that come out of the discussion of Talk Python #84</li>\n</ul></li>\n</ol>\n\n<p><strong>#3 (Brian) <a href=\"http://www.labri.fr/perso/nrougier/from-python-to-numpy/\">From Python to Numpy</a></strong></p>\n\n<ul>\n<li>Nicolas P. Rougier - labri.fr</li>\n<li>\u201cNicolas P. Rougier is a full-time research scientist at Inria which is the French national institute for research in computer science and control.\u201d</li>\n<li>Creative commons book for people who are intermediate level Python developers and want to use numpy for science or engineering.</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://github.com/openai/universe\"><strong>openai/universe</strong></a></p>\n\n<ul>\n<li>Universe: a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications. <a href=\"https://universe.openai.com/\">https://universe.openai.com</a></li>\n<li>Universe allows anyone to train and evaluate AI agents on an extremely wide range of real-time, complex environments.</li>\n<li>Universe makes it possible for any existing program to become an OpenAI Gym environment, without needing special access to the program's internals, source code, or APIs. \n<ul>\n<li>It does this by packaging the program into a Docker container</li>\n<li>presenting the AI with the same interface a human uses: </li>\n<li>sending keyboard</li>\n<li>mouse events</li>\n<li>receiving screen pixels</li>\n<li>Our initial release contains over 1,000 environments in which an AI agent can take actions and gather observations.</li>\n</ul></li>\n</ul>\n\n<p><strong>#5: (Brian): <a href=\"https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093\">Python requests deep dive</a></strong></p>\n\n<ul>\n<li>Anthony Shaw - on medium.com</li>\n<li>Converted a large project from httplib to requests</li>\n<li>Apache Libcloud\n<ul>\n<li>needed to provide a set of base classes that would handle HTTP and HTTPS REST/JSON, REST/XML and various other bizarre HTTP APIs. </li>\n<li>Libcloud has over 80 client libraries for every major cloud service out there. </li>\n<li>single Connection class that handles encoding and decoding of JSON, XML or Raw data.</li>\n</ul></li>\n<li>Anthony walks through the types of changes made, including authentication, session handling, testing, prepared requests, streams, \u2026 </li>\n<li>uses  <a href=\"https://github.com/openstack/requests-mock\">requests-mock</a> \n<ul>\n<li>very cool API</li>\n</ul></li>\n</ul>\n\n<p><strong>#6 (Michael):</strong> <a href=\"https://www.reddit.com/r/Python/comments/5n7p3p/whats_the_community_favorite_for_developing_osx/\">What's the community favorite for developing OSX desktop applications with Python?</a></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/user/bangeron\"><strong>bangeron</strong></a><strong>:</strong> I've been using PyQt for all my projects with a GUI: - It has a native look and feel - It's cross-platform (I do everything on macOS) - It's a whole framework, including modules for plotting charts, networking, SQL, etc. - It has <em>excellent</em> documentation. - It has a GUI editor (Qt Creator) that is pretty good, once you figure it out.</li>\n<li><a href=\"https://www.reddit.com/user/Omnius\"><strong>Omnius</strong></a>: Same but using pyside to avoid license fees.</li>\n<li><a href=\"https://www.reddit.com/user/spinwizard69\"><strong>spinwizard69</strong></a>: Use TK for simple apps! It is included with Python and avoids dependency hell.</li>\n<li><a href=\"https://www.reddit.com/user/EssaAlshammri\"><strong>EssaAlshammri</strong></a>: Take a look at <a href=\"http://pybee.org/project/projects/libraries/toga/\">Toga</a> its idea is great.</li>\n<li><a href=\"https://www.reddit.com/user/Ruditorres\"><strong>Ruditorres</strong></a>: Kivy hands down, it is pythonic, easy, and beautiful</li>\n<li><a href=\"https://www.reddit.com/user/bangeron\"><strong>bangeron</strong></a>: Kivy is anything but beautiful. At least, not without spending some time creating your own theme.</li>\n<li>Personally, I want py_electron (modeled after <a href=\"http://electron.atom.io\">electronjs</a>).</li>\n<li>Notable mention, related: <a href=\"http://cx-freeze.readthedocs.io/en/latest/releasenotes.html\">cx_Freeze released</a> (Version 5.0.1 (January 2017))</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 9, recorded on <strong>Tuesday, January 17th</strong>. In this episode we discuss <strong>walking with async coroutines, diving deep into requests, and a universe of options (for AIs)</strong>.  </p>\n\n<p><strong>#1 (Brian): <a href=\"http://pgbovine.net/python-async-io-walkthrough.htm\">Python Asynchronous I/O Walkthrough</a></strong></p>\n\n<ul>\n<li>In July, there was an open source book published called <a href=\"http://aosabook.org/en/index.html\">500 Lines or Less</a>.</li>\n<li>One of the chapters was called <a href=\"http://aosabook.org/en/500L/a-web-crawler-with-asyncio-coroutines.html\">A Web Crawler With asyncio Coroutines</a>, written by A. Jesse Jiryu Davis and Guido van Rossum. It explains async networking, showing how non-blocking sockets work and how Python 3\u2019s coroutines improve asynchronous network programs.</li>\n<li>As mentioned recently on A. Jesse Jiryu Davis\u2019s blog <a href=\"https://emptysqua.re/blog/video-walkthrough-web-crawler-with-coroutines/\">emptysqua.re</a>, the chapter may be difficult for a novice or intermediate developer to follow.</li>\n<li>This month, Philip Guo, an Assistant Professor at UC San Diego, has released an 8 part video series, 90 minutes total, so on the order of 10 minutes each, that walks through the article, including some coding examples that he walks through.</li>\n<li>Since async is something that takes a while to get your head around, I appreciate the multi-sensory education experience. Listening to Philip talk about it, watching him walk through the code and talk about the article, and having the article as a reference, is super helpful.</li>\n<li><a href=\"https://talkpython.fm/episodes/show/22/cpython-internals-and-learning-python-with-pythontutor.com\">Talk Python #22: CPython Internals and Learning Python with pythontutor.com</a></li>\n<li><a href=\"https://talkpython.fm/episodes/show/69/write-an-excellent-programming-blog\">Talk Python #69: Write an Excellent Programming Blog</a></li>\n</ul>\n\n<p><strong>#2 (Michael):</strong> <a href=\"http://www.infoworld.com/article/3146967/application-development/4-likely-future-twists-for-python.html\"><strong>4 likely future twists for Python</strong></a>\nby <em>Serdar Yegulalp</em></p>\n\n<ol>\n<li><p><strong>Python 2.x may live on</strong></p>\n\n<ul>\n<li>Python 2.x might also get a continued lease on life if independent developers decide to keep the branch going on their own.</li>\n<li>At least one such effort exists -- Naftali Harris's \"<a href=\"https://github.com/naftaliharris/python2.8\">Python 2.8</a>\" project, which backports improvements and bug fixes from Python 3 into the Python 2.x branch.</li>\n<li>it makes sense to make the 3.x leap, but it's likely we'll see a lot of keep-the-2.x-flame-alive efforts</li>\n</ul></li>\n<li><p><strong>Requirements.txt may be replaced with something better</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/pypa/pipfile\">Pipfile</a> has been proposed as a possible replacement by the folks at the Python Packaging Authority, which is \"the working group that maintains many of the relevant projects in Python packaging.\"</li>\n<li>Pipfile will be superior to requirements.txt file in a number of ways:\n    1. TOML syntax for declaring all types of Python dependencies.\n    2. One Pipfile (as opposed to multiple requirements.txt files).\n    3. Existing requirements files tend to proliferate into multiple files - e.g. dev-requirements.txt, test-requirements.txt, etc. - but a Pipfile will allow seamlessly specifying groups of dependencies in one place.\n    4. This will be surfaced as only two built-in groups (default &amp; development). (see note below)\n    5. Fully specified (and deterministic) environments in the form of Pipfile.freeze. A deployed application can then be completely redeployed with the same exact versions of all recursive dependencies, by referencing the Pipfile.freeze file.</li>\n<li><p>Example pipfile:  </p>\n\n<p>[[source]]\nurl = 'https://pypi.org/'\nverify_ssl = true</p>\n\n<p>[requires]\npython_version = '2.7'</p>\n\n<p>[packages]\nrequests = { extras = ['socks'] }\nDjango = '>1.10'\npinax = { git = 'git://github.com/pinax/pinax.git', ref = '1.4', editable = true }</p>\n\n<p>[dev-packages]\nnose = '*'  </p></li>\n</ul></li>\n<li><p><strong>Python could get more enterprise editions</strong></p>\n\n<ul>\n<li>As the language has gained traction across the board, it's also appearing in versions aimed specifically at solving enterprise-grade problems.</li>\n<li>Intel, for instance, elected to <a href=\"http://www.infoworld.com/article/3117239/data-science/intels-python-distribution-turbocharges-data-science.html\">repackage</a> the Anaconda science-and-math distribution of Python after outfitting it with extensions that give it a speed boost, albeit only on Intel processors. </li>\n<li>Anaconda is itself produced by Continuum Analytics, no stranger to enterprise data-analysis needs.</li>\n</ul></li>\n<li><strong>Python's new software repository system could lead to enterprise-friendly Python package management</strong>\n<ul>\n<li>One possibility being floated in this vein is the concept of an enterprise-grade package index for Python, as <a href=\"https://medium.com/python-pandemonium/the-trusted-packaging-index-d16986de73c6\">discussed by Cristian Medina of Nimble Storage</a>:</li>\n<li>Businesses always have a need for an on-premises, secure, encrypted and highly available distribution mechanism of compiled binaries. Together with setuptools providing various install capabilities that can cover non-Python code just as well, it seems like we could put together a decent product. Something like a Docker Trusted Registry.</li>\n<li>I\u2019m working on something here too that come out of the discussion of Talk Python #84</li>\n</ul></li>\n</ol>\n\n<p><strong>#3 (Brian) <a href=\"http://www.labri.fr/perso/nrougier/from-python-to-numpy/\">From Python to Numpy</a></strong></p>\n\n<ul>\n<li>Nicolas P. Rougier - labri.fr</li>\n<li>\u201cNicolas P. Rougier is a full-time research scientist at Inria which is the French national institute for research in computer science and control.\u201d</li>\n<li>Creative commons book for people who are intermediate level Python developers and want to use numpy for science or engineering.</li>\n</ul>\n\n<p><strong>#4 (Michael):</strong> <a href=\"https://github.com/openai/universe\"><strong>openai/universe</strong></a></p>\n\n<ul>\n<li>Universe: a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications. <a href=\"https://universe.openai.com/\">https://universe.openai.com</a></li>\n<li>Universe allows anyone to train and evaluate AI agents on an extremely wide range of real-time, complex environments.</li>\n<li>Universe makes it possible for any existing program to become an OpenAI Gym environment, without needing special access to the program's internals, source code, or APIs. \n<ul>\n<li>It does this by packaging the program into a Docker container</li>\n<li>presenting the AI with the same interface a human uses: </li>\n<li>sending keyboard</li>\n<li>mouse events</li>\n<li>receiving screen pixels</li>\n<li>Our initial release contains over 1,000 environments in which an AI agent can take actions and gather observations.</li>\n</ul></li>\n</ul>\n\n<p><strong>#5: (Brian): <a href=\"https://medium.com/@anthonypjshaw/python-requests-deep-dive-a0a5c5c1e093\">Python requests deep dive</a></strong></p>\n\n<ul>\n<li>Anthony Shaw - on medium.com</li>\n<li>Converted a large project from httplib to requests</li>\n<li>Apache Libcloud\n<ul>\n<li>needed to provide a set of base classes that would handle HTTP and HTTPS REST/JSON, REST/XML and various other bizarre HTTP APIs. </li>\n<li>Libcloud has over 80 client libraries for every major cloud service out there. </li>\n<li>single Connection class that handles encoding and decoding of JSON, XML or Raw data.</li>\n</ul></li>\n<li>Anthony walks through the types of changes made, including authentication, session handling, testing, prepared requests, streams, \u2026 </li>\n<li>uses  <a href=\"https://github.com/openstack/requests-mock\">requests-mock</a> \n<ul>\n<li>very cool API</li>\n</ul></li>\n</ul>\n\n<p><strong>#6 (Michael):</strong> <a href=\"https://www.reddit.com/r/Python/comments/5n7p3p/whats_the_community_favorite_for_developing_osx/\">What's the community favorite for developing OSX desktop applications with Python?</a></p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/user/bangeron\"><strong>bangeron</strong></a><strong>:</strong> I've been using PyQt for all my projects with a GUI: - It has a native look and feel - It's cross-platform (I do everything on macOS) - It's a whole framework, including modules for plotting charts, networking, SQL, etc. - It has <em>excellent</em> documentation. - It has a GUI editor (Qt Creator) that is pretty good, once you figure it out.</li>\n<li><a href=\"https://www.reddit.com/user/Omnius\"><strong>Omnius</strong></a>: Same but using pyside to avoid license fees.</li>\n<li><a href=\"https://www.reddit.com/user/spinwizard69\"><strong>spinwizard69</strong></a>: Use TK for simple apps! It is included with Python and avoids dependency hell.</li>\n<li><a href=\"https://www.reddit.com/user/EssaAlshammri\"><strong>EssaAlshammri</strong></a>: Take a look at <a href=\"http://pybee.org/project/projects/libraries/toga/\">Toga</a> its idea is great.</li>\n<li><a href=\"https://www.reddit.com/user/Ruditorres\"><strong>Ruditorres</strong></a>: Kivy hands down, it is pythonic, easy, and beautiful</li>\n<li><a href=\"https://www.reddit.com/user/bangeron\"><strong>bangeron</strong></a>: Kivy is anything but beautiful. At least, not without spending some time creating your own theme.</li>\n<li>Personally, I want py_electron (modeled after <a href=\"http://electron.atom.io\">electronjs</a>).</li>\n<li>Notable mention, related: <a href=\"http://cx-freeze.readthedocs.io/en/latest/releasenotes.html\">cx_Freeze released</a> (Version 5.0.1 (January 2017))</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 17 Jan 2017 00:00:00 -0800", "published_parsed": [2017, 1, 17, 8, 0, 0, 1, 17, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Walking with async coroutines, diving deep into requests, and a universe of options (for AIs)", "itunes_episode": "9", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 9, recorded on **Tuesday, January 17th**. In this episode we discuss **walking with async coroutines, diving deep into requests, and a universe of options (for AIs)**."}], "itunes_duration": "00:23:39"}}, "#8 Python gets Grumpy, avoiding burnout, Postman for API testing and more": {"info": {"title": "#8 Python gets Grumpy, avoiding burnout, Postman for API testing and more", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#8 Python gets Grumpy, avoiding burnout, Postman for API testing and more"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/8/python-gets-grumpy-avoiding-burnout-postman-for-api-testing-and-more"}, {"length": "20121944", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/8/python-gets-grumpy-avoiding-burnout-postman-for-api-testing-and-more.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/8/python-gets-grumpy-avoiding-burnout-postman-for-api-testing-and-more", "id": "https://pythonbytes.fm/episodes/download/8/python-gets-grumpy-avoiding-burnout-postman-for-api-testing-and-more.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 8, recorded on <strong>January 10th, 2017</strong>. In this episode we discuss <strong>Python is Grumpy, avoiding burnout, Postman for API testing and more</strong>.  </p>\n\n<p><strong>#1 (Brian): <a href=\"https://youtu.be/9UnMZYMaosw\">Jessica McKellar, &quot;Breaking The Rules&quot;, PyBay2016</a><a href=\"https://youtu.be/p33CVV29OG8\">\n</a></strong></p>\n\n<ul>\n<li>Jessica \n<ul>\n<li>was directory of PSF for several years, was involved with Boston Python UG, is diversity chair for PyCon, is an engineering director at dropbox</li>\n</ul></li>\n<li>Powerful keynote\n<ul>\n<li>Her extra work with Python is not about Python, it\u2019s about studying systems.</li>\n<li>\u201cLearning how to program changes the way you think about, debug, and interact with the world\u201d</li>\n<li>\u201cYou learn a set of rules to build software, \u2026 then you learn that you can change the rules.\u201d</li>\n<li>\u201cProgrammers master a system they know they can change.\u201d</li>\n<li>\u201cThis comes from the tenets of free software.\u201d</li>\n<li>\u201cWe take for granted that changing something to make it better is just a thing you do when you need to.\u201d</li>\n</ul></li>\n<li>This can and should carry over to the rest of your life.</li>\n<li>Jessica takes this idea and applies it to politics, voting, and polling stations, and ran a polling station herself.</li>\n<li>That\u2019s pretty incredible. About half the time is Q&amp;A with some great questions.</li>\n<li>Listen to this talk and apply it to every part of your work and life.</li>\n</ul>\n\n<p><strong>#2 (Michael): <a href=\"https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html\">Grumpy is a Python to Go</a></strong></p>\n\n<ul>\n<li>By Dylan Trotter from YouTube</li>\n<li>Grumpy is a Python to Go source code transcompiler and runtime.</li>\n<li>intended to be a near drop in replacement for CPython 2.7</li>\n<li>The key difference is that it compiles Python source code to Go source code which is then compiled to native code, rather than to bytecode. This means that Grumpy has no VM.</li>\n<li>6,000 stars on Github in 3 weeks</li>\n<li>Look for him on Talk Python To Me (episode 95?)</li>\n</ul>\n\n<p><strong>#3 (Brian): <a href=\"http://www.dougalmatthews.com/2016/Dec/16/finding-dead-code-with-vulture/\">Finding dead code with Vulture - Dougal Mathews</a></strong></p>\n\n<ul>\n<li><code>pip install vulture</code> , then <code>vulture some/directory/of/code</code> </li>\n<li>Reports unused code.</li>\n<li>vs coverage.py. You can get similar information from coverage if your test suite or the code you run during the coverage inspection is fairly complete. However, what if a unit test is the only thing calling some function? vulture allows you to exclude your test code when looking for unused code.</li>\n<li>vs static analyzers like flake8. With some of my own code that I have in progress, vulture found the same stuff that flake8 did. However, if you are only looking for dead code, it\u2019s easier to find with vulture if you have other flake8 violations. Also some folks don\u2019t like style checkers.</li>\n<li>I\u2019d like to hear what other people think. But I like the idea of having a focused dead code tool. And vulture is a great name for such a tool.</li>\n</ul>\n\n<p><strong>#4 (Michael): <a href=\"https://www.getpostman.com/\">Postman: Developing APIs is hard. Postman makes it easy</a></strong></p>\n\n<ul>\n<li>A powerful GUI platform to make your API development faster &amp; easier, from building API requests through testing, documentation and sharing.</li>\n<li>Cross platform and free</li>\n<li>A simple and effective way to share details about your public-facing API </li>\n<li>Testing\n<ul>\n<li>Run Postman Collections directly from the command line</li>\n<li>integrating with continuous integration servers and builds</li>\n<li>Monitor uptime, performance and correctness of your APIs.</li>\n</ul></li>\n<li>Notable mention goes to <a href=\"https://paw.cloud/\">paw.cloud</a> (macOS only)</li>\n</ul>\n\n<p><strong>#5 (Brian): <a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\">The Reality of Developer Burnout</a><a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\"> by </a><a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\">Kenneth Reitz</a></strong></p>\n\n<ul>\n<li>Author of <a href=\"http://docs.python-requests.org/en/master/\">Requests</a> and of <a href=\"https://github.com/kennethreitz/maya\">Maya (datetime for humans)</a>, covered in the <a href=\"http://pythonbytes.fm/7\">last episode</a>.</li>\n<li>This is an article about getting overwhelmed as a maintainer of an open source project. But applies to anyone supporting a tool, even for your coworkers. And really applicable to all sorts of developer burnout. </li>\n<li>Advice:\n<ul>\n<li>Keep producing, but stop consuming so much on social networks. twitter, reddit, etc.</li>\n<li>Delegate more.</li>\n<li>Have hobbies other than coding</li>\n</ul></li>\n<li>side note:\n<ul>\n<li>On the maya github page, I noticed a link <a href=\"https://saythanks.io/\">saythanks.io</a>, a Kenneth project where you can set up a way for people to just send you a thank-you note. I think this is cool. I wrote about <a href=\"http://pythontesting.net/community/power-of-thank-you/\">the power of \u201cthank you\u201d</a> a few years ago. It\u2019s really important in open source, and really all the time. </li>\n</ul></li>\n</ul>\n\n<p><strong>#6 (Michael): <a href=\"https://www.palletsprojects.com/blog/jinja-29-released/\">Jinja 2.9 Released by Armin Ronacher</a></strong></p>\n\n<ul>\n<li>From Hugh Blandford (thanks!)</li>\n<li>New release, 2.9 codename \"Derivation\" of the Jinja template engine for Python is out</li>\n<li>While Jinja2 supported Python 3 for years now it never really embraced functionality that the language provides on 3.x that it does not do on 2.x\n<ul>\n<li>However 3.6 now added async generators which permits Jinja2 to fully support the async and await keywords on 3.6 and later.</li>\n<li>In particular it means that you can now return coroutines from functions passed to Jinja2 templates and the template engine will automatically await them.</li>\n<li>Likewise all filters were updated to work with iterators as well as async iterators alike.</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 8, recorded on <strong>January 10th, 2017</strong>. In this episode we discuss <strong>Python is Grumpy, avoiding burnout, Postman for API testing and more</strong>.  </p>\n\n<p><strong>#1 (Brian): <a href=\"https://youtu.be/9UnMZYMaosw\">Jessica McKellar, &quot;Breaking The Rules&quot;, PyBay2016</a><a href=\"https://youtu.be/p33CVV29OG8\">\n</a></strong></p>\n\n<ul>\n<li>Jessica \n<ul>\n<li>was directory of PSF for several years, was involved with Boston Python UG, is diversity chair for PyCon, is an engineering director at dropbox</li>\n</ul></li>\n<li>Powerful keynote\n<ul>\n<li>Her extra work with Python is not about Python, it\u2019s about studying systems.</li>\n<li>\u201cLearning how to program changes the way you think about, debug, and interact with the world\u201d</li>\n<li>\u201cYou learn a set of rules to build software, \u2026 then you learn that you can change the rules.\u201d</li>\n<li>\u201cProgrammers master a system they know they can change.\u201d</li>\n<li>\u201cThis comes from the tenets of free software.\u201d</li>\n<li>\u201cWe take for granted that changing something to make it better is just a thing you do when you need to.\u201d</li>\n</ul></li>\n<li>This can and should carry over to the rest of your life.</li>\n<li>Jessica takes this idea and applies it to politics, voting, and polling stations, and ran a polling station herself.</li>\n<li>That\u2019s pretty incredible. About half the time is Q&amp;A with some great questions.</li>\n<li>Listen to this talk and apply it to every part of your work and life.</li>\n</ul>\n\n<p><strong>#2 (Michael): <a href=\"https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html\">Grumpy is a Python to Go</a></strong></p>\n\n<ul>\n<li>By Dylan Trotter from YouTube</li>\n<li>Grumpy is a Python to Go source code transcompiler and runtime.</li>\n<li>intended to be a near drop in replacement for CPython 2.7</li>\n<li>The key difference is that it compiles Python source code to Go source code which is then compiled to native code, rather than to bytecode. This means that Grumpy has no VM.</li>\n<li>6,000 stars on Github in 3 weeks</li>\n<li>Look for him on Talk Python To Me (episode 95?)</li>\n</ul>\n\n<p><strong>#3 (Brian): <a href=\"http://www.dougalmatthews.com/2016/Dec/16/finding-dead-code-with-vulture/\">Finding dead code with Vulture - Dougal Mathews</a></strong></p>\n\n<ul>\n<li><code>pip install vulture</code> , then <code>vulture some/directory/of/code</code> </li>\n<li>Reports unused code.</li>\n<li>vs coverage.py. You can get similar information from coverage if your test suite or the code you run during the coverage inspection is fairly complete. However, what if a unit test is the only thing calling some function? vulture allows you to exclude your test code when looking for unused code.</li>\n<li>vs static analyzers like flake8. With some of my own code that I have in progress, vulture found the same stuff that flake8 did. However, if you are only looking for dead code, it\u2019s easier to find with vulture if you have other flake8 violations. Also some folks don\u2019t like style checkers.</li>\n<li>I\u2019d like to hear what other people think. But I like the idea of having a focused dead code tool. And vulture is a great name for such a tool.</li>\n</ul>\n\n<p><strong>#4 (Michael): <a href=\"https://www.getpostman.com/\">Postman: Developing APIs is hard. Postman makes it easy</a></strong></p>\n\n<ul>\n<li>A powerful GUI platform to make your API development faster &amp; easier, from building API requests through testing, documentation and sharing.</li>\n<li>Cross platform and free</li>\n<li>A simple and effective way to share details about your public-facing API </li>\n<li>Testing\n<ul>\n<li>Run Postman Collections directly from the command line</li>\n<li>integrating with continuous integration servers and builds</li>\n<li>Monitor uptime, performance and correctness of your APIs.</li>\n</ul></li>\n<li>Notable mention goes to <a href=\"https://paw.cloud/\">paw.cloud</a> (macOS only)</li>\n</ul>\n\n<p><strong>#5 (Brian): <a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\">The Reality of Developer Burnout</a><a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\"> by </a><a href=\"https://www.kennethreitz.org/essays/the-reality-of-developer-burnout\">Kenneth Reitz</a></strong></p>\n\n<ul>\n<li>Author of <a href=\"http://docs.python-requests.org/en/master/\">Requests</a> and of <a href=\"https://github.com/kennethreitz/maya\">Maya (datetime for humans)</a>, covered in the <a href=\"http://pythonbytes.fm/7\">last episode</a>.</li>\n<li>This is an article about getting overwhelmed as a maintainer of an open source project. But applies to anyone supporting a tool, even for your coworkers. And really applicable to all sorts of developer burnout. </li>\n<li>Advice:\n<ul>\n<li>Keep producing, but stop consuming so much on social networks. twitter, reddit, etc.</li>\n<li>Delegate more.</li>\n<li>Have hobbies other than coding</li>\n</ul></li>\n<li>side note:\n<ul>\n<li>On the maya github page, I noticed a link <a href=\"https://saythanks.io/\">saythanks.io</a>, a Kenneth project where you can set up a way for people to just send you a thank-you note. I think this is cool. I wrote about <a href=\"http://pythontesting.net/community/power-of-thank-you/\">the power of \u201cthank you\u201d</a> a few years ago. It\u2019s really important in open source, and really all the time. </li>\n</ul></li>\n</ul>\n\n<p><strong>#6 (Michael): <a href=\"https://www.palletsprojects.com/blog/jinja-29-released/\">Jinja 2.9 Released by Armin Ronacher</a></strong></p>\n\n<ul>\n<li>From Hugh Blandford (thanks!)</li>\n<li>New release, 2.9 codename \"Derivation\" of the Jinja template engine for Python is out</li>\n<li>While Jinja2 supported Python 3 for years now it never really embraced functionality that the language provides on 3.x that it does not do on 2.x\n<ul>\n<li>However 3.6 now added async generators which permits Jinja2 to fully support the async and await keywords on 3.6 and later.</li>\n<li>In particular it means that you can now return coroutines from functions passed to Jinja2 templates and the template engine will automatically await them.</li>\n<li>Likewise all filters were updated to work with iterators as well as async iterators alike.</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 10 Jan 2017 00:00:00 -0800", "published_parsed": [2017, 1, 10, 8, 0, 0, 1, 10, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python gets Grumpy, avoiding burnout, Postman for API testing and more", "itunes_episode": "8", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 8, recorded on **January 10th, 2017**. In this episode we discuss **Python is Grumpy, avoiding burnout, Postman for API testing and more**."}], "itunes_duration": "00:20:48"}}, "#7 Python 3.6 is out, Sanic is a blazing web framework, and are failing our open source infrastructure?": {"info": {"title": "#7 Python 3.6 is out, Sanic is a blazing web framework, and are failing our open source infrastructure?", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#7 Python 3.6 is out, Sanic is a blazing web framework, and are failing our open source infrastructure?"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/7/python-3.6-is-out-sanic-is-a-blazing-web-framework-and-are-failing-our-open-source-infrastructure"}, {"length": "20498943", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/7/python-3.6-is-out-sanic-is-a-blazing-web-framework-and-are-failing-our-open-source-infrastructure.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/7/python-3.6-is-out-sanic-is-a-blazing-web-framework-and-are-failing-our-open-source-infrastructure", "id": "https://pythonbytes.fm/episodes/download/7/python-3.6-is-out-sanic-is-a-blazing-web-framework-and-are-failing-our-open-source-infrastructure.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 7, recorded on Wednesday, January 4th. </p>\n\n<p>In this episode we discuss Python 3.6 being release, a blazing Python web framework called Sanic, how we are failing our open source infrastructure, and more.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p><strong>#1 (Brian)</strong>:  <strong>Python 3.6 is officially released</strong></p>\n\n<ul>\n<li>Dec 23 Announcement on blog.python.org: <a href=\"http://blog.python.org/2016/12/python-360-is-now-available.html\">http://blog.python.org/2016/12/python-360-is-now-available.html</a></li>\n<li>What\u2019s new article on docs.python.org: <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html\">https://docs.python.org/3.6/whatsnew/3.6.html</a></li>\n</ul>\n\n<p>Here\u2019s a few more articles:</p>\n\n<ul>\n<li>Python 3.6 is packed with goodness - Serdar Yegulalp -  InfoWorld\n<ul>\n<li><a href=\"http://www.infoworld.com/article/3149782/application-development/python-36-is-packed-with-goodness.html\">http://www.infoworld.com/article/3149782/application-development/python-36-is-packed-with-goodness.html</a></li>\n<li>A list of cool things in Python 3.6</li>\n<li>async/await in more places</li>\n<li>Improved memory usage and speed</li>\n<li>frame evaluation API to provide better support for JITs, tracers, debuggers</li>\n<li>secrets module for common security-related functions such as generating tokens</li>\n</ul></li>\n<li>One thing that could stop a team from switching to Python 3 would be that they looked into it once, and a package they needed was not ported yet. That\u2019s different now, most are ported, or have been replaced with some other way.</li>\n<li>Adopt Python 3 - Dibya Chakravorty - on Medium\n<ul>\n<li><a href=\"https://medium.com/broken-window/python-3-support-for-third-party-libraries-dcd7a156e5bd\">https://medium.com/broken-window/python-3-support-for-third-party-libraries-dcd7a156e5bd</a> </li>\n<li>A discussion of packages that support Python 2 and 3, those that are 2 only, those that are 3 only.</li>\n<li>Two lists of most downloaded packages and their py3 readiness:</li>\n<li>Wall of superpowers: <a href=\"http://python3wos.appspot.com/\">http://python3wos.appspot.com/</a>, 187/200 = 93.5%</li>\n<li>Python 3 readiness: <a href=\"http://py3readiness.org/\">http://py3readiness.org/</a>, 341/360 = 94.7%</li>\n<li>Go further:</li>\n<li>all pypi packages that are stable and active (at least one release in 2016), about 6000 packages</li>\n<li>total python 3 coverage is 72%</li>\n<li>14% are Python 3 only</li>\n<li>28% are Python 2 only</li>\n<li>of the 28%, author estimates only 25% of the remaining packages would be difficult to port, based on their size, and included that list.</li>\n<li>Also entire code for this article is in an iPython notebook:<a href=\"https://github.com/gutfeeling/pypi_explorer/blob/master/pypi_database/analysis.ipynb\">https://github.com/gutfeeling/pypi_explorer/blob/master/pypi_database/analysis.ipynb</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael)</strong>\n<strong>Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal</strong>\n<a href=\"http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure\">http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure</a></p>\n\n<ul>\n<li>From The Ford Foundation, 14 JULY 2016</li>\n<li>Features Eric Holscher from Read the Docs &amp; Donald Stufft from PyPI</li>\n<li>Discussed on Talk Python episode <a href=\"https://talkpython.fm/episodes/show/84/are-we-failing-to-fund-python-s-core-infrastructure\">#84: Are we failing to fund Python's core infrastructure?</a></li>\n<li>Some highlights from the 149 page report:\n<ul>\n<li>Our modern society\u2014everything  from hospitals to stock markets to  newspapers to social media\u2014runs on  software. But take a closer look, and  you\u2019ll find that the tools we use to build  software are buckling under demand. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.4)</li>\n<li>No individual company or organization is incentivized to address the  problem alone, because open source code is a public good. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.9)</li>\n<li>By 2014, two-thirds of all Web servers were using OpenSSL, enabling  websites to securely pass credit card and other sensitive information  over the Internet. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.11)</li>\n<li>Institutional efforts to support digital  infrastructure: There are some institutional efforts to collectively organize and help  support open source projects. Some are independent software  foundations; other sources of support come from software companies themselves. Administrative support and fiscal sponsorship Several foundations provide organizational support, such as fiscal  sponsorship, to open source projects: in other words, taking care of  the non-coding tasks that many developers would prefer not to do (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.109)</li>\n<li>Of Heartbleed, Marquess wrote, \u201cThe mystery is not that a few over-worked volunteers missed this bug; the mystery is why it hasn\u2019t  happened more often.\u201d (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>Heartbleed, had been included in a 2011  update. It had gone unnoticed for years. Heartbleed could allow any  sophisticated hacker to capture secure information being passed to  vulnerable web servers, including passwords, credit card information,  and other sensitive data (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>People expressed their support by sending donations to the foundation. Although Marquess was grateful for their enthusiasm, the first  round of donations came out to roughly $9,000: not nearly enough  to sustain a team. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>After Heartbleed, OpenSSL finally got more of the funding it  needed\u2014at least for now. They currently have enough money to pay  four full-time employees for three years. But a year and a half into  that funding, Marquess isn\u2019t sure what will come next. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.14)</li>\n<li>Free software makes it exponentially cheaper  and easier to build software (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.23)</li>\n<li>Free software is directly responsible for  today\u2019s current startup renaissance (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.24)</li>\n<li>Software not getting the necessary  maintenance it needs Building digital infrastructure in a haphazard fashion means that all  software gets built more slowly and inefficiently. One example of  this can be found in the history of Python infrastructure. An important infrastructure project for Python developers is called setuptools. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.80)</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 (Brian)</strong>: <strong>Matplotlib 2.0.0 rc2 was released by Thomas Caswell</strong></p>\n\n<ul>\n<li>install instructions: <a href=\"http://matplotlib.org/style_changes.html\">http://matplotlib.org/style_changes.html</a></li>\n<li>List of top level changes in release history on github\n-<a href=\"https://github.com/matplotlib/matplotlib/releases\">https://github.com/matplotlib/matplotlib/releases</a></li>\n<li>Changes to the default style - matplotlib.org</li>\n<li><a href=\"http://matplotlib.org/2.0.0rc2/users/dflt_style_changes.html\">http://matplotlib.org/2.0.0rc2/users/dflt_style_changes.html</a></li>\n<li>Post visually shows all of the new changes. </li>\n<li>What\u2019s new in matplotlib 2.0 - also on <a href=\"matplotlib.org\">http://matplotlib.org</a></li>\n<li><a href=\"http://matplotlib.org/2.0.0rc2/users/whats_new.html\">http://matplotlib.org/2.0.0rc2/users/whats_new.html</a></li>\n</ul>\n\n<p><strong>#4 (Michael)</strong>\n<strong>Introduction to MongoDB and Python</strong>\n<a href=\"https://realpython.com/blog/python/introduction-to-mongodb-and-python/\">https://realpython.com/blog/python/introduction-to-mongodb-and-python/</a></p>\n\n<ul>\n<li>SQL vs NoSQL</li>\n<li>PyMongo\n<ul>\n<li>Inserting and querying data</li>\n</ul></li>\n<li>MongoEngine\n<ul>\n<li>Classes</li>\n<li>Constraints </li>\n<li>OOP</li>\n</ul></li>\n<li>Michael\u2019s 1.5 hour presentation at Software Architect conference in London: <a href=\"https://www.youtube.com/watch?v=_r7ozqiTN2k\">Applied NoSQL with MongoDB and Python</a></li>\n</ul>\n\n<p><strong>#5: (Brian)</strong>: <strong>Introducing Maya: Datetimes for Humans</strong>\n<a href=\"https://www.kennethreitz.org/essays/introducing-maya-datetimes-for-humans\">https://www.kennethreitz.org/essays/introducing-maya-datetimes-for-humans</a>\n- Working with dates is harder than it should be. Kenneth has proven that he understands how to make reasonable interfaces to hide complicated things.</p>\n\n<p>From \"why is this useful?\" section</p>\n\n<ul>\n<li>All timezone algebra will behave identically on all machines, <em>regardless of system locale</em>.</li>\n<li>Complete symmetric import and export of both <strong>ISO 8601</strong> and <strong>RFC 2822</strong> datetime stamps.</li>\n<li>Fantastic parsing of both dates written for/by humans and machines (<strong>maya.when()</strong> <em>vs.</em> <strong>maya.parse()</strong>).</li>\n<li>Support for human slang, both import and export (e.g. 'an hour ago').</li>\n<li>Datetimes can very easily be generated, with our without timezone information attached (naive).</li>\n<li>This library is based around epoch time, but dates before Jan 1 1970 are indeed supported, via negative integers.</li>\n</ul>\n\n<p><strong>#6 (Michael)</strong>: <strong>Sanic: Python 3.5+ web server that's written to go fast</strong>\n<a href=\"https://github.com/channelcat/sanic\">https://github.com/channelcat/sanic</a></p>\n\n<ul>\n<li>Sanic is a Flask-like Python 3.5+ web server that's written to go fast. It's based on the work done by the amazing folks at magicstack, and was inspired by this article: <a href=\"https://magic.io/blog/uvloop-blazing-fast-python-networking/\">https://magic.io/blog/uvloop-blazing-fast-python-networking/</a>.</li>\n<li>On top of being Flask-like, Sanic supports async request handlers. This means you can use the new shiny async/await syntax from Python 3.5, making your code non-blocking and speedy.</li>\n</ul>\n\n<p>A basic action method</p>\n\n<pre><code>@app.route(\"/\")\nasync def test(request):  # async def !!!\n    return json({ \"hello\": \"world\" })\n</code></pre>\n\n<p><strong>Performance numbers</strong></p>\n\n<table>\n<thead>\n<tr>\n  <th>Server</th>\n  <th>Implementation</th>\n  <th>Requests/sec</th>\n  <th>Avg Latency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Sanic</td>\n  <td>Python 3.5 + uvloop</td>\n  <td>33,342</td>\n  <td>2.96ms</td>\n</tr>\n<tr>\n  <td>Bottle</td>\n  <td>gunicorn + meinheld</td>\n  <td>13,596</td>\n  <td>7.36ms</td>\n</tr>\n<tr>\n  <td>Flask</td>\n  <td>gunicorn + meinheld</td>\n  <td>4,988</td>\n  <td>20.08ms</td>\n</tr>\n<tr>\n  <td>Aiohttp</td>\n  <td>Python 3.5 + uvloop</td>\n  <td>2,979</td>\n  <td>33.42ms</td>\n</tr>\n<tr>\n  <td>Tornado</td>\n  <td>Python 3.5</td>\n  <td>2,138</td>\n  <td>46.66ms</td>\n</tr>\n</tbody>\n</table>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 7, recorded on Wednesday, January 4th. </p>\n\n<p>In this episode we discuss Python 3.6 being release, a blazing Python web framework called Sanic, how we are failing our open source infrastructure, and more.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p><strong>#1 (Brian)</strong>:  <strong>Python 3.6 is officially released</strong></p>\n\n<ul>\n<li>Dec 23 Announcement on blog.python.org: <a href=\"http://blog.python.org/2016/12/python-360-is-now-available.html\">http://blog.python.org/2016/12/python-360-is-now-available.html</a></li>\n<li>What\u2019s new article on docs.python.org: <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html\">https://docs.python.org/3.6/whatsnew/3.6.html</a></li>\n</ul>\n\n<p>Here\u2019s a few more articles:</p>\n\n<ul>\n<li>Python 3.6 is packed with goodness - Serdar Yegulalp -  InfoWorld\n<ul>\n<li><a href=\"http://www.infoworld.com/article/3149782/application-development/python-36-is-packed-with-goodness.html\">http://www.infoworld.com/article/3149782/application-development/python-36-is-packed-with-goodness.html</a></li>\n<li>A list of cool things in Python 3.6</li>\n<li>async/await in more places</li>\n<li>Improved memory usage and speed</li>\n<li>frame evaluation API to provide better support for JITs, tracers, debuggers</li>\n<li>secrets module for common security-related functions such as generating tokens</li>\n</ul></li>\n<li>One thing that could stop a team from switching to Python 3 would be that they looked into it once, and a package they needed was not ported yet. That\u2019s different now, most are ported, or have been replaced with some other way.</li>\n<li>Adopt Python 3 - Dibya Chakravorty - on Medium\n<ul>\n<li><a href=\"https://medium.com/broken-window/python-3-support-for-third-party-libraries-dcd7a156e5bd\">https://medium.com/broken-window/python-3-support-for-third-party-libraries-dcd7a156e5bd</a> </li>\n<li>A discussion of packages that support Python 2 and 3, those that are 2 only, those that are 3 only.</li>\n<li>Two lists of most downloaded packages and their py3 readiness:</li>\n<li>Wall of superpowers: <a href=\"http://python3wos.appspot.com/\">http://python3wos.appspot.com/</a>, 187/200 = 93.5%</li>\n<li>Python 3 readiness: <a href=\"http://py3readiness.org/\">http://py3readiness.org/</a>, 341/360 = 94.7%</li>\n<li>Go further:</li>\n<li>all pypi packages that are stable and active (at least one release in 2016), about 6000 packages</li>\n<li>total python 3 coverage is 72%</li>\n<li>14% are Python 3 only</li>\n<li>28% are Python 2 only</li>\n<li>of the 28%, author estimates only 25% of the remaining packages would be difficult to port, based on their size, and included that list.</li>\n<li>Also entire code for this article is in an iPython notebook:<a href=\"https://github.com/gutfeeling/pypi_explorer/blob/master/pypi_database/analysis.ipynb\">https://github.com/gutfeeling/pypi_explorer/blob/master/pypi_database/analysis.ipynb</a></li>\n</ul></li>\n</ul>\n\n<p><strong>#2 (Michael)</strong>\n<strong>Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal</strong>\n<a href=\"http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure\">http://www.fordfoundation.org/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure</a></p>\n\n<ul>\n<li>From The Ford Foundation, 14 JULY 2016</li>\n<li>Features Eric Holscher from Read the Docs &amp; Donald Stufft from PyPI</li>\n<li>Discussed on Talk Python episode <a href=\"https://talkpython.fm/episodes/show/84/are-we-failing-to-fund-python-s-core-infrastructure\">#84: Are we failing to fund Python's core infrastructure?</a></li>\n<li>Some highlights from the 149 page report:\n<ul>\n<li>Our modern society\u2014everything  from hospitals to stock markets to  newspapers to social media\u2014runs on  software. But take a closer look, and  you\u2019ll find that the tools we use to build  software are buckling under demand. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.4)</li>\n<li>No individual company or organization is incentivized to address the  problem alone, because open source code is a public good. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.9)</li>\n<li>By 2014, two-thirds of all Web servers were using OpenSSL, enabling  websites to securely pass credit card and other sensitive information  over the Internet. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.11)</li>\n<li>Institutional efforts to support digital  infrastructure: There are some institutional efforts to collectively organize and help  support open source projects. Some are independent software  foundations; other sources of support come from software companies themselves. Administrative support and fiscal sponsorship Several foundations provide organizational support, such as fiscal  sponsorship, to open source projects: in other words, taking care of  the non-coding tasks that many developers would prefer not to do (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.109)</li>\n<li>Of Heartbleed, Marquess wrote, \u201cThe mystery is not that a few over-worked volunteers missed this bug; the mystery is why it hasn\u2019t  happened more often.\u201d (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>Heartbleed, had been included in a 2011  update. It had gone unnoticed for years. Heartbleed could allow any  sophisticated hacker to capture secure information being passed to  vulnerable web servers, including passwords, credit card information,  and other sensitive data (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>People expressed their support by sending donations to the foundation. Although Marquess was grateful for their enthusiasm, the first  round of donations came out to roughly $9,000: not nearly enough  to sustain a team. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.13)</li>\n<li>After Heartbleed, OpenSSL finally got more of the funding it  needed\u2014at least for now. They currently have enough money to pay  four full-time employees for three years. But a year and a half into  that funding, Marquess isn\u2019t sure what will come next. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.14)</li>\n<li>Free software makes it exponentially cheaper  and easier to build software (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.23)</li>\n<li>Free software is directly responsible for  today\u2019s current startup renaissance (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.24)</li>\n<li>Software not getting the necessary  maintenance it needs Building digital infrastructure in a haphazard fashion means that all  software gets built more slowly and inefficiently. One example of  this can be found in the history of Python infrastructure. An important infrastructure project for Python developers is called setuptools. (roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure, p.80)</li>\n</ul></li>\n</ul>\n\n<p><strong>#3 (Brian)</strong>: <strong>Matplotlib 2.0.0 rc2 was released by Thomas Caswell</strong></p>\n\n<ul>\n<li>install instructions: <a href=\"http://matplotlib.org/style_changes.html\">http://matplotlib.org/style_changes.html</a></li>\n<li>List of top level changes in release history on github\n-<a href=\"https://github.com/matplotlib/matplotlib/releases\">https://github.com/matplotlib/matplotlib/releases</a></li>\n<li>Changes to the default style - matplotlib.org</li>\n<li><a href=\"http://matplotlib.org/2.0.0rc2/users/dflt_style_changes.html\">http://matplotlib.org/2.0.0rc2/users/dflt_style_changes.html</a></li>\n<li>Post visually shows all of the new changes. </li>\n<li>What\u2019s new in matplotlib 2.0 - also on <a href=\"matplotlib.org\">http://matplotlib.org</a></li>\n<li><a href=\"http://matplotlib.org/2.0.0rc2/users/whats_new.html\">http://matplotlib.org/2.0.0rc2/users/whats_new.html</a></li>\n</ul>\n\n<p><strong>#4 (Michael)</strong>\n<strong>Introduction to MongoDB and Python</strong>\n<a href=\"https://realpython.com/blog/python/introduction-to-mongodb-and-python/\">https://realpython.com/blog/python/introduction-to-mongodb-and-python/</a></p>\n\n<ul>\n<li>SQL vs NoSQL</li>\n<li>PyMongo\n<ul>\n<li>Inserting and querying data</li>\n</ul></li>\n<li>MongoEngine\n<ul>\n<li>Classes</li>\n<li>Constraints </li>\n<li>OOP</li>\n</ul></li>\n<li>Michael\u2019s 1.5 hour presentation at Software Architect conference in London: <a href=\"https://www.youtube.com/watch?v=_r7ozqiTN2k\">Applied NoSQL with MongoDB and Python</a></li>\n</ul>\n\n<p><strong>#5: (Brian)</strong>: <strong>Introducing Maya: Datetimes for Humans</strong>\n<a href=\"https://www.kennethreitz.org/essays/introducing-maya-datetimes-for-humans\">https://www.kennethreitz.org/essays/introducing-maya-datetimes-for-humans</a>\n- Working with dates is harder than it should be. Kenneth has proven that he understands how to make reasonable interfaces to hide complicated things.</p>\n\n<p>From \"why is this useful?\" section</p>\n\n<ul>\n<li>All timezone algebra will behave identically on all machines, <em>regardless of system locale</em>.</li>\n<li>Complete symmetric import and export of both <strong>ISO 8601</strong> and <strong>RFC 2822</strong> datetime stamps.</li>\n<li>Fantastic parsing of both dates written for/by humans and machines (<strong>maya.when()</strong> <em>vs.</em> <strong>maya.parse()</strong>).</li>\n<li>Support for human slang, both import and export (e.g. 'an hour ago').</li>\n<li>Datetimes can very easily be generated, with our without timezone information attached (naive).</li>\n<li>This library is based around epoch time, but dates before Jan 1 1970 are indeed supported, via negative integers.</li>\n</ul>\n\n<p><strong>#6 (Michael)</strong>: <strong>Sanic: Python 3.5+ web server that's written to go fast</strong>\n<a href=\"https://github.com/channelcat/sanic\">https://github.com/channelcat/sanic</a></p>\n\n<ul>\n<li>Sanic is a Flask-like Python 3.5+ web server that's written to go fast. It's based on the work done by the amazing folks at magicstack, and was inspired by this article: <a href=\"https://magic.io/blog/uvloop-blazing-fast-python-networking/\">https://magic.io/blog/uvloop-blazing-fast-python-networking/</a>.</li>\n<li>On top of being Flask-like, Sanic supports async request handlers. This means you can use the new shiny async/await syntax from Python 3.5, making your code non-blocking and speedy.</li>\n</ul>\n\n<p>A basic action method</p>\n\n<pre><code>@app.route(\"/\")\nasync def test(request):  # async def !!!\n    return json({ \"hello\": \"world\" })\n</code></pre>\n\n<p><strong>Performance numbers</strong></p>\n\n<table>\n<thead>\n<tr>\n  <th>Server</th>\n  <th>Implementation</th>\n  <th>Requests/sec</th>\n  <th>Avg Latency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Sanic</td>\n  <td>Python 3.5 + uvloop</td>\n  <td>33,342</td>\n  <td>2.96ms</td>\n</tr>\n<tr>\n  <td>Bottle</td>\n  <td>gunicorn + meinheld</td>\n  <td>13,596</td>\n  <td>7.36ms</td>\n</tr>\n<tr>\n  <td>Flask</td>\n  <td>gunicorn + meinheld</td>\n  <td>4,988</td>\n  <td>20.08ms</td>\n</tr>\n<tr>\n  <td>Aiohttp</td>\n  <td>Python 3.5 + uvloop</td>\n  <td>2,979</td>\n  <td>33.42ms</td>\n</tr>\n<tr>\n  <td>Tornado</td>\n  <td>Python 3.5</td>\n  <td>2,138</td>\n  <td>46.66ms</td>\n</tr>\n</tbody>\n</table>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 04 Jan 2017 00:00:00 -0800", "published_parsed": [2017, 1, 4, 8, 0, 0, 2, 4, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python 3.6 is out, Sanic is a blazing web framework, and are failing our open source infrastructure?", "itunes_episode": "7", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 7, recorded on Wednesday, January 4th. In this episode we discuss Python 3.6 being release, a blazing Python web framework called Sanic, how we are failing our open source infrastructure, and more."}], "itunes_duration": "00:21:13"}}, "#6 Python 3.6 is going to be awesome, Kite: your friendly co-developing AI": {"info": {"title": "#6 Python 3.6 is going to be awesome, Kite: your friendly co-developing AI", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#6 Python 3.6 is going to be awesome, Kite: your friendly co-developing AI"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/6/python-3.6-is-going-to-be-awesome-kite-your-friendly-co-developing-ai"}, {"length": "18905265", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/6/python-3.6-is-going-to-be-awesome-kite-your-friendly-co-developing-ai.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/6/python-3.6-is-going-to-be-awesome-kite-your-friendly-co-developing-ai", "id": "https://pythonbytes.fm/episodes/download/6/python-3.6-is-going-to-be-awesome-kite-your-friendly-co-developing-ai.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 6, recorded on Monday, December 12th. In this episode we discuss why Python 3.6 is going to be awesome, kite: your friendly co-developing AI, and more!   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p>This is the last episode of 2016. Thank you everyone for a great launch. We\u2019ll be back early January. \ud83d\ude09 Be sure to check out Talk Python and Test and Code if you want more Pythonic listening over the break.</p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://dbader.org/blog/python-custom-exceptions\"><strong>#1 Make your Python code more readable with custom exception classes</strong></a></p>\n\n<ul>\n<li>This is a 5 min video + text. Good introduction into why you should define your own exceptions instead of using the built in ones, and how to do it. <br />\n<ul>\n<li>It makes errors from your code more readable.</li>\n<li>Better communication between your code and the person using your code.</li>\n<li>It allows you to give more context of the error to the caller of the function.</li>\n<li>Remember to derive from Exception or from another builtin exception.</li>\n</ul></li>\n<li>Do people create enough fine-grained exception types? I would say probably not.</li>\n<li>This advice is good because it encourages <a href=\"https://docs.python.org/2/glossary.html#term-eafp\">EAFP</a> (easier to ask for forgiveness than permission) style of programming which is generally Pythonic.</li>\n<li>Allows for multiple except statements for different errors in one try block</li>\n<li>Dan also featured our show in <a href=\"https://dbader.org/blog/ultimate-list-of-python-podcasts\">The ultimate list of Python Podcasts</a> (thanks Dan!)</li>\n<li>If you have a package that defines it\u2019s own exceptions, please read another article.\n<ul>\n<li><strong>The definitive guide to Python exceptions</strong>\n<ul>\n<li>Julien Danjou</li>\n<li>https://julien.danjou.info/blog/2016/python-exceptions-guide</li>\n<li>Covers having a common base exception for your package, organization within a package, and some examples of packages that organize their exceptions well, including requests</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://kite.com/\"><strong>#2 Kite</strong></a></p>\n\n<ul>\n<li>Kite augments your coding environment with all the internet\u2019s programming knowledge.</li>\n<li>Is an AI pair programmer, or mentor really.</li>\n<li>Contextual info for\n<ul>\n<li>language</li>\n<li>packages</li>\n<li>e.g. \u201cimport r\u201d \u2192 shows list of popular packages</li>\n<li>then detailed docs, examples, etc.</li>\n<li>autocompletions\u2026 by global popularity</li>\n<li>BYOE</li>\n<li>even works on your code</li>\n<li>be sure to watch the video</li>\n</ul></li>\n<li><a href=\"http://kite.com\">kite.com</a> is implemented mostly in Go <a href=\"https://twitter.com/asmith/status/806705380755578880\">according to the founder</a> Adam Smith.</li>\n<li>Thanks Gilberto Diaz for sending this one to us.</li>\n</ul>\n\n<p><a href=\"http://www.jeannicholashould.com/tidy-data-in-python.html\"><strong>#3 Tidy Data in Python</strong></a> (by Jean-Nicholas Hould)</p>\n\n<ul>\n<li>This article caught my attention because of the notion that the data as you receive it might not be in a form that is ideal to use it. This I am used to. But the article give some attributes of what problems to look for in data sets, and how to transform the data into a more usable structure using pandas.</li>\n<li>Great example of someone taking a good idea from someone else, summarizing it, and showing how to use it in Python.</li>\n<li>Based on a paper named <a href=\"http://vita.had.co.nz/papers/tidy-data.pdf\">Tidy Data</a> by Hadley Wickham\n<ul>\n<li>In this post, I will summarize some tidying examples Wickham uses in his paper </li>\n<li>Will demonstrate how to do so using the Python pandas library</li>\n</ul></li>\n<li>Tidy data has the following attributes:\n<ul>\n<li>Each variable forms a column and contains values</li>\n<li>Each observation forms a row</li>\n<li>Each type of observational unit forms a table</li>\n</ul></li>\n<li>A few definitions:\n<ul>\n<li>Variable: A measurement or an attribute. Height, weight, sex, etc.</li>\n<li>Value: The actual measurement or attribute. 152 cm, 80 kg, female, etc.</li>\n<li>Observation: All values measure on the same unit. Each person.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://youtu.be/hk85RUtQsBI\"><strong>#4 What's new in Python 3.6</strong></a></p>\n\n<ul>\n<li>By Brett Cannon \n<ul>\n<li>Works at Microsoft Azure Data Science team</li>\n<li>Python core developer</li>\n</ul></li>\n<li>16 PEPs in Py3.6 - more than any other release than Py 3.0</li>\n<li>PEP 498 Formatted string literals\n<ul>\n<li>You learn about internals</li>\n<li>That this is actually faster than str.format() because optimizations that can be done on the string itself (f\u201d\u201d)</li>\n<li>PEP 524: On Py 3.5 would fall back to unsecure. On Py 3.6 os.urandom() now blocks os.urandom() for cryptographically strong random numbers or os.getrandom() raises error if not enough randomness. Usually not a problem, but with things like containers and IoT, it has become one! Fix: use new secrets module.</li>\n</ul></li>\n<li>There are also other interesting things that aren\u2019t PEPs  </li>\n<li>Python 3.6 is generally significantly faster (than Py3.5 and legacy Python)</li>\n<li>Python 3.6.0 release candidate is now available, final expected end of the week</li>\n<li>Something that hasn\u2019t been as highly publicized is the deprecation of pyvenv.\n<ul>\n<li>https://docs.python.org/3.6/library/venv.html</li>\n<li>\u201cThe <code>pyvenv</code> script has been deprecated as of Python 3.6 in favor of using <code>python3 -m venv</code> to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on.\u201d</li>\n<li>This is important for me and you and anyone who teaches people to use Python. We often recommend virtual environments, and it\u2019s good to recommend -m venv to make sure people know which Python interpreter they are tying to their virtual environment.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"http://nedbatchelder.com//blog/201612/who_tests_what.html\"><strong>#5: Who Tests What</strong></a></p>\n\n<ul>\n<li>I had <a href=\"http://pythontesting.net/podcast/coverage-ned-batchelder/\">Ned Batchelder on Test&amp;Code to discuss coverage</a>. Episode 12.</li>\n<li>Ned is planning a new feature for <a href=\"https://pypi.python.org/pypi/coverage\">coverage.py</a>, which would tell you not just which code has run, but which test (or something else) caused that code to run.</li>\n<li>Discusses the stages of coverage, measurement/storing data/combining/reporting. Discusses the issue of how to decide who is calling the code in question. His current model is based on coverage having a plugin hook for someone to tell coverage a string that defines the \u201cwhat\u201d that is causing the code to be run. He also discusses some decisions about storage concerns and what coverage does now.</li>\n<li>He has questions remaining that he wants help with:\n<ul>\n<li>Today coverage.py keeps everything in memory until the end of the process, then writes it all to disk. <strong>Q:</strong> Will we need something more sophisticated? Can we punt on that problem until later?</li>\n<li><strong>Q:</strong> Is it important to try to conserve memory?</li>\n<li>Today, the .coverage data files are basically JSON. This much data might need a different format. <strong>Q:</strong> Is it time for a SQLite data file?</li>\n<li><strong>Q:</strong> How would you use the data?</li>\n<li>And a couple more questions regarding reporting.</li>\n</ul></li>\n<li>I like the direction this is going and I encourage everyone who has some nonstandard usage of coverage to take a look at this and give Ned some feedback.</li>\n</ul>\n\n<p><a href=\"https://hackernoon.com/threaded-asynchronous-magic-and-how-to-wield-it-bba9ed602c32#.8qk30tq31\"><strong>#6 Threaded Asynchronous Magic and How to Wield It</strong></a>\n(by <a href=\"https://twitter.com/tryexceptpass\">Cristian Medina</a>)</p>\n\n<ul>\n<li>This is your async programming in Python 3.5+ via async / await article</li>\n<li>Covers: \n<ul>\n<li>Tasks</li>\n<li>Scheduling tasks</li>\n<li>Scatter / gather example</li>\n<li>Moving the asyncio loop to a background thread</li>\n</ul></li>\n<li>Examples:\n<ul>\n<li>Real World Example #1\u200a\u2014\u200aSending Notifications (email)</li>\n<li>Real World Example #2\u200a\u2014\u200aParallel Web Requests\n<ul>\n<li>via <a href=\"https://aiohttp.readthedocs.io/en/stable/\">aiohttp</a>: HTTP client/server for asyncio (PEP 3156)</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Update: From episode 3: pynini</strong>\n<a href=\"https://en.m.wikipedia.org/wiki/P%C4%81%E1%B9%87ini\">https://en.m.wikipedia.org/wiki/P\u0101\u1e47ini</a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 6, recorded on Monday, December 12th. In this episode we discuss why Python 3.6 is going to be awesome, kite: your friendly co-developing AI, and more!   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<p>This is the last episode of 2016. Thank you everyone for a great launch. We\u2019ll be back early January. \ud83d\ude09 Be sure to check out Talk Python and Test and Code if you want more Pythonic listening over the break.</p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://dbader.org/blog/python-custom-exceptions\"><strong>#1 Make your Python code more readable with custom exception classes</strong></a></p>\n\n<ul>\n<li>This is a 5 min video + text. Good introduction into why you should define your own exceptions instead of using the built in ones, and how to do it. <br />\n<ul>\n<li>It makes errors from your code more readable.</li>\n<li>Better communication between your code and the person using your code.</li>\n<li>It allows you to give more context of the error to the caller of the function.</li>\n<li>Remember to derive from Exception or from another builtin exception.</li>\n</ul></li>\n<li>Do people create enough fine-grained exception types? I would say probably not.</li>\n<li>This advice is good because it encourages <a href=\"https://docs.python.org/2/glossary.html#term-eafp\">EAFP</a> (easier to ask for forgiveness than permission) style of programming which is generally Pythonic.</li>\n<li>Allows for multiple except statements for different errors in one try block</li>\n<li>Dan also featured our show in <a href=\"https://dbader.org/blog/ultimate-list-of-python-podcasts\">The ultimate list of Python Podcasts</a> (thanks Dan!)</li>\n<li>If you have a package that defines it\u2019s own exceptions, please read another article.\n<ul>\n<li><strong>The definitive guide to Python exceptions</strong>\n<ul>\n<li>Julien Danjou</li>\n<li>https://julien.danjou.info/blog/2016/python-exceptions-guide</li>\n<li>Covers having a common base exception for your package, organization within a package, and some examples of packages that organize their exceptions well, including requests</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://kite.com/\"><strong>#2 Kite</strong></a></p>\n\n<ul>\n<li>Kite augments your coding environment with all the internet\u2019s programming knowledge.</li>\n<li>Is an AI pair programmer, or mentor really.</li>\n<li>Contextual info for\n<ul>\n<li>language</li>\n<li>packages</li>\n<li>e.g. \u201cimport r\u201d \u2192 shows list of popular packages</li>\n<li>then detailed docs, examples, etc.</li>\n<li>autocompletions\u2026 by global popularity</li>\n<li>BYOE</li>\n<li>even works on your code</li>\n<li>be sure to watch the video</li>\n</ul></li>\n<li><a href=\"http://kite.com\">kite.com</a> is implemented mostly in Go <a href=\"https://twitter.com/asmith/status/806705380755578880\">according to the founder</a> Adam Smith.</li>\n<li>Thanks Gilberto Diaz for sending this one to us.</li>\n</ul>\n\n<p><a href=\"http://www.jeannicholashould.com/tidy-data-in-python.html\"><strong>#3 Tidy Data in Python</strong></a> (by Jean-Nicholas Hould)</p>\n\n<ul>\n<li>This article caught my attention because of the notion that the data as you receive it might not be in a form that is ideal to use it. This I am used to. But the article give some attributes of what problems to look for in data sets, and how to transform the data into a more usable structure using pandas.</li>\n<li>Great example of someone taking a good idea from someone else, summarizing it, and showing how to use it in Python.</li>\n<li>Based on a paper named <a href=\"http://vita.had.co.nz/papers/tidy-data.pdf\">Tidy Data</a> by Hadley Wickham\n<ul>\n<li>In this post, I will summarize some tidying examples Wickham uses in his paper </li>\n<li>Will demonstrate how to do so using the Python pandas library</li>\n</ul></li>\n<li>Tidy data has the following attributes:\n<ul>\n<li>Each variable forms a column and contains values</li>\n<li>Each observation forms a row</li>\n<li>Each type of observational unit forms a table</li>\n</ul></li>\n<li>A few definitions:\n<ul>\n<li>Variable: A measurement or an attribute. Height, weight, sex, etc.</li>\n<li>Value: The actual measurement or attribute. 152 cm, 80 kg, female, etc.</li>\n<li>Observation: All values measure on the same unit. Each person.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://youtu.be/hk85RUtQsBI\"><strong>#4 What's new in Python 3.6</strong></a></p>\n\n<ul>\n<li>By Brett Cannon \n<ul>\n<li>Works at Microsoft Azure Data Science team</li>\n<li>Python core developer</li>\n</ul></li>\n<li>16 PEPs in Py3.6 - more than any other release than Py 3.0</li>\n<li>PEP 498 Formatted string literals\n<ul>\n<li>You learn about internals</li>\n<li>That this is actually faster than str.format() because optimizations that can be done on the string itself (f\u201d\u201d)</li>\n<li>PEP 524: On Py 3.5 would fall back to unsecure. On Py 3.6 os.urandom() now blocks os.urandom() for cryptographically strong random numbers or os.getrandom() raises error if not enough randomness. Usually not a problem, but with things like containers and IoT, it has become one! Fix: use new secrets module.</li>\n</ul></li>\n<li>There are also other interesting things that aren\u2019t PEPs  </li>\n<li>Python 3.6 is generally significantly faster (than Py3.5 and legacy Python)</li>\n<li>Python 3.6.0 release candidate is now available, final expected end of the week</li>\n<li>Something that hasn\u2019t been as highly publicized is the deprecation of pyvenv.\n<ul>\n<li>https://docs.python.org/3.6/library/venv.html</li>\n<li>\u201cThe <code>pyvenv</code> script has been deprecated as of Python 3.6 in favor of using <code>python3 -m venv</code> to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on.\u201d</li>\n<li>This is important for me and you and anyone who teaches people to use Python. We often recommend virtual environments, and it\u2019s good to recommend -m venv to make sure people know which Python interpreter they are tying to their virtual environment.</li>\n</ul></li>\n</ul>\n\n<p><a href=\"http://nedbatchelder.com//blog/201612/who_tests_what.html\"><strong>#5: Who Tests What</strong></a></p>\n\n<ul>\n<li>I had <a href=\"http://pythontesting.net/podcast/coverage-ned-batchelder/\">Ned Batchelder on Test&amp;Code to discuss coverage</a>. Episode 12.</li>\n<li>Ned is planning a new feature for <a href=\"https://pypi.python.org/pypi/coverage\">coverage.py</a>, which would tell you not just which code has run, but which test (or something else) caused that code to run.</li>\n<li>Discusses the stages of coverage, measurement/storing data/combining/reporting. Discusses the issue of how to decide who is calling the code in question. His current model is based on coverage having a plugin hook for someone to tell coverage a string that defines the \u201cwhat\u201d that is causing the code to be run. He also discusses some decisions about storage concerns and what coverage does now.</li>\n<li>He has questions remaining that he wants help with:\n<ul>\n<li>Today coverage.py keeps everything in memory until the end of the process, then writes it all to disk. <strong>Q:</strong> Will we need something more sophisticated? Can we punt on that problem until later?</li>\n<li><strong>Q:</strong> Is it important to try to conserve memory?</li>\n<li>Today, the .coverage data files are basically JSON. This much data might need a different format. <strong>Q:</strong> Is it time for a SQLite data file?</li>\n<li><strong>Q:</strong> How would you use the data?</li>\n<li>And a couple more questions regarding reporting.</li>\n</ul></li>\n<li>I like the direction this is going and I encourage everyone who has some nonstandard usage of coverage to take a look at this and give Ned some feedback.</li>\n</ul>\n\n<p><a href=\"https://hackernoon.com/threaded-asynchronous-magic-and-how-to-wield-it-bba9ed602c32#.8qk30tq31\"><strong>#6 Threaded Asynchronous Magic and How to Wield It</strong></a>\n(by <a href=\"https://twitter.com/tryexceptpass\">Cristian Medina</a>)</p>\n\n<ul>\n<li>This is your async programming in Python 3.5+ via async / await article</li>\n<li>Covers: \n<ul>\n<li>Tasks</li>\n<li>Scheduling tasks</li>\n<li>Scatter / gather example</li>\n<li>Moving the asyncio loop to a background thread</li>\n</ul></li>\n<li>Examples:\n<ul>\n<li>Real World Example #1\u200a\u2014\u200aSending Notifications (email)</li>\n<li>Real World Example #2\u200a\u2014\u200aParallel Web Requests\n<ul>\n<li>via <a href=\"https://aiohttp.readthedocs.io/en/stable/\">aiohttp</a>: HTTP client/server for asyncio (PEP 3156)</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p><strong>Update: From episode 3: pynini</strong>\n<a href=\"https://en.m.wikipedia.org/wiki/P%C4%81%E1%B9%87ini\">https://en.m.wikipedia.org/wiki/P\u0101\u1e47ini</a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 12 Dec 2016 00:00:00 -0800", "published_parsed": [2016, 12, 12, 8, 0, 0, 0, 347, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python 3.6 is going to be awesome, Kite: your friendly co-developing AI", "itunes_episode": "6", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 6, recorded on Monday, December 12th. In this episode we discuss why Python 3.6 is going to be awesome, kite: your friendly co- developing AI, and more!"}], "itunes_duration": "00:19:33"}}, "#5 Legacy Python vs Python and why words matter and Request's 5 Whys retrospective": {"info": {"title": "#5 Legacy Python vs Python and why words matter and Request's 5 Whys retrospective", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#5 Legacy Python vs Python and why words matter and Request's 5 Whys retrospective"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/5/legacy-python-vs-python-and-why-words-matter-and-request-s-5-whys-retrospective"}, {"length": "17892662", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/5/legacy-python-vs-python-and-why-words-matter-and-request-s-5-whys-retrospective.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/5/legacy-python-vs-python-and-why-words-matter-and-request-s-5-whys-retrospective", "id": "https://pythonbytes.fm/episodes/download/5/legacy-python-vs-python-and-why-words-matter-and-request-s-5-whys-retrospective.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 5, recorded on December 5, 2016. In this episode we discuss Legacy Python vs Python and why words matter and Request's 5 Whys retrospective.   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><strong>#1 The Five Why\u2019s of Requests 2.12</strong>\n<a href=\"https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/\">https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/</a></p>\n\n<ul>\n<li>Some decision we made breaks a whole bunch of people\u2019s code, and then each fix we attempt to make produces new, unforseen problems. These releases can be very dispiriting for project maintainers, because they make it seem like every time we try to improve something we get stuck on the mistakes our past selves made.</li>\n<li>Requests has had a few of these in the past, and right now we appear to be in the middle of another one. So far the 2.12 release series has caused problems for a number of users</li>\n<li>Problem: The current release of Requests, v2.12.2, breaks anyone who uses a URL with a scheme that isn\u2019t \u201chttp\u201d or \u201chttps\u201d and who passes the params keyword to a Requests URL.</li>\n<li>Ultimately, our current issue comes from the fact that we have been inconsistent on our stance regarding URLs with weird schemes</li>\n</ul>\n\n<p><strong>#2 Planning an Early Death for Python 2</strong>\n<a href=\"https://carreau.github.io/posts/planning-an-early-death-for-python-2.html\">https://carreau.github.io/posts/planning-an-early-death-for-python-2.html</a>\nvia <a href=\"https://twitter.com/mbussonn\">https://twitter.com/mbussonn</a></p>\n\n<ul>\n<li>From Data Structure for Data Science workshop gathered at UC Berkeley's BIDS [Berkeley Institute for Data Science]</li>\n<li>Out of the discussion arose a topic that has long plagued the python community at large: code that requires legacy Python 2.7 is holding back the development of data-science toolsets and \u2013 by extension \u2013 the progress of data science as a whole. Python 2.7 was an important part of the history of scientific computing, but now it should be left as part of that history. Thus, we convened a small working group to plan an early death for Legacy Python.</li>\n<li>So what are the step we can do to push the transition forward?</li>\n<li>Choose your words:\n<ul>\n<li>Assume that Python 3 is just Python, and refer to Python 2 as legacy python.</li>\n<li>Refer to Legacy Python in the past tense (reinforce the old and deprecated state of Legacy Python)</li>\n</ul></li>\n<li>Make your examples/documentation Python 3 only\n<ul>\n<li>Sprinkle with function annotation, and async/await keyword can help with communicating your example are Python 3 only\u2026</li>\n</ul></li>\n<li>Ask user to reproduce but on up-to-date Python version</li>\n<li>Testing: Make sure that all the project you care about have continuous integration on Python 3</li>\n</ul>\n\n<p><strong>#3 Simplifying complex business logic with Python's Kanren</strong>\n<a href=\"https://jeffersonheard.github.io/2016/11/simplifying-complex-business-logic-with-pythons-kanren/\">https://jeffersonheard.github.io/2016/11/simplifying-complex-business-logic-with-pythons-kanren/</a></p>\n\n<p><strong>#4 If Reddit were written from scratch today, which Python web framework would it use and why?</strong>\n<a href=\"https://www.reddit.com/r/Python/comments/5gdckn/if_reddit_were_written_from_scratch_today_which/\">https://www.reddit.com/r/Python/comments/5gdckn/if_reddit_were_written_from_scratch_today_which/</a> </p>\n\n<ul>\n<li>Today (from SQLAlchemy's page): Reddit is one of the biggest social news aggregators on the internet. Reddit is built using Pylons, Mako templates, and a custom, non-ORM database abstraction layer built on SQLAlchemy Core.</li>\n<li>Ergo14: I would say that the most sane option would be Pyramid. It is faster than Django in tests and it doesn't repeat mistakes with threadlocals that flask or pylons did in past. I did some both small and medium-big (20+ million user applications) and it just feels right. It doesn't try to get in your way and give you magic solutions to your problems.</li>\n<li>Wting: I'm assuming you're talking about reddit at its current scale.\nNot Flask. Too many global variables and it's not thread safe (for async).\nNot Django. It's too opinionated and everything is in-housed for scaling reasons.\nMy guess is Pyramid (the successor to Pylons). In fact, that's what reddit's current and future services are built with.</li>\n<li>So, Python web frameworks tend to cause a very strong, very subjective split in opinion.</li>\n</ul>\n\n<p><strong>#5: Two testing related articles</strong></p>\n\n<ul>\n<li><strong>Getting started with pytest</strong>\n<a href=\"https://jacobian.org/writing/getting-started-with-pytest/\">https://jacobian.org/writing/getting-started-with-pytest/</a>\n<ul>\n<li>Anything that promotes pytest without presenting wrong information is good</li>\n</ul></li>\n<li><p><strong>The Best New Feature in unittest You Didn\u2019t Know You Need</strong>\n<a href=\"https://hackernoon.com/the-best-new-feature-in-unittest-you-didnt-know-you-need-e0d26c213dce\">https://hackernoon.com/the-best-new-feature-in-unittest-you-didnt-know-you-need-e0d26c213dce</a></p>\n\n<ul>\n<li>First article I\u2019ve seen explaining subtest</li>\n<li>Subtest was added in Python 3.4</li>\n</ul></li>\n</ul>\n\n<p><strong>#6 PyTone</strong>\n<a href=\"https://www.luga.de/pytone/\">https://www.luga.de/pytone/</a> \nPyTone is a music jukebox written in Python with a curses based GUI. While providing advanced features like crossfading and multiple players, special emphasis is put on ease of use, turning PyTone into an ideal jukebox system for use at parties.</p>\n\n<p>Thx @kidpixo: <a href=\"https://twitter.com/kidpixo/status/803345072414740480\">https://twitter.com/kidpixo/status/803345072414740480</a></p>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 5, recorded on December 5, 2016. In this episode we discuss Legacy Python vs Python and why words matter and Request's 5 Whys retrospective.   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><strong>#1 The Five Why\u2019s of Requests 2.12</strong>\n<a href=\"https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/\">https://lukasa.co.uk/2016/11/Five_Whys_Requests_212/</a></p>\n\n<ul>\n<li>Some decision we made breaks a whole bunch of people\u2019s code, and then each fix we attempt to make produces new, unforseen problems. These releases can be very dispiriting for project maintainers, because they make it seem like every time we try to improve something we get stuck on the mistakes our past selves made.</li>\n<li>Requests has had a few of these in the past, and right now we appear to be in the middle of another one. So far the 2.12 release series has caused problems for a number of users</li>\n<li>Problem: The current release of Requests, v2.12.2, breaks anyone who uses a URL with a scheme that isn\u2019t \u201chttp\u201d or \u201chttps\u201d and who passes the params keyword to a Requests URL.</li>\n<li>Ultimately, our current issue comes from the fact that we have been inconsistent on our stance regarding URLs with weird schemes</li>\n</ul>\n\n<p><strong>#2 Planning an Early Death for Python 2</strong>\n<a href=\"https://carreau.github.io/posts/planning-an-early-death-for-python-2.html\">https://carreau.github.io/posts/planning-an-early-death-for-python-2.html</a>\nvia <a href=\"https://twitter.com/mbussonn\">https://twitter.com/mbussonn</a></p>\n\n<ul>\n<li>From Data Structure for Data Science workshop gathered at UC Berkeley's BIDS [Berkeley Institute for Data Science]</li>\n<li>Out of the discussion arose a topic that has long plagued the python community at large: code that requires legacy Python 2.7 is holding back the development of data-science toolsets and \u2013 by extension \u2013 the progress of data science as a whole. Python 2.7 was an important part of the history of scientific computing, but now it should be left as part of that history. Thus, we convened a small working group to plan an early death for Legacy Python.</li>\n<li>So what are the step we can do to push the transition forward?</li>\n<li>Choose your words:\n<ul>\n<li>Assume that Python 3 is just Python, and refer to Python 2 as legacy python.</li>\n<li>Refer to Legacy Python in the past tense (reinforce the old and deprecated state of Legacy Python)</li>\n</ul></li>\n<li>Make your examples/documentation Python 3 only\n<ul>\n<li>Sprinkle with function annotation, and async/await keyword can help with communicating your example are Python 3 only\u2026</li>\n</ul></li>\n<li>Ask user to reproduce but on up-to-date Python version</li>\n<li>Testing: Make sure that all the project you care about have continuous integration on Python 3</li>\n</ul>\n\n<p><strong>#3 Simplifying complex business logic with Python's Kanren</strong>\n<a href=\"https://jeffersonheard.github.io/2016/11/simplifying-complex-business-logic-with-pythons-kanren/\">https://jeffersonheard.github.io/2016/11/simplifying-complex-business-logic-with-pythons-kanren/</a></p>\n\n<p><strong>#4 If Reddit were written from scratch today, which Python web framework would it use and why?</strong>\n<a href=\"https://www.reddit.com/r/Python/comments/5gdckn/if_reddit_were_written_from_scratch_today_which/\">https://www.reddit.com/r/Python/comments/5gdckn/if_reddit_were_written_from_scratch_today_which/</a> </p>\n\n<ul>\n<li>Today (from SQLAlchemy's page): Reddit is one of the biggest social news aggregators on the internet. Reddit is built using Pylons, Mako templates, and a custom, non-ORM database abstraction layer built on SQLAlchemy Core.</li>\n<li>Ergo14: I would say that the most sane option would be Pyramid. It is faster than Django in tests and it doesn't repeat mistakes with threadlocals that flask or pylons did in past. I did some both small and medium-big (20+ million user applications) and it just feels right. It doesn't try to get in your way and give you magic solutions to your problems.</li>\n<li>Wting: I'm assuming you're talking about reddit at its current scale.\nNot Flask. Too many global variables and it's not thread safe (for async).\nNot Django. It's too opinionated and everything is in-housed for scaling reasons.\nMy guess is Pyramid (the successor to Pylons). In fact, that's what reddit's current and future services are built with.</li>\n<li>So, Python web frameworks tend to cause a very strong, very subjective split in opinion.</li>\n</ul>\n\n<p><strong>#5: Two testing related articles</strong></p>\n\n<ul>\n<li><strong>Getting started with pytest</strong>\n<a href=\"https://jacobian.org/writing/getting-started-with-pytest/\">https://jacobian.org/writing/getting-started-with-pytest/</a>\n<ul>\n<li>Anything that promotes pytest without presenting wrong information is good</li>\n</ul></li>\n<li><p><strong>The Best New Feature in unittest You Didn\u2019t Know You Need</strong>\n<a href=\"https://hackernoon.com/the-best-new-feature-in-unittest-you-didnt-know-you-need-e0d26c213dce\">https://hackernoon.com/the-best-new-feature-in-unittest-you-didnt-know-you-need-e0d26c213dce</a></p>\n\n<ul>\n<li>First article I\u2019ve seen explaining subtest</li>\n<li>Subtest was added in Python 3.4</li>\n</ul></li>\n</ul>\n\n<p><strong>#6 PyTone</strong>\n<a href=\"https://www.luga.de/pytone/\">https://www.luga.de/pytone/</a> \nPyTone is a music jukebox written in Python with a curses based GUI. While providing advanced features like crossfading and multiple players, special emphasis is put on ease of use, turning PyTone into an ideal jukebox system for use at parties.</p>\n\n<p>Thx @kidpixo: <a href=\"https://twitter.com/kidpixo/status/803345072414740480\">https://twitter.com/kidpixo/status/803345072414740480</a></p>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 05 Dec 2016 00:00:00 -0800", "published_parsed": [2016, 12, 5, 8, 0, 0, 0, 340, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Legacy Python vs Python and why words matter and Request's 5 Whys retrospective", "itunes_episode": "5", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 5, recorded on December 5, 2016. In this episode we discuss Legacy Python vs Python and why words matter and Request's 5 Whys retrospective."}], "itunes_duration": "00:18:30"}}, "#4 Python 3 is just fine for beginners thank you, q is awesome for debugging, and more": {"info": {"title": "#4 Python 3 is just fine for beginners thank you, q is awesome for debugging, and more", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#4 Python 3 is just fine for beginners thank you, q is awesome for debugging, and more"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/4/python-3-is-just-fine-for-beginners-thank-you-q-is-awesome-for-debugging-and-more"}, {"length": "20419113", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/4/python-3-is-just-fine-for-beginners-thank-you-q-is-awesome-for-debugging-and-more.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/4/python-3-is-just-fine-for-beginners-thank-you-q-is-awesome-for-debugging-and-more", "id": "https://pythonbytes.fm/episodes/download/4/python-3-is-just-fine-for-beginners-thank-you-q-is-awesome-for-debugging-and-more.mp3", "guidislink": false, "summary": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 4: recorded on November 28, 2016. In this episode we cover the case for Python 3, asyncio, pyston, pydoc.io, and q.   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><strong>The Case FOR Python 3</strong></p>\n\n<pre><code>&gt;&gt; \"It's as simple as that. If you learn Python 2, then you can still work with all the legacy Python 2 code in existence **until Python dies or you (hopefully) move on**. But if you learn Python 3 then your future is very uncertain. You could really be learning a dead language and end up having to learn Python 2 anyway.\" -- Zed S.\n</code></pre>\n\n<ul>\n<li>This is harmful to the Python community.</li>\n<li>Let's stop recommending this book and stop elevating this guy's work</li>\n<li>\"Arguments\" from Zed:\n<ul>\n<li>Not In Your Best Interests: \"The Python project\u2019s efforts to convince you to start with Python 3 are not in your best interest, but, rather, are only in the best interests of the Python project.\"</li>\n<li>You Should Be Able to Run 2 and 3 (in the same process). The fact that no one has (yet) written a Python 3 interpreter that can simultaneously run Python 2 in the same process means Python 3 is not Turing complete</li>\n<li>Difficult To Use Strings: \"The strings in Python 3 are very difficult to use for beginners. In an attempt to make their strings more \u201cinternational\u201d they turned them into difficult to use types with poor error messages.\"</li>\n<li>Final analysis: \n<ul>\n<li>You can\u2019t add b\"hello\" to \"hello\".</li>\n<li>Too many formatting choices for strings</li>\n<li>Bytes aren't automatically decoded to strings</li>\n</ul></li>\n<li>Therefore: All newbies should avoid Python 3 like the plague - it will curse your career and cloud your judgement.</li>\n</ul></li>\n<li>Excellent rebuttal article: <a href=\"https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/\"><strong>Rebuttal for Python 3</strong></a></li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5ecj2o/asyncio_for_the_working_python_developer_just/?st=IVYVG4CT&amp;sh=34a66cab\"><strong>Reddit discussion of a Feb article on &quot;AsyncIO for the Working Python Developer&quot;</strong></a>\n- Article: <a href=\"https://hackernoon.com/asyncio-for-the-working-python-developer-5c468e6e2e8e#.ft56qol06\">AsyncIO for the Working Python Developer</a></p>\n\n<ul>\n<li>Article is a nice introduction, but uses Python 3.4 syntax</li>\n<li>Interesting to note that no one in the reddit comments suggests a better 3.5 tutorial. Is async/await just too confusing for a 3.5 intro article? Or is it so simple that no one has thought it needs a tutorial. </li>\n<li>23 page article / tutorial on Python 3.4's asyncio</li>\n<li>Not covering Python 3.5's async / await, but great gateway article</li>\n<li>Here\u2019s a call for action. Someone write a similar article but with 3.5+ syntax. Also could we show examples without sleep calls. Sleep is such a lame way to show \u201cdo some actual work\u201d. Maybe use a producer/consumer or reader/writer example or something.</li>\n</ul>\n\n<p><a href=\"https://blog.pyston.org/2016/11/11/pyston-0-6-released/\"><strong>Pyston 0.6 released</strong></a></p>\n\n<ul>\n<li>Pyston is an open source Python implementation that aims to be both highly compatible and high-performance. </li>\n<li>It uses modern JIT techniques and natively supports many CPython C extension modules. </li>\n<li>Pyston is sponsored by Dropbox, and is pronounced \"piston\".</li>\n<li>main goal was to reduce the overall memory footprint.  It also contains a lot of additional smaller changes for improving compatibility and fixing bugs.\n<ul>\n<li>We also spent time on making it easier to replace CPython with Pyston, such as by more closely matching its directory structure </li>\n<li>following its \u2018dict\u2019 ordering.  </li>\n<li>We can now, for example, run pip and virtualenv unmodified, without requiring any upstream patches like other implementations do.</li>\n</ul></li>\n<li>Unclear how much of a research project vs an actual project this is at the moment</li>\n</ul>\n\n<p><a href=\"http://blog.readthedocs.com/announcing-pydoc-io/\"><strong>Announcing pydoc.io</strong></a></p>\n\n<ul>\n<li>Automatic API documentation from pypi repositories.</li>\n<li>Pydoc.io will eventually auto-generate API reference documentation for every package on PyPI.</li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5f6ev8/what_one_thing_took_your_python_to_the_next_level/\"><strong>What one thing took your Python to the next level</strong></a></p>\n\n<ol>\n<li>Mastering generators</li>\n<li>Understanding how iteration really works in Python opens up many possibilities for elegant, high performance code. Use iPython. Learn that for does tuple unpacking; play with zip, enumerate, all, any; take a look at the itertools module</li>\n<li>Unit tests! Pytest in particular! Gives you a whole new perspective on your code and dammit, it's so satisfying to get all those green OKs!</li>\n<li>list comprehensions</li>\n<li>For me, all the work of David Beazley, in particular <a href=\"http://www.dabeaz.com/coroutines/\">http://www.dabeaz.com/coroutines/</a></li>\n</ol>\n\n<p><a href=\"https://pypi.python.org/pypi/q\"><strong>q : Quick-and-dirty debugging output for tired programmers</strong></a></p>\n\n<ul>\n<li>Learned about it from a tweet from Luciano Ramalho.</li>\n<li><a href=\"https://twitter.com/ramalhoorg/status/802673217081065472\">https://twitter.com/ramalhoorg/status/802673217081065472</a></li>\n<li>5 min lightning talk: <a href=\"https://youtu.be/OL3De8BAhME?t=25m20s\">https://youtu.be/OL3De8BAhME?t=25m20s</a> </li>\n<li>q on pypi: <a href=\"https://pypi.python.org/pypi/q\">https://pypi.python.org/pypi/q</a></li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Michael</h3>\n\n<ul>\n<li>Follow up: <a href=\"https://www.python.org/dev/peps/pep-0494/\">https://www.python.org/dev/peps/pep-0494/</a> Python 3.6 Release Schedule Final date: 2016-12-16</li>\n</ul>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Hard at work on pytest book that is a followup to current <a href=\"http://pythontesting.net/book\">Python Testing book</a>.</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 4: recorded on November 28, 2016. In this episode we cover the case for Python 3, asyncio, pyston, pydoc.io, and q.   </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><strong>The Case FOR Python 3</strong></p>\n\n<pre><code>&gt;&gt; \"It's as simple as that. If you learn Python 2, then you can still work with all the legacy Python 2 code in existence **until Python dies or you (hopefully) move on**. But if you learn Python 3 then your future is very uncertain. You could really be learning a dead language and end up having to learn Python 2 anyway.\" -- Zed S.\n</code></pre>\n\n<ul>\n<li>This is harmful to the Python community.</li>\n<li>Let's stop recommending this book and stop elevating this guy's work</li>\n<li>\"Arguments\" from Zed:\n<ul>\n<li>Not In Your Best Interests: \"The Python project\u2019s efforts to convince you to start with Python 3 are not in your best interest, but, rather, are only in the best interests of the Python project.\"</li>\n<li>You Should Be Able to Run 2 and 3 (in the same process). The fact that no one has (yet) written a Python 3 interpreter that can simultaneously run Python 2 in the same process means Python 3 is not Turing complete</li>\n<li>Difficult To Use Strings: \"The strings in Python 3 are very difficult to use for beginners. In an attempt to make their strings more \u201cinternational\u201d they turned them into difficult to use types with poor error messages.\"</li>\n<li>Final analysis: \n<ul>\n<li>You can\u2019t add b\"hello\" to \"hello\".</li>\n<li>Too many formatting choices for strings</li>\n<li>Bytes aren't automatically decoded to strings</li>\n</ul></li>\n<li>Therefore: All newbies should avoid Python 3 like the plague - it will curse your career and cloud your judgement.</li>\n</ul></li>\n<li>Excellent rebuttal article: <a href=\"https://eev.ee/blog/2016/11/23/a-rebuttal-for-python-3/\"><strong>Rebuttal for Python 3</strong></a></li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5ecj2o/asyncio_for_the_working_python_developer_just/?st=IVYVG4CT&amp;sh=34a66cab\"><strong>Reddit discussion of a Feb article on &quot;AsyncIO for the Working Python Developer&quot;</strong></a>\n- Article: <a href=\"https://hackernoon.com/asyncio-for-the-working-python-developer-5c468e6e2e8e#.ft56qol06\">AsyncIO for the Working Python Developer</a></p>\n\n<ul>\n<li>Article is a nice introduction, but uses Python 3.4 syntax</li>\n<li>Interesting to note that no one in the reddit comments suggests a better 3.5 tutorial. Is async/await just too confusing for a 3.5 intro article? Or is it so simple that no one has thought it needs a tutorial. </li>\n<li>23 page article / tutorial on Python 3.4's asyncio</li>\n<li>Not covering Python 3.5's async / await, but great gateway article</li>\n<li>Here\u2019s a call for action. Someone write a similar article but with 3.5+ syntax. Also could we show examples without sleep calls. Sleep is such a lame way to show \u201cdo some actual work\u201d. Maybe use a producer/consumer or reader/writer example or something.</li>\n</ul>\n\n<p><a href=\"https://blog.pyston.org/2016/11/11/pyston-0-6-released/\"><strong>Pyston 0.6 released</strong></a></p>\n\n<ul>\n<li>Pyston is an open source Python implementation that aims to be both highly compatible and high-performance. </li>\n<li>It uses modern JIT techniques and natively supports many CPython C extension modules. </li>\n<li>Pyston is sponsored by Dropbox, and is pronounced \"piston\".</li>\n<li>main goal was to reduce the overall memory footprint.  It also contains a lot of additional smaller changes for improving compatibility and fixing bugs.\n<ul>\n<li>We also spent time on making it easier to replace CPython with Pyston, such as by more closely matching its directory structure </li>\n<li>following its \u2018dict\u2019 ordering.  </li>\n<li>We can now, for example, run pip and virtualenv unmodified, without requiring any upstream patches like other implementations do.</li>\n</ul></li>\n<li>Unclear how much of a research project vs an actual project this is at the moment</li>\n</ul>\n\n<p><a href=\"http://blog.readthedocs.com/announcing-pydoc-io/\"><strong>Announcing pydoc.io</strong></a></p>\n\n<ul>\n<li>Automatic API documentation from pypi repositories.</li>\n<li>Pydoc.io will eventually auto-generate API reference documentation for every package on PyPI.</li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5f6ev8/what_one_thing_took_your_python_to_the_next_level/\"><strong>What one thing took your Python to the next level</strong></a></p>\n\n<ol>\n<li>Mastering generators</li>\n<li>Understanding how iteration really works in Python opens up many possibilities for elegant, high performance code. Use iPython. Learn that for does tuple unpacking; play with zip, enumerate, all, any; take a look at the itertools module</li>\n<li>Unit tests! Pytest in particular! Gives you a whole new perspective on your code and dammit, it's so satisfying to get all those green OKs!</li>\n<li>list comprehensions</li>\n<li>For me, all the work of David Beazley, in particular <a href=\"http://www.dabeaz.com/coroutines/\">http://www.dabeaz.com/coroutines/</a></li>\n</ol>\n\n<p><a href=\"https://pypi.python.org/pypi/q\"><strong>q : Quick-and-dirty debugging output for tired programmers</strong></a></p>\n\n<ul>\n<li>Learned about it from a tweet from Luciano Ramalho.</li>\n<li><a href=\"https://twitter.com/ramalhoorg/status/802673217081065472\">https://twitter.com/ramalhoorg/status/802673217081065472</a></li>\n<li>5 min lightning talk: <a href=\"https://youtu.be/OL3De8BAhME?t=25m20s\">https://youtu.be/OL3De8BAhME?t=25m20s</a> </li>\n<li>q on pypi: <a href=\"https://pypi.python.org/pypi/q\">https://pypi.python.org/pypi/q</a></li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Michael</h3>\n\n<ul>\n<li>Follow up: <a href=\"https://www.python.org/dev/peps/pep-0494/\">https://www.python.org/dev/peps/pep-0494/</a> Python 3.6 Release Schedule Final date: 2016-12-16</li>\n</ul>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Hard at work on pytest book that is a followup to current <a href=\"http://pythontesting.net/book\">Python Testing book</a>.</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Tue, 29 Nov 2016 00:00:00 -0800", "published_parsed": [2016, 11, 29, 8, 0, 0, 1, 334, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python 3 is just fine for beginners thank you, q is awesome for debugging, and more", "itunes_episode": "4", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "This is Python Bytes, Python headlines and news deliver directly to your earbuds: episode 4: recorded on November 28, 2016. In this episode we cover the case for Python 3, asyncio, pyston, pydoc.io, and q."}], "itunes_duration": "00:21:08"}}, "#3 Python 3.6 is coming, and it's awesome plus superior text processing with Pynini": {"info": {"title": "#3 Python 3.6 is coming, and it's awesome plus superior text processing with Pynini", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#3 Python 3.6 is coming, and it's awesome plus superior text processing with Pynini"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/3/python-3.6-is-coming-and-it-s-awesome-plus-superior-text-processing-with-pynini"}, {"length": "28638698", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/3/python-3.6-is-coming-and-it-s-awesome-plus-superior-text-processing-with-pynini.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/3/python-3.6-is-coming-and-it-s-awesome-plus-superior-text-processing-with-pynini", "id": "https://pythonbytes.fm/episodes/download/3/python-3.6-is-coming-and-it-s-awesome-plus-superior-text-processing-with-pynini.mp3", "guidislink": false, "summary": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this episode we cover the new features in Python 3.6, text processing with Pynini, Python is 2nd most popular language on GitHub and more.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://www.oreilly.com/ideas/how-to-get-superior-text-processing-in-python-with-pynini\"><strong>How to get superior text processing with Pynini</strong></a></p>\n\n<ul>\n<li>how to change your thinking from regular expression matching to FSAs (finite-state acceptor), then FSTs.</li>\n<li>Example using cheese names (love the Python tradition with that).</li>\n<li>library developed at Google called pynini for easily using FSTs</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html\"><strong>Python 3.6 b4 Is out! (beta!!!)</strong></a></p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep498\">PEP 498</a>, formatted string literals.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep515\">PEP 515</a>, underscores in numeric literals.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep525\">PEP 525</a>, asynchronous generators.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep530\">PEP 530</a>: asynchronous comprehensions.</li>\n<li>The <strong>dict</strong> type has been reimplemented to use a faster, more compact representation similar to the PyPy dict implementation. This resulted in dictionaries using 20% to 25% less memory when compared to Python 3.5.</li>\n<li>The class attribute definition order is now preserved.</li>\n<li><strong>Security</strong>: The new secrets module has been added to simplify the generation of cryptographically strong pseudo-random numbers suitable for managing secrets such as account authentication, tokens, and similar.</li>\n<li><strong>Windows</strong>: python.exe and pythonw.exe have been marked as long-path aware, which means that when the 260 character path limit may no longer apply. See removing the MAX_PATH limitation for details.</li>\n</ul>\n\n<p><a href=\"http://www.dougalmatthews.com/2016/Nov/12/create-an-excellent-python-dev-env/\"><strong>Create an Excellent Python Dev Env</strong></a></p>\n\n<ul>\n<li>pyenv, like virtualenv, I think, but independent of Python.</li>\n<li>pyenv-virtualenv instead of virtualenvwrapper</li>\n<li>pipsi - a tool to let you install python based CLI utilities in their own virtualenv easily. </li>\n<li>Tools he installs with pipsi:\n<ul>\n<li>tox - testing multiple environments</li>\n<li>mkdocs - documentation static site generator</li>\n<li>git-review - gerrit integration with git. </li>\n<li>flake8 - static analysis</li>\n</ul></li>\n<li>He also mentions a shell called fish, which I hadn\u2019t heard of before.</li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5craf4/github_language_statistics_python_is_2nd_most/\"><strong>GitHub language statistics, Python is 2nd most popular language</strong></a></p>\n\n<ul>\n<li>An active repository should meet this requirements:\ncreated or updated during the evaluated period,\n<ul>\n<li>at least one star</li>\n<li>at least one fork</li>\n<li>a size larger than 10 Kb</li>\n</ul></li>\n<li>JavaScript is likely over counted</li>\n</ul>\n\n<p><a href=\"http://blog.emacsos.com/unicode-in-python.html\"><strong>Handling Unicode Strings in Python</strong></a></p>\n\n<ul>\n<li>Text Representation in Python and the differences between 2.7 and 3.4+</li>\n<li>Converting between unicode strings and bytes</li>\n<li>IO boundary issues with databases, file system, or network services</li>\n<li>Logging</li>\n<li>JSON encoding</li>\n<li>Redis</li>\n<li>A pointer to a 2012 article from Ned Batchelder called Pragmatic Unicode.</li>\n</ul>\n\n<p><a href=\"https://github.com/Microsoft/vscode-python\"><strong>Python extensions for VS Code for Mac / PC / Linux</strong></a></p>\n\n<ul>\n<li>Linting (Prospector, Pylint, pycodestyle/Pep8, Flake8, pylama, pydocstyle with config files and plugins)</li>\n<li>Intellisense (autocompletion with support for PEP-0484)</li>\n<li>Scientific tools (Jupyter/IPython)</li>\n<li>Auto indenting</li>\n<li>Code formatting (autopep8, yapf, with config files)</li>\n<li>Code refactoring (Rename, Extract Variable, Extract Method, Sort Imports)</li>\n<li>Viewing references, code navigation, view signature</li>\n<li>Excellent debugging support (remote debugging over SSH, mutliple threads, django, flask)</li>\n<li>Unit testing, including debugging (unittest, pytest, nosetests, with config files)</li>\n<li>Execute file or code in a python terminal</li>\n<li>Local help file (offline documentation)</li>\n<li>Snippets</li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Lot\u2019s of writing. My target is to get the book in print by PyCon US 2017 in May. But that\u2019s an aggressive schedule with the rest of my projects.</li>\n<li>Still working on getting #25 out the door. Interview with Dave Hunt from Mozilla about Selenium, Mozilla, pytest, tox, CI, and much more. Should go out within the next couple of days. </li>\n<li>Next interview scheduled is with David Hussman from DevJam. This will be a higher level discussion about software development practices. Look for that this month also.</li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li>Shipped: <a href=\"https://talkpython.fm/episodes/show/85/parsing-horrible-things-with-python\">Episode #85: Parsing horrible things with Python</a></li>\n<li>Quick correction: github's awesome-python isn't the newsletter, that's <a href=\"https://python.libhunt.com\">https://python.libhunt.com</a></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this episode we cover the new features in Python 3.6, text processing with Pynini, Python is 2nd most popular language on GitHub and more.  </p>\n\n<p>This episode was brought to you by <a href=\"http://rollbar.com/pythonbytes\">Rollbar: they help you take the pain out of errors</a>.</p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://www.oreilly.com/ideas/how-to-get-superior-text-processing-in-python-with-pynini\"><strong>How to get superior text processing with Pynini</strong></a></p>\n\n<ul>\n<li>how to change your thinking from regular expression matching to FSAs (finite-state acceptor), then FSTs.</li>\n<li>Example using cheese names (love the Python tradition with that).</li>\n<li>library developed at Google called pynini for easily using FSTs</li>\n</ul>\n\n<p><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html\"><strong>Python 3.6 b4 Is out! (beta!!!)</strong></a></p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep498\">PEP 498</a>, formatted string literals.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep515\">PEP 515</a>, underscores in numeric literals.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep525\">PEP 525</a>, asynchronous generators.</li>\n<li><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep530\">PEP 530</a>: asynchronous comprehensions.</li>\n<li>The <strong>dict</strong> type has been reimplemented to use a faster, more compact representation similar to the PyPy dict implementation. This resulted in dictionaries using 20% to 25% less memory when compared to Python 3.5.</li>\n<li>The class attribute definition order is now preserved.</li>\n<li><strong>Security</strong>: The new secrets module has been added to simplify the generation of cryptographically strong pseudo-random numbers suitable for managing secrets such as account authentication, tokens, and similar.</li>\n<li><strong>Windows</strong>: python.exe and pythonw.exe have been marked as long-path aware, which means that when the 260 character path limit may no longer apply. See removing the MAX_PATH limitation for details.</li>\n</ul>\n\n<p><a href=\"http://www.dougalmatthews.com/2016/Nov/12/create-an-excellent-python-dev-env/\"><strong>Create an Excellent Python Dev Env</strong></a></p>\n\n<ul>\n<li>pyenv, like virtualenv, I think, but independent of Python.</li>\n<li>pyenv-virtualenv instead of virtualenvwrapper</li>\n<li>pipsi - a tool to let you install python based CLI utilities in their own virtualenv easily. </li>\n<li>Tools he installs with pipsi:\n<ul>\n<li>tox - testing multiple environments</li>\n<li>mkdocs - documentation static site generator</li>\n<li>git-review - gerrit integration with git. </li>\n<li>flake8 - static analysis</li>\n</ul></li>\n<li>He also mentions a shell called fish, which I hadn\u2019t heard of before.</li>\n</ul>\n\n<p><a href=\"https://www.reddit.com/r/Python/comments/5craf4/github_language_statistics_python_is_2nd_most/\"><strong>GitHub language statistics, Python is 2nd most popular language</strong></a></p>\n\n<ul>\n<li>An active repository should meet this requirements:\ncreated or updated during the evaluated period,\n<ul>\n<li>at least one star</li>\n<li>at least one fork</li>\n<li>a size larger than 10 Kb</li>\n</ul></li>\n<li>JavaScript is likely over counted</li>\n</ul>\n\n<p><a href=\"http://blog.emacsos.com/unicode-in-python.html\"><strong>Handling Unicode Strings in Python</strong></a></p>\n\n<ul>\n<li>Text Representation in Python and the differences between 2.7 and 3.4+</li>\n<li>Converting between unicode strings and bytes</li>\n<li>IO boundary issues with databases, file system, or network services</li>\n<li>Logging</li>\n<li>JSON encoding</li>\n<li>Redis</li>\n<li>A pointer to a 2012 article from Ned Batchelder called Pragmatic Unicode.</li>\n</ul>\n\n<p><a href=\"https://github.com/Microsoft/vscode-python\"><strong>Python extensions for VS Code for Mac / PC / Linux</strong></a></p>\n\n<ul>\n<li>Linting (Prospector, Pylint, pycodestyle/Pep8, Flake8, pylama, pydocstyle with config files and plugins)</li>\n<li>Intellisense (autocompletion with support for PEP-0484)</li>\n<li>Scientific tools (Jupyter/IPython)</li>\n<li>Auto indenting</li>\n<li>Code formatting (autopep8, yapf, with config files)</li>\n<li>Code refactoring (Rename, Extract Variable, Extract Method, Sort Imports)</li>\n<li>Viewing references, code navigation, view signature</li>\n<li>Excellent debugging support (remote debugging over SSH, mutliple threads, django, flask)</li>\n<li>Unit testing, including debugging (unittest, pytest, nosetests, with config files)</li>\n<li>Execute file or code in a python terminal</li>\n<li>Local help file (offline documentation)</li>\n<li>Snippets</li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Lot\u2019s of writing. My target is to get the book in print by PyCon US 2017 in May. But that\u2019s an aggressive schedule with the rest of my projects.</li>\n<li>Still working on getting #25 out the door. Interview with Dave Hunt from Mozilla about Selenium, Mozilla, pytest, tox, CI, and much more. Should go out within the next couple of days. </li>\n<li>Next interview scheduled is with David Hussman from DevJam. This will be a higher level discussion about software development practices. Look for that this month also.</li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li>Shipped: <a href=\"https://talkpython.fm/episodes/show/85/parsing-horrible-things-with-python\">Episode #85: Parsing horrible things with Python</a></li>\n<li>Quick correction: github's awesome-python isn't the newsletter, that's <a href=\"https://python.libhunt.com\">https://python.libhunt.com</a></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Wed, 23 Nov 2016 00:00:00 -0800", "published_parsed": [2016, 11, 23, 8, 0, 0, 2, 328, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Python 3.6 is coming, and it's awesome plus superior text processing with Pynini", "itunes_episode": "3", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this episode we cover the new features in Python 3.6, text processing with Pynini, Python is 2nd most popular language on GitHub and more."}], "itunes_duration": "00:29:41"}}, "#2 PyCon, awesome python, python developer job prospects, and more": {"info": {"title": "#2 PyCon, awesome python, python developer job prospects, and more", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#2 PyCon, awesome python, python developer job prospects, and more"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/2/pycon-awesome-python-python-developer-job-prospects-and-more"}, {"length": "17068607", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/2/pycon-awesome-python-python-developer-job-prospects-and-more.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/2/pycon-awesome-python-python-developer-job-prospects-and-more", "id": "https://pythonbytes.fm/episodes/download/2/pycon-awesome-python-python-developer-job-prospects-and-more.mp3", "guidislink": false, "summary": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this second episode we cover a couple of key python package releases, pycon, awesome python, python developer job prospects, and more!   </p>\n\n<h2>News items</h2>\n\n<p><a href=\"http://docs.celeryproject.org/en/latest/whatsnew-4.0.html\"><strong>Celery 4.0</strong></a></p>\n\n<ul>\n<li>A task queue and scheduling subsystem</li>\n<li>Supposedly a massive release with over 2 years of changes</li>\n<li>Will be the last major release with Python 2.x support, already dropping 2.6</li>\n</ul>\n\n<p><a href=\"http://grodola.blogspot.com/2016/11/psutil-500-is-around-twice-as-fast.html\"><strong>Psutil 5.0.0</strong></a></p>\n\n<ul>\n<li>Used for process monitoring, system utilization, and other cross platform os things.</li>\n<li>We use it with some tools and it can be the bottleneck, so a speedup is very welcome.</li>\n</ul>\n\n<p><a href=\"http://doc.pytest.org/en/latest/changelog.html\"><strong>Pytest 3.0.4</strong></a></p>\n\n<ul>\n<li>Mostly a bug fix release. Check out the change log to see if you care about anything they fixed.</li>\n<li>Report teardown output on test failure. Already did report setup output.</li>\n</ul>\n\n<p><a href=\"http://us.pycon.org/2017/registration\"><strong>Registration is open for PyCon 2017!</strong></a></p>\n\n<ul>\n<li>Don't wait! Take advantage of the early bird discount </li>\n<li>We are having a booth!</li>\n</ul>\n\n<p><a href=\"http://pycon.blogspot.com/2016/11/tutorial-proposals-are-due-in-two-weeks.html\"><strong>PyCon Tutorial proposals due on November 30</strong></a></p>\n\n<ul>\n<li>Tutorial proposals are due on 2017 November 30</li>\n<li>Talk proposals will be due on 2017 January 3</li>\n<li>Poster proposals will be due on 2017 January 3\nWe'll be hosting a Podcast open session</li>\n</ul>\n\n<p><a href=\"https://github.com/vinta/awesome-python\"><strong>Github awesome-python</strong></a></p>\n\n<ul>\n<li>A curated list of awesome Python frameworks, libraries, software and resources</li>\n<li>A sampling of the topic areas:\n<ul>\n<li>Authentication</li>\n<li>Data Validation</li>\n<li>Date and Time</li>\n<li>Debugging Tools</li>\n<li>Machine Learning</li>\n<li>Search</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://hackernoon.com/timing-tests-in-python-for-fun-and-profit-166314457\"><strong>Timing Tests in Python for Fun and Profit</strong></a></p>\n\n<ul>\n<li>Fun example of how and why you'd ever want to customize a test runner.</li>\n<li>Final solution is pretty cool. However, I'm not sure if it includes setup/teardown time.</li>\n<li>BTW, pytest has this built in, <code>pytest --durations=0</code> time every setup, teardown, and test method. <code>pytest --durations=3</code> shows the slowest 3, etc. As well as shows the time of each. Also works on unittest code.</li>\n</ul>\n\n<p><a href=\"https://www.daxx.com/article/python-developer-salary-usa\"><strong>What's the Average Python Developer Salary in the US, and Why Is Python So Popular, Anyway?</strong></a></p>\n\n<ul>\n<li>2015 and 2016 have been big years for Python. According to the 2016 Developer Survey by StackOverflow, Python ranks as the world's sixth most popular programming language for the second year in a row, and is also rated the fourth most wanted technology of the year.</li>\n<li>Python is also one of the hottest tech skills to have, according to research by Dice, with demand slightly outstripping supply.</li>\n<li>Python is one of the highest-paying programming languages in the USA. In fact, at $103,492 per year or by Indeed - $116,129</li>\n<li>Why?\n<ul>\n<li>The world's tech giants love it. </li>\n<li>With the rise of data science, Python's popularity as a scientific language has soared</li>\n<li>It's perfect for beginners</li>\n<li>It might just be the only language you need</li>\n</ul></li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>T&amp;C #24: Raphael Pierzina, on cookie cutter, pytest 3.0, and contributing to both: <a href=\"http://pythontesting.net/podcast/24-pytest-raphael-pierzina/\">http://pythontesting.net/podcast/24-pytest-raphael-pierzina/</a> </li>\n<li>T&amp;C #25: Dave Hunt, recorded. Hope to get that out this week. We talk about his work on Selenium, pytest-selenium, pytest-html, tox, and how Mozilla does some of it's testing with these tools.</li>\n<li>Looking for more people to interview. A few in the pipeline, including David Hussman from <a href=\"http://devjam.com/\">http://devjam.com/</a>, but I'd love suggestions. Doesn't have to be testing. I'll be talking to David about Dude's Law, his view of modern agile practices, and other high level topics.</li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li><a href=\"http://pyvideo.org/ndc-oslo-2016/python-an-amazing-second-language-for-dotnet-developers.html\">Python: An Amazing Second Language for .NET Developers on PyVideo</a></li>\n<li><a href=\"http://pyvideo.org/ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html\">Mutation Testing in Python with Cosmic Ray on PyVideo</a></li>\n<li>New content in my <a href=\"https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business\">Python for Entrepreneurs course</a></li>\n<li><a href=\"https://talkpython.fm/\">Talk Python To Me</a> #85 is coming this week</li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this second episode we cover a couple of key python package releases, pycon, awesome python, python developer job prospects, and more!   </p>\n\n<h2>News items</h2>\n\n<p><a href=\"http://docs.celeryproject.org/en/latest/whatsnew-4.0.html\"><strong>Celery 4.0</strong></a></p>\n\n<ul>\n<li>A task queue and scheduling subsystem</li>\n<li>Supposedly a massive release with over 2 years of changes</li>\n<li>Will be the last major release with Python 2.x support, already dropping 2.6</li>\n</ul>\n\n<p><a href=\"http://grodola.blogspot.com/2016/11/psutil-500-is-around-twice-as-fast.html\"><strong>Psutil 5.0.0</strong></a></p>\n\n<ul>\n<li>Used for process monitoring, system utilization, and other cross platform os things.</li>\n<li>We use it with some tools and it can be the bottleneck, so a speedup is very welcome.</li>\n</ul>\n\n<p><a href=\"http://doc.pytest.org/en/latest/changelog.html\"><strong>Pytest 3.0.4</strong></a></p>\n\n<ul>\n<li>Mostly a bug fix release. Check out the change log to see if you care about anything they fixed.</li>\n<li>Report teardown output on test failure. Already did report setup output.</li>\n</ul>\n\n<p><a href=\"http://us.pycon.org/2017/registration\"><strong>Registration is open for PyCon 2017!</strong></a></p>\n\n<ul>\n<li>Don't wait! Take advantage of the early bird discount </li>\n<li>We are having a booth!</li>\n</ul>\n\n<p><a href=\"http://pycon.blogspot.com/2016/11/tutorial-proposals-are-due-in-two-weeks.html\"><strong>PyCon Tutorial proposals due on November 30</strong></a></p>\n\n<ul>\n<li>Tutorial proposals are due on 2017 November 30</li>\n<li>Talk proposals will be due on 2017 January 3</li>\n<li>Poster proposals will be due on 2017 January 3\nWe'll be hosting a Podcast open session</li>\n</ul>\n\n<p><a href=\"https://github.com/vinta/awesome-python\"><strong>Github awesome-python</strong></a></p>\n\n<ul>\n<li>A curated list of awesome Python frameworks, libraries, software and resources</li>\n<li>A sampling of the topic areas:\n<ul>\n<li>Authentication</li>\n<li>Data Validation</li>\n<li>Date and Time</li>\n<li>Debugging Tools</li>\n<li>Machine Learning</li>\n<li>Search</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://hackernoon.com/timing-tests-in-python-for-fun-and-profit-166314457\"><strong>Timing Tests in Python for Fun and Profit</strong></a></p>\n\n<ul>\n<li>Fun example of how and why you'd ever want to customize a test runner.</li>\n<li>Final solution is pretty cool. However, I'm not sure if it includes setup/teardown time.</li>\n<li>BTW, pytest has this built in, <code>pytest --durations=0</code> time every setup, teardown, and test method. <code>pytest --durations=3</code> shows the slowest 3, etc. As well as shows the time of each. Also works on unittest code.</li>\n</ul>\n\n<p><a href=\"https://www.daxx.com/article/python-developer-salary-usa\"><strong>What's the Average Python Developer Salary in the US, and Why Is Python So Popular, Anyway?</strong></a></p>\n\n<ul>\n<li>2015 and 2016 have been big years for Python. According to the 2016 Developer Survey by StackOverflow, Python ranks as the world's sixth most popular programming language for the second year in a row, and is also rated the fourth most wanted technology of the year.</li>\n<li>Python is also one of the hottest tech skills to have, according to research by Dice, with demand slightly outstripping supply.</li>\n<li>Python is one of the highest-paying programming languages in the USA. In fact, at $103,492 per year or by Indeed - $116,129</li>\n<li>Why?\n<ul>\n<li>The world's tech giants love it. </li>\n<li>With the rise of data science, Python's popularity as a scientific language has soared</li>\n<li>It's perfect for beginners</li>\n<li>It might just be the only language you need</li>\n</ul></li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>T&amp;C #24: Raphael Pierzina, on cookie cutter, pytest 3.0, and contributing to both: <a href=\"http://pythontesting.net/podcast/24-pytest-raphael-pierzina/\">http://pythontesting.net/podcast/24-pytest-raphael-pierzina/</a> </li>\n<li>T&amp;C #25: Dave Hunt, recorded. Hope to get that out this week. We talk about his work on Selenium, pytest-selenium, pytest-html, tox, and how Mozilla does some of it's testing with these tools.</li>\n<li>Looking for more people to interview. A few in the pipeline, including David Hussman from <a href=\"http://devjam.com/\">http://devjam.com/</a>, but I'd love suggestions. Doesn't have to be testing. I'll be talking to David about Dude's Law, his view of modern agile practices, and other high level topics.</li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li><a href=\"http://pyvideo.org/ndc-oslo-2016/python-an-amazing-second-language-for-dotnet-developers.html\">Python: An Amazing Second Language for .NET Developers on PyVideo</a></li>\n<li><a href=\"http://pyvideo.org/ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html\">Mutation Testing in Python with Cosmic Ray on PyVideo</a></li>\n<li>New content in my <a href=\"https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business\">Python for Entrepreneurs course</a></li>\n<li><a href=\"https://talkpython.fm/\">Talk Python To Me</a> #85 is coming this week</li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 14 Nov 2016 00:00:00 -0800", "published_parsed": [2016, 11, 14, 8, 0, 0, 0, 319, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "PyCon, awesome python, python developer job prospects, and more", "itunes_episode": "2", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this second episode we cover a couple of key python package releases, pycon, awesome python, python developer job prospects, and more!"}], "itunes_duration": "00:17:38"}}, "#1 Intro to the show and pip 9 is out!": {"info": {"title": "#1 Intro to the show and pip 9 is out!", "title_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "#1 Intro to the show and pip 9 is out!"}, "links": [{"rel": "alternate", "type": "text/html", "href": "https://pythonbytes.fm/episodes/show/1/intro-to-the-show-and-pip-9-is-out"}, {"length": "16117750", "type": "audio/mpeg", "href": "https://pythonbytes.fm/episodes/download/1/intro-to-the-show-and-pip-9-is-out.mp3", "rel": "enclosure"}], "link": "https://pythonbytes.fm/episodes/show/1/intro-to-the-show-and-pip-9-is-out", "id": "https://pythonbytes.fm/episodes/download/1/intro-to-the-show-and-pip-9-is-out.mp3", "guidislink": false, "summary": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this first episode we cover PyData videos, safety-db project, and more! </p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://www.youtube.com/playlist?list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB\"><strong>PyData DC 2016 videos are out</strong></a></p>\n\n<ul>\n<li>64 videos (30 hours)</li>\n<li>Some standout videos</li>\n<li>ElasticSearch and Redis How and When to Use Them</li>\n<li>Renee Teate | Becoming a Data Scientist Advice From My Podcast Guests (becoming a data scientist podcast)</li>\n<li>Visual diagnostics for more informed machine learning</li>\n<li>You got your engineering in my Data Science: Addressing the reproducibility crisis</li>\n</ul>\n\n<p><a href=\"https://github.com/stedmeister/easyargs\"><strong>easyargs</strong></a></p>\n\n<ul>\n<li>A python module to make handling command line arguments easy</li>\n<li>There are many ways to create a command line parser in python: argparse, docopt, click. These are all great options, but require quite a lot of configuration and sometimes you just need a function to be called. Enter easyargs. Define the function that you want to be called, decorate it and let easyargs work out the command line.</li>\n</ul>\n\n<p><a href=\"https://github.com/pyupio/safety-db\"><strong>safety-db</strong> via github</a></p>\n\n<ul>\n<li>A curated database of insecure Python packages</li>\n<li><strong>What is this?</strong> This is an effort to collect all known security vulnerabilities in Python packages and make them available to consume for humans and automated tools.</li>\n<li><strong>What is this not?</strong> This is not a hall of shame, or a list of packages to avoid. The package maintainers show a great responsibility by documenting and fixing security issues in such a way that they can be listed here. That's extremely valuable when considering using a package in production.</li>\n</ul>\n\n<p><a href=\"https://github.com/lengstrom/fast-style-transfer\"><strong>fast-style-transfer</strong></a></p>\n\n<ul>\n<li>Since A-Ha's take on me video, I've loved the idea of short video done in stylized art format. </li>\n<li>Uses Tenserflow, which I've never used before. No practical use I can think of, but would be fun.</li>\n</ul>\n\n<p><a href=\"https://pip.pypa.io/en/stable/news/\"><strong>pip 9.0 is out!</strong></a></p>\n\n<ul>\n<li>New: Add a pip check command to check installed packages dependencies</li>\n<li>pip show is less verbose by default. </li>\n<li>Add --not-required option to pip list, which lists packages that are not dependencies of other packages.</li>\n<li>Many more, including fixes</li>\n<li>9.0.1 (4 days later with 5 fixes)</li>\n</ul>\n\n<p><a href=\"https://nbviewer.jupyter.org/github/knowsuchagency/mpb-sentiment-analysis-example/blob/master/index.ipynb\"><strong>What does Reddit think about the new MBP?</strong></a></p>\n\n<ul>\n<li>I'd never even heard of sentiment analysis before. This is cool that it's topical, interesting, and short.</li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Episode 24 <a href=\"http://pythontesting.net/\">Test and Code Podcast</a>: Raphael Pierzina (cookie cutter, pytest 3.0, pytest sprint, \u2026) will be out the week of Nov 7.</li>\n<li>Some upcoming interviews I'm really excited about.</li>\n<li>Video from PNSQC 2016 conference now up. <a href=\"https://t.co/rg4BENfeGQ\">https://t.co/rg4BENfeGQ</a></li>\n<li>Pietist book still in progress. When there is more info to know, I will share with this podcast, as well as people who follow me through the pythontesting.net slack community, patreon supporters, email subscribers. </li>\n<li>And I'm going do my best to get $5 off for everyone who has purchased the current eBook and left me their email. </li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li>New <a href=\"https://talkpython.fm/\">Talk Python To Me podcast</a> episodes\n<ul>\n<li>Are we failing to fund Python's core infrastructure?</li>\n<li>Parsing horrible things with Python - Erik Rose</li>\n<li>Python at StackOverflow - Martijn Pieters</li>\n</ul></li>\n</ul>", "summary_detail": {"type": "text/html", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "<p>Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this first episode we cover PyData videos, safety-db project, and more! </p>\n\n<h2>News items</h2>\n\n<p><a href=\"https://www.youtube.com/playlist?list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB\"><strong>PyData DC 2016 videos are out</strong></a></p>\n\n<ul>\n<li>64 videos (30 hours)</li>\n<li>Some standout videos</li>\n<li>ElasticSearch and Redis How and When to Use Them</li>\n<li>Renee Teate | Becoming a Data Scientist Advice From My Podcast Guests (becoming a data scientist podcast)</li>\n<li>Visual diagnostics for more informed machine learning</li>\n<li>You got your engineering in my Data Science: Addressing the reproducibility crisis</li>\n</ul>\n\n<p><a href=\"https://github.com/stedmeister/easyargs\"><strong>easyargs</strong></a></p>\n\n<ul>\n<li>A python module to make handling command line arguments easy</li>\n<li>There are many ways to create a command line parser in python: argparse, docopt, click. These are all great options, but require quite a lot of configuration and sometimes you just need a function to be called. Enter easyargs. Define the function that you want to be called, decorate it and let easyargs work out the command line.</li>\n</ul>\n\n<p><a href=\"https://github.com/pyupio/safety-db\"><strong>safety-db</strong> via github</a></p>\n\n<ul>\n<li>A curated database of insecure Python packages</li>\n<li><strong>What is this?</strong> This is an effort to collect all known security vulnerabilities in Python packages and make them available to consume for humans and automated tools.</li>\n<li><strong>What is this not?</strong> This is not a hall of shame, or a list of packages to avoid. The package maintainers show a great responsibility by documenting and fixing security issues in such a way that they can be listed here. That's extremely valuable when considering using a package in production.</li>\n</ul>\n\n<p><a href=\"https://github.com/lengstrom/fast-style-transfer\"><strong>fast-style-transfer</strong></a></p>\n\n<ul>\n<li>Since A-Ha's take on me video, I've loved the idea of short video done in stylized art format. </li>\n<li>Uses Tenserflow, which I've never used before. No practical use I can think of, but would be fun.</li>\n</ul>\n\n<p><a href=\"https://pip.pypa.io/en/stable/news/\"><strong>pip 9.0 is out!</strong></a></p>\n\n<ul>\n<li>New: Add a pip check command to check installed packages dependencies</li>\n<li>pip show is less verbose by default. </li>\n<li>Add --not-required option to pip list, which lists packages that are not dependencies of other packages.</li>\n<li>Many more, including fixes</li>\n<li>9.0.1 (4 days later with 5 fixes)</li>\n</ul>\n\n<p><a href=\"https://nbviewer.jupyter.org/github/knowsuchagency/mpb-sentiment-analysis-example/blob/master/index.ipynb\"><strong>What does Reddit think about the new MBP?</strong></a></p>\n\n<ul>\n<li>I'd never even heard of sentiment analysis before. This is cool that it's topical, interesting, and short.</li>\n</ul>\n\n<h2>Our personal news</h2>\n\n<h3>Brian</h3>\n\n<ul>\n<li>Episode 24 <a href=\"http://pythontesting.net/\">Test and Code Podcast</a>: Raphael Pierzina (cookie cutter, pytest 3.0, pytest sprint, \u2026) will be out the week of Nov 7.</li>\n<li>Some upcoming interviews I'm really excited about.</li>\n<li>Video from PNSQC 2016 conference now up. <a href=\"https://t.co/rg4BENfeGQ\">https://t.co/rg4BENfeGQ</a></li>\n<li>Pietist book still in progress. When there is more info to know, I will share with this podcast, as well as people who follow me through the pythontesting.net slack community, patreon supporters, email subscribers. </li>\n<li>And I'm going do my best to get $5 off for everyone who has purchased the current eBook and left me their email. </li>\n</ul>\n\n<h3>Michael</h3>\n\n<ul>\n<li>New <a href=\"https://talkpython.fm/\">Talk Python To Me podcast</a> episodes\n<ul>\n<li>Are we failing to fund Python's core infrastructure?</li>\n<li>Parsing horrible things with Python - Erik Rose</li>\n<li>Python at StackOverflow - Martijn Pieters</li>\n</ul></li>\n</ul>"}, "tags": [{"term": "Technology", "scheme": null, "label": null}, {"term": "python", "scheme": "http://www.itunes.com/", "label": null}, {"term": "pycharm", "scheme": "http://www.itunes.com/", "label": null}, {"term": "python3", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software", "scheme": "http://www.itunes.com/", "label": null}, {"term": "programming", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web", "scheme": "http://www.itunes.com/", "label": null}, {"term": "web development", "scheme": "http://www.itunes.com/", "label": null}, {"term": "developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "ide", "scheme": "http://www.itunes.com/", "label": null}, {"term": "podcast", "scheme": "http://www.itunes.com/", "label": null}, {"term": "open source", "scheme": "http://www.itunes.com/", "label": null}, {"term": "news", "scheme": "http://www.itunes.com/", "label": null}, {"term": "headlines", "scheme": "http://www.itunes.com/", "label": null}, {"term": "education", "scheme": "http://www.itunes.com/", "label": null}, {"term": "software developer", "scheme": "http://www.itunes.com/", "label": null}, {"term": "data science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "science", "scheme": "http://www.itunes.com/", "label": null}, {"term": "cloud computing", "scheme": "http://www.itunes.com/", "label": null}], "published": "Mon, 07 Nov 2016 00:00:00 -0800", "published_parsed": [2016, 11, 7, 8, 0, 0, 0, 312, 0], "authors": [{"name": "Michael Kennedy (@mkennedy)"}], "author": "Michael Kennedy (@mkennedy)", "author_detail": {"name": "Michael Kennedy (@mkennedy)"}, "itunes_title": "Intro to the show and pip 9 is out!", "itunes_episode": "1", "itunes_explicit": null, "subtitle": "", "subtitle_detail": {"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": ""}, "content": [{"type": "text/plain", "language": null, "base": "https://pythonbytes.fm/episodes/rss", "value": "Welcome to Python Bytes. Python headlines delivered directly to your earbuds. In this first episode we cover PyData videos, safety-db project, and more!"}], "itunes_duration": "00:16:38"}}}